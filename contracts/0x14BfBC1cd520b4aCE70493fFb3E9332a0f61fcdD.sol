contract main {




// =====================  Runtime code  =====================


#
#  - isActive()
#  - withdraw(uint256 arg1)
#  - resetApprovals()
#  - harvest()
#  - sub_61baa460(?)
#  - sub_6f8e4a88(?)
#  - sub_70174012(?)
#  - approveContracts()
#  - rebalanceCollateral()
#  - sub_82a217ac(?)
#  - sub_ad46355f(?)
#  - sub_c27fc48b(?)
#  - sub_cca4b65f(?)
#  - migrate(address arg1)
#  - sub_d2b49a92(?)
#
const name = 'StrategyHedgedFarming', 0

const apiVersion = '', 0

const delegatedAssets = 0


array of uint256 metadataURI;
uint8 stor1;
address healthCheckAddress; offset 8
address vaultAddress;
address strategistAddress;
address rewardsAddress;
address keeperAddress;
address wantAddress;
uint256 minReportDelay;
uint256 maxReportDelay;
uint256 profitFactor;
uint256 debtThreshold;
uint8 stor11;
uint256 sub_1a55f6eb;
uint256 sub_1fa98a80;
uint256 sub_f8c1e75e;
uint256 sub_7acd7922;
uint256 sub_a9b0ca38;
uint256 sub_be48a8f1;
uint256 sub_3e44de51;
uint256 sub_f38c5ccc;
uint256 sub_85889c54;
address shortAddress;
address sub_6ea16e14Address;
address stor23;
address stor24;
address stor25;
address stor26;
address stor27;
address stor28;
address stor29;
address stor30;
address stor31;
uint256 sub_39bb9c24;
uint256 sub_54b1a6d8;
uint256 stor34;
address stor35;
uint256 sub_9a5940ec;
uint256 sub_38a1f2fe;
uint256 sub_9c3014f1;

function metadataURI() payable {
    return metadataURI[0 len metadataURI.length]
}

function sub_1a55f6eb(?) payable {
    return sub_1a55f6eb
}

function debtThreshold() payable {
    return debtThreshold
}

function want() payable {
    return wantAddress
}

function sub_1fa98a80(?) payable {
    return sub_1fa98a80
}

function strategist() payable {
    return strategistAddress
}

function maxReportDelay() payable {
    return maxReportDelay
}

function sub_38a1f2fe(?) payable {
    return sub_38a1f2fe
}

function short() payable {
    return shortAddress
}

function sub_39bb9c24(?) payable {
    return sub_39bb9c24
}

function sub_3e44de51(?) payable {
    return sub_3e44de51
}

function sub_54b1a6d8(?) payable {
    return sub_54b1a6d8
}

function emergencyExit() payable {
    return bool(stor11)
}

function doHealthCheck() payable {
    return bool(stor1)
}

function sub_6ea16e14(?) payable {
    return sub_6ea16e14Address
}

function sub_7acd7922(?) payable {
    return sub_7acd7922
}

function sub_85889c54(?) payable {
    return sub_85889c54
}

function profitFactor() payable {
    return profitFactor
}

function minReportDelay() payable {
    return minReportDelay
}

function sub_9a5940ec(?) payable {
    return sub_9a5940ec
}

function sub_9c3014f1(?) payable {
    return sub_9c3014f1
}

function rewards() payable {
    return rewardsAddress
}

function sub_a9b0ca38(?) payable {
    return sub_a9b0ca38
}

function keeper() payable {
    return keeperAddress
}

function healthCheck() payable {
    return healthCheckAddress
}

function sub_be48a8f1(?) payable {
    return sub_be48a8f1
}

function sub_f38c5ccc(?) payable {
    return sub_f38c5ccc
}

function sub_f8c1e75e(?) payable {
    return sub_f8c1e75e
}

function vault() payable {
    return vaultAddress
}

function _fallback() payable {
    revert
}

function ethToWant(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    return 0
}

function tendTrigger(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    return 0
}

function balanceOfWant() payable {
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_feb6848a(?) payable {
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_ecda3cd6(?) payable {
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_bf428341(?) payable {
    require calldata.size - 4 >= 64
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    sub_39bb9c24 = arg1
    sub_54b1a6d8 = arg2
}

function setProfitFactor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    profitFactor = arg1
    emit UpdatedProfitFactor(arg1);
}

function setDebtThreshold(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    debtThreshold = arg1
    emit UpdatedDebtThreshold(arg1);
}

function setMinReportDelay(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    minReportDelay = arg1
    emit UpdatedMinReportDelay(arg1);
}

function setMaxReportDelay(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    maxReportDelay = arg1
    emit UpdatedMaxReportDelay(arg1);
}

function setKeeper(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    require arg1
    keeperAddress = arg1
    emit UpdatedKeeper(arg1);
}

function setStrategist(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    require arg1
    strategistAddress = arg1
    emit UpdatedStrategist(arg1);
}

function sub_5fc7a201(?) payable {
    require calldata.size - 4 >= 96
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    require arg1 <= 10000
    require arg3 <= 10000
    require arg2 >= 10000
    sub_f38c5ccc = arg3
    sub_be48a8f1 = arg2
    sub_3e44de51 = arg1
}

function sub_29b909ea(?) payable {
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    return (2 * ext_call.return_data[0])
}

function sub_a9c19c66(?) payable {
    require ext_code.size(stor26)
    staticcall stor26.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    staticcall stor26.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_de41f1d3(?) payable {
    require ext_code.size(stor26)
    staticcall stor26.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    staticcall stor26.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function setDoHealthCheck(bool arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.management() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    stor1 = uint8(arg1)
}

function setHealthCheck(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.management() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    healthCheckAddress = arg1
}

function setRewards(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if strategistAddress != msg.sender:
        revert with 0, '!strategist'
    require arg1
    require ext_code.size(vaultAddress)
    call vaultAddress.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args rewardsAddress, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    rewardsAddress = arg1
    require ext_code.size(vaultAddress)
    call vaultAddress.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg1), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    emit UpdatedRewards(arg1);
}

function sub_315c41f2(?) payable {
    require calldata.size - 4 >= 128
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    require arg4 <= 10000
    sub_85889c54 = arg4
    require arg4 > arg3
    require arg3 >= arg2
    require arg2 >= arg1
    sub_f8c1e75e = arg3
    sub_7acd7922 = arg2
    sub_a9b0ca38 = arg1
    if sub_7acd7922 + 10000 < 10000:
        revert with 0, 'SafeMath: addition overflow'
    if not sub_7acd7922 + 10000:
        revert with 0, 'SafeMath: division by zero', 0
    sub_1a55f6eb = 100 * 10^6 / sub_7acd7922 + 10000
    if 100 * 10^6 / sub_7acd7922 + 10000 > 10000:
        revert with 0, 'SafeMath: subtraction overflow', 0
    sub_1fa98a80 = -(100 * 10^6 / sub_7acd7922 + 10000) + 10000
}

function setMetadataURI(string arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    require arg1.length <= test266151307()
    require arg1 + arg1.length + 36 <= calldata.size
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    metadataURI.length = (2 * arg1.length) + 1
    s = 0
    idx = arg1 + 36
    while arg1 + arg1.length + 36 > idx:
        metadataURI[s] = cd[idx]
        s = s + 1
        idx = idx + 32
        continue 
    idx = Mask(251, 0, arg1.length + 31) >> 5
    while metadataURI.length + 31 / 32 > idx:
        metadataURI[idx] = 0
        idx = idx + 1
        continue 
    emit UpdatedMetadataURI(Array(len=arg1.length, data=arg1[all]));
}

function setEmergencyExit() payable {
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.guardian() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != msg.sender:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.management() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != msg.sender:
                    revert with 0, '!authorized'
    stor11 = 1
    require ext_code.size(vaultAddress)
    call vaultAddress.revokeStrategy() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit EmergencyExitEnabled()
}

function tend() payable {
    if keeperAddress != msg.sender:
        if strategistAddress != msg.sender:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.governance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != msg.sender:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.guardian() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != msg.sender:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.management() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != msg.sender:
                        revert with 0, '!authorized'
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.debtOutstanding() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < ext_call.return_data[0]:
        if ext_call.return_data[0] > ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
}

function sub_572f1e78(?) payable {
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / Mask(112, 0, ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        return (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]))
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / Mask(112, 0, ext_call.return_data[32]))
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    return (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]))
}

function sub_cad20a29(?) payable {
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / Mask(112, 0, ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        return (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]))
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / Mask(112, 0, ext_call.return_data[32]))
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    return (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]))
}

function sub_e6e7114b(?) payable {
    require ext_code.size(stor26)
    staticcall stor26.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    staticcall stor26.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(stor27)
        staticcall stor27.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor31)
        staticcall stor31.getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if 10000 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != 10000:
                    revert with 0, 'SafeMath: multiplication overflow'
        revert with 0, 'SafeMath: division by zero', 0
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor31)
    staticcall stor31.getPrice() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
    if 10000 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != 10000:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: division by zero', 0
    return (10000 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_ec079f38(?) payable {
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[12 len 20] != wantAddress:
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / ext_call.return_data[0])
    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
}

function sweep(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.governance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        revert with 0, '!authorized'
    if wantAddress == arg1:
        revert with 0, '!want'
    if vaultAddress == arg1:
        revert with 0, '!shares'
    mem[ceil32(return_data.size) + 96] = 7
    mem[ceil32(return_data.size) + 128] = shortAddress
    mem[ceil32(return_data.size) + 160] = sub_6ea16e14Address
    mem[ceil32(return_data.size) + 192] = stor24
    mem[ceil32(return_data.size) + 224] = stor23
    mem[ceil32(return_data.size) + 256] = stor25
    mem[ceil32(return_data.size) + 288] = stor26
    mem[ceil32(return_data.size) + 320] = stor27
    idx = 0
    while idx < 7:
        require idx < 7
        if arg1 == mem[(32 * idx) + ceil32(return_data.size) + 140 len 20]:
            revert with 0, '!protected'
        idx = idx + 1
        continue 
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.governance() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(2 * ceil32(return_data.size)) + 356] = this.address
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args mem[(2 * ceil32(return_data.size)) + 356 len ceil32(return_data.size) + 32]
    mem[(2 * ceil32(return_data.size)) + 352] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(4 * ceil32(return_data.size)) + 388] = address(ext_call.return_data[0])
    mem[(4 * ceil32(return_data.size)) + 420] = ext_call.return_data[0]
    mem[(4 * ceil32(return_data.size)) + 352] = (5 * ceil32(return_data.size)) + 68
    mem[(4 * ceil32(return_data.size)) + 388 len 28] = address(ext_call.return_data[0]) << 64
    mem[(4 * ceil32(return_data.size)) + 384 len 4] = unknown_0xa9059cbb(?????)
    mem[(4 * ceil32(return_data.size)) + 452] = 32
    mem[(4 * ceil32(return_data.size)) + 484] = 'SafeERC20: low-level call failed'
    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(arg1):
        revert with 0, 'Address: call to non-contract'
    if not ext_code.hash(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[(4 * ceil32(return_data.size)) + 516 len floor32((5 * ceil32(return_data.size)) + 99)] = unknown_0xa9059cbb(?????), address(ext_call.return_data[0]) << 64, 0, ext_call.return_data[0], mem[(4 * ceil32(return_data.size)) + 452 len floor32((5 * ceil32(return_data.size)) + 99) - 68]
    if floor32((5 * ceil32(return_data.size)) + 99) > (5 * ceil32(return_data.size)) + 68:
        mem[(10 * ceil32(return_data.size)) + 584] = 0
    call arg1.mem[(4 * ceil32(return_data.size)) + 516 len 4] with:
         gas gas_remaining wei
        args mem[(4 * ceil32(return_data.size)) + 520 len (13 * ceil32(return_data.size)) + 64]
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(4 * ceil32(return_data.size)) + 548 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(4 * ceil32(return_data.size)) + 548] == bool(mem[(4 * ceil32(return_data.size)) + 548])
            if not mem[(4 * ceil32(return_data.size)) + 548]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
}

function initialize(address arg1, address arg2, address arg3, address arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    if wantAddress:
        revert with 0, 'Strategy already initialized'
    vaultAddress = arg1
    require ext_code.size(arg1)
    staticcall arg1.token() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    wantAddress = ext_call.return_data[12 len 20]
    mem[ceil32(return_data.size) + 100] = this.address
    mem[ceil32(return_data.size) + 132] = arg1
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0xdd62ed3e with:
            gas gas_remaining wei
           args address(this.address), arg1
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
    mem[(2 * ceil32(return_data.size)) + 132] = arg1
    mem[(2 * ceil32(return_data.size)) + 164] = -1
    mem[(2 * ceil32(return_data.size)) + 96] = 68
    mem[(2 * ceil32(return_data.size)) + 132 len 28] = address(arg1) << 64
    mem[(2 * ceil32(return_data.size)) + 128 len 4] = approve(address arg1, uint256 arg2)
    mem[(2 * ceil32(return_data.size)) + 196] = 32
    mem[(2 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(ext_call.return_data[0])):
        revert with 0, 'Address: call to non-contract'
    if not ext_code.hash(address(ext_call.return_data[0])):
        revert with 0, 'Address: call to non-contract'
    mem[(2 * ceil32(return_data.size)) + 260 len 96] = approve(address arg1, uint256 arg2), address(arg1) << 64, 0, -1, 0
    mem[(2 * ceil32(return_data.size)) + 328] = 0
    call address(ext_call.return_data[0]) with:
       funct Mask(32, 224, approve(address arg1, uint256 arg2), address(arg1) << 64, 0, -1, 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, approve(address arg1, uint256 arg2), address(arg1) << 64, 0, -1, 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(2 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(2 * ceil32(return_data.size)) + 292] == bool(mem[(2 * ceil32(return_data.size)) + 292])
            if not mem[(2 * ceil32(return_data.size)) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    strategistAddress = arg2
    rewardsAddress = arg3
    keeperAddress = arg4
    minReportDelay = 0
    maxReportDelay = 24 * 3600
    profitFactor = 100
    debtThreshold = 0
    require ext_code.size(vaultAddress)
    call vaultAddress.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg3), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    maxReportDelay = 6300
    profitFactor = 1500
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    debtThreshold = 1000000 * 10^18
    if sub_7acd7922 + 10000 < 10000:
        revert with 0, 'SafeMath: addition overflow'
    if not sub_7acd7922 + 10000:
        revert with 0, 'SafeMath: division by zero', 0
    sub_1a55f6eb = 100 * 10^6 / sub_7acd7922 + 10000
    if 100 * 10^6 / sub_7acd7922 + 10000 > 10000:
        revert with 0, 'SafeMath: subtraction overflow', 0
    sub_1fa98a80 = -(100 * 10^6 / sub_7acd7922 + 10000) + 10000
}

function sub_66c0fc1e(?) payable {
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    call stor28.0x441a3e70 with:
         gas gas_remaining wei
        args stor34, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor29)
                call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                     gas gas_remaining wei
                    args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
        else:
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
    else:
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor29)
                call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                     gas gas_remaining wei
                    args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
        else:
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
}

function sub_bb932801(?) payable {
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    call stor28.0x441a3e70 with:
         gas gas_remaining wei
        args stor34, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor29)
                call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                     gas gas_remaining wei
                    args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
        else:
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
    else:
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor29)
                call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                     gas gas_remaining wei
                    args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
        else:
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], 0 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
            else:
                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] != sub_39bb9c24:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor29)
                    call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                else:
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], 0 / ext_call.return_data[0], address(this.address), block.timestamp
                    else:
                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] != sub_39bb9c24:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor29)
                        call stor29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                             gas gas_remaining wei
                            args shortAddress, wantAddress, ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10000 / ext_call.return_data[0], address(this.address), block.timestamp
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        require ext_code.size(stor27)
        staticcall stor27.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor27)
        call stor27.repayBorrow(uint256 arg1) with:
             gas gas_remaining wei
            args ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    call stor26.0xa0712d68 with:
         gas gas_remaining wei
        args ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function sub_8555e2e5(?) payable {
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor27)
        staticcall stor27.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10000:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 10000 * 0 / Mask(112, 0, ext_call.return_data[0]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 0 / ext_call.return_data[0])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * 0 / Mask(112, 0, ext_call.return_data[32]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 0 / ext_call.return_data[0])
        if 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 10000:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 0 / ext_call.return_data[0])
        if 2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 0 / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 0 / ext_call.return_data[0])
    if ext_call.return_data[12 len 20] != wantAddress:
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor27)
            staticcall stor27.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != wantAddress:
                if not ext_call.return_data[0]:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero', 0
                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        return (0 / 0 / ext_call.return_data[0])
                    if 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10000:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not 10000 * 0 / Mask(112, 0, ext_call.return_data[0]):
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        return (0 / 0 / ext_call.return_data[0])
                    if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / ext_call.return_data[0])
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 10000:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 0 / ext_call.return_data[0])
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10000:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 10000 * 0 / Mask(112, 0, ext_call.return_data[32]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 0 / ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor27)
        staticcall stor27.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                    if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
                if 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10000:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 10000 * 0 / Mask(112, 0, ext_call.return_data[0]):
                    if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
                if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
            if 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
            if 2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
            if 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * 0 / Mask(112, 0, ext_call.return_data[32]):
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
            if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
        if 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 10000:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
        if 2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor27)
        staticcall stor27.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10000:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 10000 * 0 / Mask(112, 0, ext_call.return_data[0]):
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    return (0 / 0 / ext_call.return_data[0])
                if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 0 / ext_call.return_data[0])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * 0 / Mask(112, 0, ext_call.return_data[32]):
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 0 / ext_call.return_data[0])
            if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 0 / ext_call.return_data[0])
        if 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 10000:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 0 / ext_call.return_data[0])
        if 2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 0 / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 0 / ext_call.return_data[0])
    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
            if 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10000:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 10000 * 0 / Mask(112, 0, ext_call.return_data[0]):
                if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
            if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        if not Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
        if 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 10000:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]):
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
        if 2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (2 * 10000 * Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        if not 0 / Mask(112, 0, ext_call.return_data[32]):
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
        if 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10000:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 10000 * 0 / Mask(112, 0, ext_call.return_data[32]):
            if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
        if 2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (2 * 10000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    if not Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
        if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
    if 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 10000:
        revert with 0, 'SafeMath: multiplication overflow'
    if not 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]):
        if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        return (0 / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
    if 2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) != 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    return (2 * 10000 * Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) / 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
}

function sub_f81bfeb8(?) payable {
    mem[100] = this.address
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 132] = 0
    require ext_code.size(stor28)
    call stor28.0x441a3e70 with:
         gas gas_remaining wei
        args stor34, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(stor30)
    call stor30.claimComp(address arg1) with:
         gas gas_remaining wei
        args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 100] = this.address
    require ext_code.size(stor24)
    staticcall stor24.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        mem[(2 * ceil32(return_data.size)) + 100] = this.address
        require ext_code.size(stor25)
        staticcall stor25.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] > ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            else:
                return 0
        if stor35 == stor25:
            mem[(4 * ceil32(return_data.size)) + 96] = 2
            mem[(4 * ceil32(return_data.size)) + 128] = stor25
            require stor35 == stor25
            mem[(4 * ceil32(return_data.size)) + 160] = wantAddress
            mem[(4 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(4 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(4 * ceil32(return_data.size)) + 228] = 0
            mem[(4 * ceil32(return_data.size)) + 260] = 160
            mem[(4 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (4 * ceil32(return_data.size)) + 128
            t = (4 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(4 * ceil32(return_data.size)) + 292] = this.address
            mem[(4 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(stor29)
            call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(4 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (6 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1227 = mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (4 * ceil32(return_data.size)) + return_data.size + 192 > (4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223
            _1239 = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] <= test266151307()
            require (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 32 >= 0 and (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224 <= test266151307()
            mem[64] = (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224
            mem[(6 * ceil32(return_data.size)) + 192] = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require return_data.size >= _1227 + (32 * _1239) + 32
            mem[(6 * ceil32(return_data.size)) + 224 len 32 * _1239] = mem[(4 * ceil32(return_data.size)) + _1227 + 224 len 32 * _1239]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2325 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_2325]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_2325] - ext_call.return_data[0])
        if stor35 == wantAddress:
            mem[(4 * ceil32(return_data.size)) + 96] = 2
            mem[(4 * ceil32(return_data.size)) + 128] = stor25
            require stor35 == wantAddress
            mem[(4 * ceil32(return_data.size)) + 160] = wantAddress
            mem[(4 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(4 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(4 * ceil32(return_data.size)) + 228] = 0
            mem[(4 * ceil32(return_data.size)) + 260] = 160
            mem[(4 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (4 * ceil32(return_data.size)) + 128
            t = (4 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(4 * ceil32(return_data.size)) + 292] = this.address
            mem[(4 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(stor29)
            call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(4 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (6 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1229 = mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (4 * ceil32(return_data.size)) + return_data.size + 192 > (4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223
            _1241 = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] <= test266151307()
            require (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 32 >= 0 and (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224 <= test266151307()
            mem[64] = (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224
            mem[(6 * ceil32(return_data.size)) + 192] = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require return_data.size >= _1229 + (32 * _1241) + 32
            mem[(6 * ceil32(return_data.size)) + 224 len 32 * _1241] = mem[(4 * ceil32(return_data.size)) + _1229 + 224 len 32 * _1241]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2327 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_2327]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_2327] - ext_call.return_data[0])
        mem[(4 * ceil32(return_data.size)) + 96] = 3
        mem[(4 * ceil32(return_data.size)) + 128 len 96] = call.data[calldata.size len 96]
        mem[(4 * ceil32(return_data.size)) + 128] = stor25
        if stor35 == wantAddress:
            mem[(4 * ceil32(return_data.size)) + 160] = wantAddress
            mem[(4 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(4 * ceil32(return_data.size)) + 228] = ext_call.return_data[0]
            mem[(4 * ceil32(return_data.size)) + 260] = 0
            mem[(4 * ceil32(return_data.size)) + 292] = 160
            mem[(4 * ceil32(return_data.size)) + 388] = 3
            idx = 0
            s = (4 * ceil32(return_data.size)) + 128
            t = (4 * ceil32(return_data.size)) + 420
            while idx < 3:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(4 * ceil32(return_data.size)) + 324] = this.address
            mem[(4 * ceil32(return_data.size)) + 356] = block.timestamp
            require ext_code.size(stor29)
            call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 3, mem[(4 * ceil32(return_data.size)) + 420 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (6 * ceil32(return_data.size)) + 224
            require return_data.size >= 32
            _1231 = mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28]
            require mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (4 * ceil32(return_data.size)) + return_data.size + 224 > (4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 255
            _1243 = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
            require mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224] <= test266151307()
            require (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 32 >= 0 and (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256 <= test266151307()
            mem[64] = (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256
            mem[(6 * ceil32(return_data.size)) + 224] = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
            require return_data.size >= _1231 + (32 * _1243) + 32
            mem[(6 * ceil32(return_data.size)) + 256 len 32 * _1243] = mem[(4 * ceil32(return_data.size)) + _1231 + 256 len 32 * _1243]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2329 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_2329]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_2329] - ext_call.return_data[0])
        mem[(4 * ceil32(return_data.size)) + 160] = stor35
        mem[(4 * ceil32(return_data.size)) + 192] = wantAddress
        mem[(4 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(4 * ceil32(return_data.size)) + 228] = ext_call.return_data[0]
        mem[(4 * ceil32(return_data.size)) + 260] = 0
        mem[(4 * ceil32(return_data.size)) + 292] = 160
        mem[(4 * ceil32(return_data.size)) + 388] = 3
        idx = 0
        s = (4 * ceil32(return_data.size)) + 128
        t = (4 * ceil32(return_data.size)) + 420
        while idx < 3:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(4 * ceil32(return_data.size)) + 324] = this.address
        mem[(4 * ceil32(return_data.size)) + 356] = block.timestamp
        require ext_code.size(stor29)
        call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 3, mem[(4 * ceil32(return_data.size)) + 420 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (6 * ceil32(return_data.size)) + 224
        require return_data.size >= 32
        _1230 = mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28]
        require mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] <= test266151307()
        require (4 * ceil32(return_data.size)) + return_data.size + 224 > (4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 255
        _1242 = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
        require mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224] <= test266151307()
        require (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 32 >= 0 and (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256 <= test266151307()
        mem[64] = (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256
        mem[(6 * ceil32(return_data.size)) + 224] = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
        require return_data.size >= _1230 + (32 * _1242) + 32
        mem[(6 * ceil32(return_data.size)) + 256 len 32 * _1242] = mem[(4 * ceil32(return_data.size)) + _1230 + 256 len 32 * _1242]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2328 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_2328]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_2328] - ext_call.return_data[0])
    if stor35 == stor24:
        mem[(2 * ceil32(return_data.size)) + 96] = 2
        mem[(2 * ceil32(return_data.size)) + 128] = stor24
        require stor35 == stor24
        mem[(2 * ceil32(return_data.size)) + 160] = wantAddress
        mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
        mem[(2 * ceil32(return_data.size)) + 228] = 0
        mem[(2 * ceil32(return_data.size)) + 260] = 160
        mem[(2 * ceil32(return_data.size)) + 356] = 2
        idx = 0
        s = (2 * ceil32(return_data.size)) + 128
        t = (2 * ceil32(return_data.size)) + 388
        while idx < 2:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(2 * ceil32(return_data.size)) + 292] = this.address
        mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
        require ext_code.size(stor29)
        call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _1221 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
        require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
        require (2 * ceil32(return_data.size)) + return_data.size + 192 > (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223
        _1233 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
        require mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] <= test266151307()
        require (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 32 >= 0 and (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224 <= test266151307()
        mem[64] = (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224
        mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
        require return_data.size >= _1221 + (32 * _1233) + 32
        mem[(4 * ceil32(return_data.size)) + 224 len 32 * _1233] = mem[(2 * ceil32(return_data.size)) + _1221 + 224 len 32 * _1233]
        mem[mem[64] + 4] = this.address
        require ext_code.size(stor25)
        staticcall stor25.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2319 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2331 = mem[_2319]
        if not mem[_2319]:
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2393 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] <= mem[_2393]:
                return (mem[_2393] - ext_call.return_data[0])
            var94001 = 32
            revert with 0, 'SafeMath: subtraction overflow', 0
        if stor35 == stor25:
            _2368 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            require 0 < mem[_2368]
            mem[_2368 + 32] = stor25
            require 1 < mem[_2368]
            if stor35 == stor25:
                mem[_2368 + 64] = wantAddress
                mem[_2368 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                mem[_2368 + 100] = _2331
                mem[_2368 + 132] = 0
                mem[_2368 + 164] = 160
                mem[_2368 + 260] = mem[_2368]
                idx = 0
                s = _2368 + 32
                t = _2368 + 292
                while idx < mem[_2368]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_2368 + 196] = this.address
                mem[_2368 + 228] = block.timestamp
                require ext_code.size(stor29)
                call stor29.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _2368 + (32 * mem[_2368]) + -mem[64] + 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3423 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3459 = mem[_3423]
                require mem[_3423] <= test266151307()
                require _3423 + return_data.size > _3423 + mem[_3423] + 31
                _3495 = mem[_3423 + mem[_3423]]
                require mem[_3423 + mem[_3423]] <= test266151307()
                require (32 * mem[_3423 + mem[_3423]]) + 32 >= 0 and _3423 + ceil32(return_data.size) + (32 * mem[_3423 + mem[_3423]]) + 32 <= test266151307()
                mem[64] = _3423 + ceil32(return_data.size) + (32 * mem[_3423 + mem[_3423]]) + 32
                mem[_3423 + ceil32(return_data.size)] = _3495
                require return_data.size >= _3459 + (32 * _3495) + 32
                mem[_3423 + ceil32(return_data.size) + 32 len 32 * _3495] = mem[_3423 + _3459 + 32 len 32 * _3495]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4143 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if ext_call.return_data[0] > mem[_4143]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (mem[_4143] - ext_call.return_data[0])
            mem[_2368 + 64] = stor35
            require 2 < mem[_2368]
            mem[_2368 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2368 + 100] = _2331
            mem[_2368 + 132] = 0
            mem[_2368 + 164] = 160
            mem[_2368 + 260] = mem[_2368]
            idx = 0
            s = _2368 + 32
            t = _2368 + 292
            while idx < mem[_2368]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2368 + 196] = this.address
            mem[_2368 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2368 + (32 * mem[_2368]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3422 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3458 = mem[_3422]
            require mem[_3422] <= test266151307()
            require _3422 + return_data.size > _3422 + mem[_3422] + 31
            _3494 = mem[_3422 + mem[_3422]]
            require mem[_3422 + mem[_3422]] <= test266151307()
            require (32 * mem[_3422 + mem[_3422]]) + 32 >= 0 and _3422 + ceil32(return_data.size) + (32 * mem[_3422 + mem[_3422]]) + 32 <= test266151307()
            mem[64] = _3422 + ceil32(return_data.size) + (32 * mem[_3422 + mem[_3422]]) + 32
            mem[_3422 + ceil32(return_data.size)] = _3494
            require return_data.size >= _3458 + (32 * _3494) + 32
            mem[_3422 + ceil32(return_data.size) + 32 len 32 * _3494] = mem[_3422 + _3458 + 32 len 32 * _3494]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4142 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4142]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4142] - ext_call.return_data[0])
        if stor35 == wantAddress:
            _2380 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            require 0 < mem[_2380]
            mem[_2380 + 32] = stor25
            require 1 < mem[_2380]
            if stor35 == wantAddress:
                mem[_2380 + 64] = wantAddress
                mem[_2380 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                mem[_2380 + 100] = _2331
                mem[_2380 + 132] = 0
                mem[_2380 + 164] = 160
                mem[_2380 + 260] = mem[_2380]
                idx = 0
                s = _2380 + 32
                t = _2380 + 292
                while idx < mem[_2380]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_2380 + 196] = this.address
                mem[_2380 + 228] = block.timestamp
                require ext_code.size(stor29)
                call stor29.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _2380 + (32 * mem[_2380]) + -mem[64] + 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3425 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3461 = mem[_3425]
                require mem[_3425] <= test266151307()
                require _3425 + return_data.size > _3425 + mem[_3425] + 31
                _3497 = mem[_3425 + mem[_3425]]
                require mem[_3425 + mem[_3425]] <= test266151307()
                require (32 * mem[_3425 + mem[_3425]]) + 32 >= 0 and _3425 + ceil32(return_data.size) + (32 * mem[_3425 + mem[_3425]]) + 32 <= test266151307()
                mem[64] = _3425 + ceil32(return_data.size) + (32 * mem[_3425 + mem[_3425]]) + 32
                mem[_3425 + ceil32(return_data.size)] = _3497
                require return_data.size >= _3461 + (32 * _3497) + 32
                mem[_3425 + ceil32(return_data.size) + 32 len 32 * _3497] = mem[_3425 + _3461 + 32 len 32 * _3497]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4145 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if ext_call.return_data[0] > mem[_4145]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (mem[_4145] - ext_call.return_data[0])
            mem[_2380 + 64] = stor35
            require 2 < mem[_2380]
            mem[_2380 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2380 + 100] = _2331
            mem[_2380 + 132] = 0
            mem[_2380 + 164] = 160
            mem[_2380 + 260] = mem[_2380]
            idx = 0
            s = _2380 + 32
            t = _2380 + 292
            while idx < mem[_2380]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2380 + 196] = this.address
            mem[_2380 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2380 + (32 * mem[_2380]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3424 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3460 = mem[_3424]
            require mem[_3424] <= test266151307()
            require _3424 + return_data.size > _3424 + mem[_3424] + 31
            _3496 = mem[_3424 + mem[_3424]]
            require mem[_3424 + mem[_3424]] <= test266151307()
            require (32 * mem[_3424 + mem[_3424]]) + 32 >= 0 and _3424 + ceil32(return_data.size) + (32 * mem[_3424 + mem[_3424]]) + 32 <= test266151307()
            mem[64] = _3424 + ceil32(return_data.size) + (32 * mem[_3424 + mem[_3424]]) + 32
            mem[_3424 + ceil32(return_data.size)] = _3496
            require return_data.size >= _3460 + (32 * _3496) + 32
            mem[_3424 + ceil32(return_data.size) + 32 len 32 * _3496] = mem[_3424 + _3460 + 32 len 32 * _3496]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4144 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4144]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4144] - ext_call.return_data[0])
        _2381 = mem[64]
        mem[mem[64]] = 3
        mem[64] = mem[64] + 128
        mem[_2381 + 32 len 96] = call.data[calldata.size len 96]
        require 0 < mem[_2381]
        mem[_2381 + 32] = stor25
        require 1 < mem[_2381]
        if stor35 == wantAddress:
            mem[_2381 + 64] = wantAddress
            mem[_2381 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2381 + 132] = _2331
            mem[_2381 + 164] = 0
            mem[_2381 + 196] = 160
            mem[_2381 + 292] = mem[_2381]
            idx = 0
            s = _2381 + 32
            t = _2381 + 324
            while idx < mem[_2381]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2381 + 228] = this.address
            mem[_2381 + 260] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2381 + (32 * mem[_2381]) + -mem[64] + 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3427 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3463 = mem[_3427]
            require mem[_3427] <= test266151307()
            require _3427 + return_data.size > _3427 + mem[_3427] + 31
            _3499 = mem[_3427 + mem[_3427]]
            require mem[_3427 + mem[_3427]] <= test266151307()
            require (32 * mem[_3427 + mem[_3427]]) + 32 >= 0 and _3427 + ceil32(return_data.size) + (32 * mem[_3427 + mem[_3427]]) + 32 <= test266151307()
            mem[64] = _3427 + ceil32(return_data.size) + (32 * mem[_3427 + mem[_3427]]) + 32
            mem[_3427 + ceil32(return_data.size)] = _3499
            require return_data.size >= _3463 + (32 * _3499) + 32
            mem[_3427 + ceil32(return_data.size) + 32 len 32 * _3499] = mem[_3427 + _3463 + 32 len 32 * _3499]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4147 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4147]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4147] - ext_call.return_data[0])
        mem[_2381 + 64] = stor35
        require 2 < mem[_2381]
        mem[_2381 + 96] = wantAddress
        mem[_2381 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[_2381 + 132] = _2331
        mem[_2381 + 164] = 0
        mem[_2381 + 196] = 160
        mem[_2381 + 292] = mem[_2381]
        idx = 0
        s = _2381 + 32
        t = _2381 + 324
        while idx < mem[_2381]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_2381 + 228] = this.address
        mem[_2381 + 260] = block.timestamp
        require ext_code.size(stor29)
        call stor29.mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2381 + (32 * mem[_2381]) + -mem[64] + 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3426 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3462 = mem[_3426]
        require mem[_3426] <= test266151307()
        require _3426 + return_data.size > _3426 + mem[_3426] + 31
        _3498 = mem[_3426 + mem[_3426]]
        require mem[_3426 + mem[_3426]] <= test266151307()
        require (32 * mem[_3426 + mem[_3426]]) + 32 >= 0 and _3426 + ceil32(return_data.size) + (32 * mem[_3426 + mem[_3426]]) + 32 <= test266151307()
        mem[64] = _3426 + ceil32(return_data.size) + (32 * mem[_3426 + mem[_3426]]) + 32
        mem[_3426 + ceil32(return_data.size)] = _3498
        require return_data.size >= _3462 + (32 * _3498) + 32
        mem[_3426 + ceil32(return_data.size) + 32 len 32 * _3498] = mem[_3426 + _3462 + 32 len 32 * _3498]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4146 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_4146]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_4146] - ext_call.return_data[0])
    if stor35 == wantAddress:
        mem[(2 * ceil32(return_data.size)) + 96] = 2
        mem[(2 * ceil32(return_data.size)) + 128] = stor24
        require stor35 == wantAddress
        mem[(2 * ceil32(return_data.size)) + 160] = wantAddress
        mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
        mem[(2 * ceil32(return_data.size)) + 228] = 0
        mem[(2 * ceil32(return_data.size)) + 260] = 160
        mem[(2 * ceil32(return_data.size)) + 356] = 2
        idx = 0
        s = (2 * ceil32(return_data.size)) + 128
        t = (2 * ceil32(return_data.size)) + 388
        while idx < 2:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(2 * ceil32(return_data.size)) + 292] = this.address
        mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
        require ext_code.size(stor29)
        call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _1223 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
        require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
        require (2 * ceil32(return_data.size)) + return_data.size + 192 > (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223
        _1235 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
        require mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] <= test266151307()
        require (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 32 >= 0 and (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224 <= test266151307()
        mem[64] = (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 224
        mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
        require return_data.size >= _1223 + (32 * _1235) + 32
        mem[(4 * ceil32(return_data.size)) + 224 len 32 * _1235] = mem[(2 * ceil32(return_data.size)) + _1223 + 224 len 32 * _1235]
        mem[mem[64] + 4] = this.address
        require ext_code.size(stor25)
        staticcall stor25.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2321 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2333 = mem[_2321]
        if not mem[_2321]:
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2397 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] <= mem[_2397]:
                return (mem[_2397] - ext_call.return_data[0])
            var95001 = 32
            revert with 0, 'SafeMath: subtraction overflow', 0
        if stor35 == stor25:
            _2372 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            require 0 < mem[_2372]
            mem[_2372 + 32] = stor25
            require 1 < mem[_2372]
            if stor35 == stor25:
                mem[_2372 + 64] = wantAddress
                mem[_2372 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                mem[_2372 + 100] = _2333
                mem[_2372 + 132] = 0
                mem[_2372 + 164] = 160
                mem[_2372 + 260] = mem[_2372]
                idx = 0
                s = _2372 + 32
                t = _2372 + 292
                while idx < mem[_2372]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_2372 + 196] = this.address
                mem[_2372 + 228] = block.timestamp
                require ext_code.size(stor29)
                call stor29.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _2372 + (32 * mem[_2372]) + -mem[64] + 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3435 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3471 = mem[_3435]
                require mem[_3435] <= test266151307()
                require _3435 + return_data.size > _3435 + mem[_3435] + 31
                _3507 = mem[_3435 + mem[_3435]]
                require mem[_3435 + mem[_3435]] <= test266151307()
                require (32 * mem[_3435 + mem[_3435]]) + 32 >= 0 and _3435 + ceil32(return_data.size) + (32 * mem[_3435 + mem[_3435]]) + 32 <= test266151307()
                mem[64] = _3435 + ceil32(return_data.size) + (32 * mem[_3435 + mem[_3435]]) + 32
                mem[_3435 + ceil32(return_data.size)] = _3507
                require return_data.size >= _3471 + (32 * _3507) + 32
                mem[_3435 + ceil32(return_data.size) + 32 len 32 * _3507] = mem[_3435 + _3471 + 32 len 32 * _3507]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4155 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if ext_call.return_data[0] > mem[_4155]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (mem[_4155] - ext_call.return_data[0])
            mem[_2372 + 64] = stor35
            require 2 < mem[_2372]
            mem[_2372 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2372 + 100] = _2333
            mem[_2372 + 132] = 0
            mem[_2372 + 164] = 160
            mem[_2372 + 260] = mem[_2372]
            idx = 0
            s = _2372 + 32
            t = _2372 + 292
            while idx < mem[_2372]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2372 + 196] = this.address
            mem[_2372 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2372 + (32 * mem[_2372]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3434 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3470 = mem[_3434]
            require mem[_3434] <= test266151307()
            require _3434 + return_data.size > _3434 + mem[_3434] + 31
            _3506 = mem[_3434 + mem[_3434]]
            require mem[_3434 + mem[_3434]] <= test266151307()
            require (32 * mem[_3434 + mem[_3434]]) + 32 >= 0 and _3434 + ceil32(return_data.size) + (32 * mem[_3434 + mem[_3434]]) + 32 <= test266151307()
            mem[64] = _3434 + ceil32(return_data.size) + (32 * mem[_3434 + mem[_3434]]) + 32
            mem[_3434 + ceil32(return_data.size)] = _3506
            require return_data.size >= _3470 + (32 * _3506) + 32
            mem[_3434 + ceil32(return_data.size) + 32 len 32 * _3506] = mem[_3434 + _3470 + 32 len 32 * _3506]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4154 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4154]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4154] - ext_call.return_data[0])
        if stor35 == wantAddress:
            _2384 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            require 0 < mem[_2384]
            mem[_2384 + 32] = stor25
            require 1 < mem[_2384]
            if stor35 == wantAddress:
                mem[_2384 + 64] = wantAddress
                mem[_2384 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                mem[_2384 + 100] = _2333
                mem[_2384 + 132] = 0
                mem[_2384 + 164] = 160
                mem[_2384 + 260] = mem[_2384]
                idx = 0
                s = _2384 + 32
                t = _2384 + 292
                while idx < mem[_2384]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_2384 + 196] = this.address
                mem[_2384 + 228] = block.timestamp
                require ext_code.size(stor29)
                call stor29.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _2384 + (32 * mem[_2384]) + -mem[64] + 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3437 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3473 = mem[_3437]
                require mem[_3437] <= test266151307()
                require _3437 + return_data.size > _3437 + mem[_3437] + 31
                _3509 = mem[_3437 + mem[_3437]]
                require mem[_3437 + mem[_3437]] <= test266151307()
                require (32 * mem[_3437 + mem[_3437]]) + 32 >= 0 and _3437 + ceil32(return_data.size) + (32 * mem[_3437 + mem[_3437]]) + 32 <= test266151307()
                mem[64] = _3437 + ceil32(return_data.size) + (32 * mem[_3437 + mem[_3437]]) + 32
                mem[_3437 + ceil32(return_data.size)] = _3509
                require return_data.size >= _3473 + (32 * _3509) + 32
                mem[_3437 + ceil32(return_data.size) + 32 len 32 * _3509] = mem[_3437 + _3473 + 32 len 32 * _3509]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4157 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if ext_call.return_data[0] > mem[_4157]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (mem[_4157] - ext_call.return_data[0])
            mem[_2384 + 64] = stor35
            require 2 < mem[_2384]
            mem[_2384 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2384 + 100] = _2333
            mem[_2384 + 132] = 0
            mem[_2384 + 164] = 160
            mem[_2384 + 260] = mem[_2384]
            idx = 0
            s = _2384 + 32
            t = _2384 + 292
            while idx < mem[_2384]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2384 + 196] = this.address
            mem[_2384 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2384 + (32 * mem[_2384]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3436 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3472 = mem[_3436]
            require mem[_3436] <= test266151307()
            require _3436 + return_data.size > _3436 + mem[_3436] + 31
            _3508 = mem[_3436 + mem[_3436]]
            require mem[_3436 + mem[_3436]] <= test266151307()
            require (32 * mem[_3436 + mem[_3436]]) + 32 >= 0 and _3436 + ceil32(return_data.size) + (32 * mem[_3436 + mem[_3436]]) + 32 <= test266151307()
            mem[64] = _3436 + ceil32(return_data.size) + (32 * mem[_3436 + mem[_3436]]) + 32
            mem[_3436 + ceil32(return_data.size)] = _3508
            require return_data.size >= _3472 + (32 * _3508) + 32
            mem[_3436 + ceil32(return_data.size) + 32 len 32 * _3508] = mem[_3436 + _3472 + 32 len 32 * _3508]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4156 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4156]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4156] - ext_call.return_data[0])
        _2385 = mem[64]
        mem[mem[64]] = 3
        mem[64] = mem[64] + 128
        mem[_2385 + 32 len 96] = call.data[calldata.size len 96]
        require 0 < mem[_2385]
        mem[_2385 + 32] = stor25
        require 1 < mem[_2385]
        if stor35 == wantAddress:
            mem[_2385 + 64] = wantAddress
            mem[_2385 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2385 + 132] = _2333
            mem[_2385 + 164] = 0
            mem[_2385 + 196] = 160
            mem[_2385 + 292] = mem[_2385]
            idx = 0
            s = _2385 + 32
            t = _2385 + 324
            while idx < mem[_2385]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2385 + 228] = this.address
            mem[_2385 + 260] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2385 + (32 * mem[_2385]) + -mem[64] + 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3439 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3475 = mem[_3439]
            require mem[_3439] <= test266151307()
            require _3439 + return_data.size > _3439 + mem[_3439] + 31
            _3511 = mem[_3439 + mem[_3439]]
            require mem[_3439 + mem[_3439]] <= test266151307()
            require (32 * mem[_3439 + mem[_3439]]) + 32 >= 0 and _3439 + ceil32(return_data.size) + (32 * mem[_3439 + mem[_3439]]) + 32 <= test266151307()
            mem[64] = _3439 + ceil32(return_data.size) + (32 * mem[_3439 + mem[_3439]]) + 32
            mem[_3439 + ceil32(return_data.size)] = _3511
            require return_data.size >= _3475 + (32 * _3511) + 32
            mem[_3439 + ceil32(return_data.size) + 32 len 32 * _3511] = mem[_3439 + _3475 + 32 len 32 * _3511]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4159 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4159]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4159] - ext_call.return_data[0])
        mem[_2385 + 64] = stor35
        require 2 < mem[_2385]
        mem[_2385 + 96] = wantAddress
        mem[_2385 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[_2385 + 132] = _2333
        mem[_2385 + 164] = 0
        mem[_2385 + 196] = 160
        mem[_2385 + 292] = mem[_2385]
        idx = 0
        s = _2385 + 32
        t = _2385 + 324
        while idx < mem[_2385]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_2385 + 228] = this.address
        mem[_2385 + 260] = block.timestamp
        require ext_code.size(stor29)
        call stor29.mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2385 + (32 * mem[_2385]) + -mem[64] + 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3438 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3474 = mem[_3438]
        require mem[_3438] <= test266151307()
        require _3438 + return_data.size > _3438 + mem[_3438] + 31
        _3510 = mem[_3438 + mem[_3438]]
        require mem[_3438 + mem[_3438]] <= test266151307()
        require (32 * mem[_3438 + mem[_3438]]) + 32 >= 0 and _3438 + ceil32(return_data.size) + (32 * mem[_3438 + mem[_3438]]) + 32 <= test266151307()
        mem[64] = _3438 + ceil32(return_data.size) + (32 * mem[_3438 + mem[_3438]]) + 32
        mem[_3438 + ceil32(return_data.size)] = _3510
        require return_data.size >= _3474 + (32 * _3510) + 32
        mem[_3438 + ceil32(return_data.size) + 32 len 32 * _3510] = mem[_3438 + _3474 + 32 len 32 * _3510]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4158 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_4158]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_4158] - ext_call.return_data[0])
    mem[(2 * ceil32(return_data.size)) + 96] = 3
    mem[(2 * ceil32(return_data.size)) + 128 len 96] = call.data[calldata.size len 96]
    mem[(2 * ceil32(return_data.size)) + 128] = stor24
    if stor35 == wantAddress:
        mem[(2 * ceil32(return_data.size)) + 160] = wantAddress
        mem[(2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 228] = ext_call.return_data[0]
        mem[(2 * ceil32(return_data.size)) + 260] = 0
        mem[(2 * ceil32(return_data.size)) + 292] = 160
        mem[(2 * ceil32(return_data.size)) + 388] = 3
        idx = 0
        s = (2 * ceil32(return_data.size)) + 128
        t = (2 * ceil32(return_data.size)) + 420
        while idx < 3:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(2 * ceil32(return_data.size)) + 324] = this.address
        mem[(2 * ceil32(return_data.size)) + 356] = block.timestamp
        require ext_code.size(stor29)
        call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 3, mem[(2 * ceil32(return_data.size)) + 420 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 224
        require return_data.size >= 32
        _1225 = mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28]
        require mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] <= test266151307()
        require (2 * ceil32(return_data.size)) + return_data.size + 224 > (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 255
        _1237 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
        require mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224] <= test266151307()
        require (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 32 >= 0 and (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256 <= test266151307()
        mem[64] = (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256
        mem[(4 * ceil32(return_data.size)) + 224] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
        require return_data.size >= _1225 + (32 * _1237) + 32
        mem[(4 * ceil32(return_data.size)) + 256 len 32 * _1237] = mem[(2 * ceil32(return_data.size)) + _1225 + 256 len 32 * _1237]
        mem[mem[64] + 4] = this.address
        require ext_code.size(stor25)
        staticcall stor25.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2323 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2335 = mem[_2323]
        if not mem[_2323]:
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2401 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] <= mem[_2401]:
                return (mem[_2401] - ext_call.return_data[0])
            var95001 = 32
            revert with 0, 'SafeMath: subtraction overflow', 0
        if stor35 == stor25:
            _2376 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            require 0 < mem[_2376]
            mem[_2376 + 32] = stor25
            require 1 < mem[_2376]
            if stor35 == stor25:
                mem[_2376 + 64] = wantAddress
                mem[_2376 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                mem[_2376 + 100] = _2335
                mem[_2376 + 132] = 0
                mem[_2376 + 164] = 160
                mem[_2376 + 260] = mem[_2376]
                idx = 0
                s = _2376 + 32
                t = _2376 + 292
                while idx < mem[_2376]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_2376 + 196] = this.address
                mem[_2376 + 228] = block.timestamp
                require ext_code.size(stor29)
                call stor29.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _2376 + (32 * mem[_2376]) + -mem[64] + 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3447 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3483 = mem[_3447]
                require mem[_3447] <= test266151307()
                require _3447 + return_data.size > _3447 + mem[_3447] + 31
                _3519 = mem[_3447 + mem[_3447]]
                require mem[_3447 + mem[_3447]] <= test266151307()
                require (32 * mem[_3447 + mem[_3447]]) + 32 >= 0 and _3447 + ceil32(return_data.size) + (32 * mem[_3447 + mem[_3447]]) + 32 <= test266151307()
                mem[64] = _3447 + ceil32(return_data.size) + (32 * mem[_3447 + mem[_3447]]) + 32
                mem[_3447 + ceil32(return_data.size)] = _3519
                require return_data.size >= _3483 + (32 * _3519) + 32
                mem[_3447 + ceil32(return_data.size) + 32 len 32 * _3519] = mem[_3447 + _3483 + 32 len 32 * _3519]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4167 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if ext_call.return_data[0] > mem[_4167]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (mem[_4167] - ext_call.return_data[0])
            mem[_2376 + 64] = stor35
            require 2 < mem[_2376]
            mem[_2376 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2376 + 100] = _2335
            mem[_2376 + 132] = 0
            mem[_2376 + 164] = 160
            mem[_2376 + 260] = mem[_2376]
            idx = 0
            s = _2376 + 32
            t = _2376 + 292
            while idx < mem[_2376]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2376 + 196] = this.address
            mem[_2376 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2376 + (32 * mem[_2376]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3446 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3482 = mem[_3446]
            require mem[_3446] <= test266151307()
            require _3446 + return_data.size > _3446 + mem[_3446] + 31
            _3518 = mem[_3446 + mem[_3446]]
            require mem[_3446 + mem[_3446]] <= test266151307()
            require (32 * mem[_3446 + mem[_3446]]) + 32 >= 0 and _3446 + ceil32(return_data.size) + (32 * mem[_3446 + mem[_3446]]) + 32 <= test266151307()
            mem[64] = _3446 + ceil32(return_data.size) + (32 * mem[_3446 + mem[_3446]]) + 32
            mem[_3446 + ceil32(return_data.size)] = _3518
            require return_data.size >= _3482 + (32 * _3518) + 32
            mem[_3446 + ceil32(return_data.size) + 32 len 32 * _3518] = mem[_3446 + _3482 + 32 len 32 * _3518]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4166 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4166]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4166] - ext_call.return_data[0])
        if stor35 == wantAddress:
            _2388 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            require 0 < mem[_2388]
            mem[_2388 + 32] = stor25
            require 1 < mem[_2388]
            if stor35 == wantAddress:
                mem[_2388 + 64] = wantAddress
                mem[_2388 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                mem[_2388 + 100] = _2335
                mem[_2388 + 132] = 0
                mem[_2388 + 164] = 160
                mem[_2388 + 260] = mem[_2388]
                idx = 0
                s = _2388 + 32
                t = _2388 + 292
                while idx < mem[_2388]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_2388 + 196] = this.address
                mem[_2388 + 228] = block.timestamp
                require ext_code.size(stor29)
                call stor29.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _2388 + (32 * mem[_2388]) + -mem[64] + 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3449 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3485 = mem[_3449]
                require mem[_3449] <= test266151307()
                require _3449 + return_data.size > _3449 + mem[_3449] + 31
                _3521 = mem[_3449 + mem[_3449]]
                require mem[_3449 + mem[_3449]] <= test266151307()
                require (32 * mem[_3449 + mem[_3449]]) + 32 >= 0 and _3449 + ceil32(return_data.size) + (32 * mem[_3449 + mem[_3449]]) + 32 <= test266151307()
                mem[64] = _3449 + ceil32(return_data.size) + (32 * mem[_3449 + mem[_3449]]) + 32
                mem[_3449 + ceil32(return_data.size)] = _3521
                require return_data.size >= _3485 + (32 * _3521) + 32
                mem[_3449 + ceil32(return_data.size) + 32 len 32 * _3521] = mem[_3449 + _3485 + 32 len 32 * _3521]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4169 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if ext_call.return_data[0] > mem[_4169]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (mem[_4169] - ext_call.return_data[0])
            mem[_2388 + 64] = stor35
            require 2 < mem[_2388]
            mem[_2388 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2388 + 100] = _2335
            mem[_2388 + 132] = 0
            mem[_2388 + 164] = 160
            mem[_2388 + 260] = mem[_2388]
            idx = 0
            s = _2388 + 32
            t = _2388 + 292
            while idx < mem[_2388]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2388 + 196] = this.address
            mem[_2388 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2388 + (32 * mem[_2388]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3448 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3484 = mem[_3448]
            require mem[_3448] <= test266151307()
            require _3448 + return_data.size > _3448 + mem[_3448] + 31
            _3520 = mem[_3448 + mem[_3448]]
            require mem[_3448 + mem[_3448]] <= test266151307()
            require (32 * mem[_3448 + mem[_3448]]) + 32 >= 0 and _3448 + ceil32(return_data.size) + (32 * mem[_3448 + mem[_3448]]) + 32 <= test266151307()
            mem[64] = _3448 + ceil32(return_data.size) + (32 * mem[_3448 + mem[_3448]]) + 32
            mem[_3448 + ceil32(return_data.size)] = _3520
            require return_data.size >= _3484 + (32 * _3520) + 32
            mem[_3448 + ceil32(return_data.size) + 32 len 32 * _3520] = mem[_3448 + _3484 + 32 len 32 * _3520]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4168 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4168]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4168] - ext_call.return_data[0])
        _2389 = mem[64]
        mem[mem[64]] = 3
        mem[64] = mem[64] + 128
        mem[_2389 + 32 len 96] = call.data[calldata.size len 96]
        require 0 < mem[_2389]
        mem[_2389 + 32] = stor25
        require 1 < mem[_2389]
        if stor35 == wantAddress:
            mem[_2389 + 64] = wantAddress
            mem[_2389 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2389 + 132] = _2335
            mem[_2389 + 164] = 0
            mem[_2389 + 196] = 160
            mem[_2389 + 292] = mem[_2389]
            idx = 0
            s = _2389 + 32
            t = _2389 + 324
            while idx < mem[_2389]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2389 + 228] = this.address
            mem[_2389 + 260] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2389 + (32 * mem[_2389]) + -mem[64] + 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3451 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3487 = mem[_3451]
            require mem[_3451] <= test266151307()
            require _3451 + return_data.size > _3451 + mem[_3451] + 31
            _3523 = mem[_3451 + mem[_3451]]
            require mem[_3451 + mem[_3451]] <= test266151307()
            require (32 * mem[_3451 + mem[_3451]]) + 32 >= 0 and _3451 + ceil32(return_data.size) + (32 * mem[_3451 + mem[_3451]]) + 32 <= test266151307()
            mem[64] = _3451 + ceil32(return_data.size) + (32 * mem[_3451 + mem[_3451]]) + 32
            mem[_3451 + ceil32(return_data.size)] = _3523
            require return_data.size >= _3487 + (32 * _3523) + 32
            mem[_3451 + ceil32(return_data.size) + 32 len 32 * _3523] = mem[_3451 + _3487 + 32 len 32 * _3523]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4171 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4171]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4171] - ext_call.return_data[0])
        mem[_2389 + 64] = stor35
        require 2 < mem[_2389]
        mem[_2389 + 96] = wantAddress
        mem[_2389 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[_2389 + 132] = _2335
        mem[_2389 + 164] = 0
        mem[_2389 + 196] = 160
        mem[_2389 + 292] = mem[_2389]
        idx = 0
        s = _2389 + 32
        t = _2389 + 324
        while idx < mem[_2389]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_2389 + 228] = this.address
        mem[_2389 + 260] = block.timestamp
        require ext_code.size(stor29)
        call stor29.mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2389 + (32 * mem[_2389]) + -mem[64] + 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3450 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3486 = mem[_3450]
        require mem[_3450] <= test266151307()
        require _3450 + return_data.size > _3450 + mem[_3450] + 31
        _3522 = mem[_3450 + mem[_3450]]
        require mem[_3450 + mem[_3450]] <= test266151307()
        require (32 * mem[_3450 + mem[_3450]]) + 32 >= 0 and _3450 + ceil32(return_data.size) + (32 * mem[_3450 + mem[_3450]]) + 32 <= test266151307()
        mem[64] = _3450 + ceil32(return_data.size) + (32 * mem[_3450 + mem[_3450]]) + 32
        mem[_3450 + ceil32(return_data.size)] = _3522
        require return_data.size >= _3486 + (32 * _3522) + 32
        mem[_3450 + ceil32(return_data.size) + 32 len 32 * _3522] = mem[_3450 + _3486 + 32 len 32 * _3522]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4170 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_4170]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_4170] - ext_call.return_data[0])
    mem[(2 * ceil32(return_data.size)) + 160] = stor35
    mem[(2 * ceil32(return_data.size)) + 192] = wantAddress
    mem[(2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[(2 * ceil32(return_data.size)) + 228] = ext_call.return_data[0]
    mem[(2 * ceil32(return_data.size)) + 260] = 0
    mem[(2 * ceil32(return_data.size)) + 292] = 160
    mem[(2 * ceil32(return_data.size)) + 388] = 3
    idx = 0
    s = (2 * ceil32(return_data.size)) + 128
    t = (2 * ceil32(return_data.size)) + 420
    while idx < 3:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[(2 * ceil32(return_data.size)) + 324] = this.address
    mem[(2 * ceil32(return_data.size)) + 356] = block.timestamp
    require ext_code.size(stor29)
    call stor29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 3, mem[(2 * ceil32(return_data.size)) + 420 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (4 * ceil32(return_data.size)) + 224
    require return_data.size >= 32
    _1224 = mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28]
    require mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] <= test266151307()
    require (2 * ceil32(return_data.size)) + return_data.size + 224 > (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 255
    _1236 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
    require mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224] <= test266151307()
    require (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 32 >= 0 and (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256 <= test266151307()
    mem[64] = (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]) + 256
    mem[(4 * ceil32(return_data.size)) + 224] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 224 len 4], ext_call.return_data[0 len 28] + 224]
    require return_data.size >= _1224 + (32 * _1236) + 32
    mem[(4 * ceil32(return_data.size)) + 256 len 32 * _1236] = mem[(2 * ceil32(return_data.size)) + _1224 + 256 len 32 * _1236]
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor25)
    staticcall stor25.0x70a08231 with:
            gas gas_remaining wei
           args address(this.address)
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _2322 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _2334 = mem[_2322]
    if not mem[_2322]:
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2399 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] <= mem[_2399]:
            return (mem[_2399] - ext_call.return_data[0])
        var96001 = 32
        revert with 0, 'SafeMath: subtraction overflow', 0
    if stor35 == stor25:
        _2374 = mem[64]
        mem[mem[64]] = 2
        mem[64] = mem[64] + 96
        require 0 < mem[_2374]
        mem[_2374 + 32] = stor25
        require 1 < mem[_2374]
        if stor35 == stor25:
            mem[_2374 + 64] = wantAddress
            mem[_2374 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2374 + 100] = _2334
            mem[_2374 + 132] = 0
            mem[_2374 + 164] = 160
            mem[_2374 + 260] = mem[_2374]
            idx = 0
            s = _2374 + 32
            t = _2374 + 292
            while idx < mem[_2374]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2374 + 196] = this.address
            mem[_2374 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2374 + (32 * mem[_2374]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3441 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3477 = mem[_3441]
            require mem[_3441] <= test266151307()
            require _3441 + return_data.size > _3441 + mem[_3441] + 31
            _3513 = mem[_3441 + mem[_3441]]
            require mem[_3441 + mem[_3441]] <= test266151307()
            require (32 * mem[_3441 + mem[_3441]]) + 32 >= 0 and _3441 + ceil32(return_data.size) + (32 * mem[_3441 + mem[_3441]]) + 32 <= test266151307()
            mem[64] = _3441 + ceil32(return_data.size) + (32 * mem[_3441 + mem[_3441]]) + 32
            mem[_3441 + ceil32(return_data.size)] = _3513
            require return_data.size >= _3477 + (32 * _3513) + 32
            mem[_3441 + ceil32(return_data.size) + 32 len 32 * _3513] = mem[_3441 + _3477 + 32 len 32 * _3513]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4161 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4161]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4161] - ext_call.return_data[0])
        mem[_2374 + 64] = stor35
        require 2 < mem[_2374]
        mem[_2374 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[_2374 + 100] = _2334
        mem[_2374 + 132] = 0
        mem[_2374 + 164] = 160
        mem[_2374 + 260] = mem[_2374]
        idx = 0
        s = _2374 + 32
        t = _2374 + 292
        while idx < mem[_2374]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_2374 + 196] = this.address
        mem[_2374 + 228] = block.timestamp
        require ext_code.size(stor29)
        call stor29.mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2374 + (32 * mem[_2374]) + -mem[64] + 288]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3440 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3476 = mem[_3440]
        require mem[_3440] <= test266151307()
        require _3440 + return_data.size > _3440 + mem[_3440] + 31
        _3512 = mem[_3440 + mem[_3440]]
        require mem[_3440 + mem[_3440]] <= test266151307()
        require (32 * mem[_3440 + mem[_3440]]) + 32 >= 0 and _3440 + ceil32(return_data.size) + (32 * mem[_3440 + mem[_3440]]) + 32 <= test266151307()
        mem[64] = _3440 + ceil32(return_data.size) + (32 * mem[_3440 + mem[_3440]]) + 32
        mem[_3440 + ceil32(return_data.size)] = _3512
        require return_data.size >= _3476 + (32 * _3512) + 32
        mem[_3440 + ceil32(return_data.size) + 32 len 32 * _3512] = mem[_3440 + _3476 + 32 len 32 * _3512]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4160 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_4160]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_4160] - ext_call.return_data[0])
    if stor35 == wantAddress:
        _2386 = mem[64]
        mem[mem[64]] = 2
        mem[64] = mem[64] + 96
        require 0 < mem[_2386]
        mem[_2386 + 32] = stor25
        require 1 < mem[_2386]
        if stor35 == wantAddress:
            mem[_2386 + 64] = wantAddress
            mem[_2386 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[_2386 + 100] = _2334
            mem[_2386 + 132] = 0
            mem[_2386 + 164] = 160
            mem[_2386 + 260] = mem[_2386]
            idx = 0
            s = _2386 + 32
            t = _2386 + 292
            while idx < mem[_2386]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_2386 + 196] = this.address
            mem[_2386 + 228] = block.timestamp
            require ext_code.size(stor29)
            call stor29.mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _2386 + (32 * mem[_2386]) + -mem[64] + 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3443 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3479 = mem[_3443]
            require mem[_3443] <= test266151307()
            require _3443 + return_data.size > _3443 + mem[_3443] + 31
            _3515 = mem[_3443 + mem[_3443]]
            require mem[_3443 + mem[_3443]] <= test266151307()
            require (32 * mem[_3443 + mem[_3443]]) + 32 >= 0 and _3443 + ceil32(return_data.size) + (32 * mem[_3443 + mem[_3443]]) + 32 <= test266151307()
            mem[64] = _3443 + ceil32(return_data.size) + (32 * mem[_3443 + mem[_3443]]) + 32
            mem[_3443 + ceil32(return_data.size)] = _3515
            require return_data.size >= _3479 + (32 * _3515) + 32
            mem[_3443 + ceil32(return_data.size) + 32 len 32 * _3515] = mem[_3443 + _3479 + 32 len 32 * _3515]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4163 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if ext_call.return_data[0] > mem[_4163]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (mem[_4163] - ext_call.return_data[0])
        mem[_2386 + 64] = stor35
        require 2 < mem[_2386]
        mem[_2386 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[_2386 + 100] = _2334
        mem[_2386 + 132] = 0
        mem[_2386 + 164] = 160
        mem[_2386 + 260] = mem[_2386]
        idx = 0
        s = _2386 + 32
        t = _2386 + 292
        while idx < mem[_2386]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_2386 + 196] = this.address
        mem[_2386 + 228] = block.timestamp
        require ext_code.size(stor29)
        call stor29.mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2386 + (32 * mem[_2386]) + -mem[64] + 288]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3442 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3478 = mem[_3442]
        require mem[_3442] <= test266151307()
        require _3442 + return_data.size > _3442 + mem[_3442] + 31
        _3514 = mem[_3442 + mem[_3442]]
        require mem[_3442 + mem[_3442]] <= test266151307()
        require (32 * mem[_3442 + mem[_3442]]) + 32 >= 0 and _3442 + ceil32(return_data.size) + (32 * mem[_3442 + mem[_3442]]) + 32 <= test266151307()
        mem[64] = _3442 + ceil32(return_data.size) + (32 * mem[_3442 + mem[_3442]]) + 32
        mem[_3442 + ceil32(return_data.size)] = _3514
        require return_data.size >= _3478 + (32 * _3514) + 32
        mem[_3442 + ceil32(return_data.size) + 32 len 32 * _3514] = mem[_3442 + _3478 + 32 len 32 * _3514]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4162 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_4162]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_4162] - ext_call.return_data[0])
    _2387 = mem[64]
    mem[mem[64]] = 3
    mem[64] = mem[64] + 128
    mem[_2387 + 32 len 96] = call.data[calldata.size len 96]
    require 0 < mem[_2387]
    mem[_2387 + 32] = stor25
    require 1 < mem[_2387]
    if stor35 == wantAddress:
        mem[_2387 + 64] = wantAddress
        mem[_2387 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[_2387 + 132] = _2334
        mem[_2387 + 164] = 0
        mem[_2387 + 196] = 160
        mem[_2387 + 292] = mem[_2387]
        idx = 0
        s = _2387 + 32
        t = _2387 + 324
        while idx < mem[_2387]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_2387 + 228] = this.address
        mem[_2387 + 260] = block.timestamp
        require ext_code.size(stor29)
        call stor29.mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2387 + (32 * mem[_2387]) + -mem[64] + 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3445 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3481 = mem[_3445]
        require mem[_3445] <= test266151307()
        require _3445 + return_data.size > _3445 + mem[_3445] + 31
        _3517 = mem[_3445 + mem[_3445]]
        require mem[_3445 + mem[_3445]] <= test266151307()
        require (32 * mem[_3445 + mem[_3445]]) + 32 >= 0 and _3445 + ceil32(return_data.size) + (32 * mem[_3445 + mem[_3445]]) + 32 <= test266151307()
        mem[64] = _3445 + ceil32(return_data.size) + (32 * mem[_3445 + mem[_3445]]) + 32
        mem[_3445 + ceil32(return_data.size)] = _3517
        require return_data.size >= _3481 + (32 * _3517) + 32
        mem[_3445 + ceil32(return_data.size) + 32 len 32 * _3517] = mem[_3445 + _3481 + 32 len 32 * _3517]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4165 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if ext_call.return_data[0] > mem[_4165]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (mem[_4165] - ext_call.return_data[0])
    mem[_2387 + 64] = stor35
    require 2 < mem[_2387]
    mem[_2387 + 96] = wantAddress
    mem[_2387 + 128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[_2387 + 132] = _2334
    mem[_2387 + 164] = 0
    mem[_2387 + 196] = 160
    mem[_2387 + 292] = mem[_2387]
    idx = 0
    s = _2387 + 32
    t = _2387 + 324
    while idx < mem[_2387]:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[_2387 + 228] = this.address
    mem[_2387 + 260] = block.timestamp
    require ext_code.size(stor29)
    call stor29.mem[mem[64] len 4] with:
         gas gas_remaining wei
        args mem[mem[64] + 4 len _2387 + (32 * mem[_2387]) + -mem[64] + 320]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3444 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _3480 = mem[_3444]
    require mem[_3444] <= test266151307()
    require _3444 + return_data.size > _3444 + mem[_3444] + 31
    _3516 = mem[_3444 + mem[_3444]]
    require mem[_3444 + mem[_3444]] <= test266151307()
    require (32 * mem[_3444 + mem[_3444]]) + 32 >= 0 and _3444 + ceil32(return_data.size) + (32 * mem[_3444 + mem[_3444]]) + 32 <= test266151307()
    mem[64] = _3444 + ceil32(return_data.size) + (32 * mem[_3444 + mem[_3444]]) + 32
    mem[_3444 + ceil32(return_data.size)] = _3516
    require return_data.size >= _3480 + (32 * _3516) + 32
    mem[_3444 + ceil32(return_data.size) + 32 len 32 * _3516] = mem[_3444 + _3480 + 32 len 32 * _3516]
    mem[mem[64] + 4] = this.address
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args address(this.address)
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _4164 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    if ext_call.return_data[0] > mem[_4164]:
        revert with 0, 'SafeMath: subtraction overflow', 0
    return (mem[_4164] - ext_call.return_data[0])
}

function sub_bde0c9ee(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 < ext_call.return_data[0]:
        if arg1 > ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        if ext_call.return_data[0] - arg1:
            if ext_call.return_data[0] - arg1 >= 10000:
                if not sub_1a55f6eb:
                    require ext_code.size(stor26)
                    call stor26.0xa0712d68 with:
                         gas gas_remaining wei
                        args 0
                else:
                    if (ext_call.return_data[0] * sub_1a55f6eb) - (arg1 * sub_1a55f6eb) / sub_1a55f6eb != ext_call.return_data[0] - arg1:
                        revert with 0, 'SafeMath: multiplication overflow'
                    require ext_code.size(stor26)
                    call stor26.0xa0712d68 with:
                         gas gas_remaining wei
                        args ((ext_call.return_data[0] * sub_1a55f6eb) - (arg1 * sub_1a55f6eb) / 10000)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not sub_1fa98a80:
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (0 / Mask(112, 0, ext_call.return_data[32]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (0 / Mask(112, 0, ext_call.return_data[0]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                else:
                    if (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / sub_1fa98a80 != ext_call.return_data[0] - arg1:
                        revert with 0, 'SafeMath: multiplication overflow'
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if not (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000:
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor27)
                            call stor27.borrow(uint256 arg1) with:
                                 gas gas_remaining wei
                                args (0 / Mask(112, 0, ext_call.return_data[32]))
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.getReserves() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.token0() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if ext_call.return_data[12 len 20] != wantAddress:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor27)
                            call stor27.borrow(uint256 arg1) with:
                                 gas gas_remaining wei
                                args (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]))
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.getReserves() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.token0() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if ext_call.return_data[12 len 20] != wantAddress:
                                if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if not (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000:
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor27)
                            call stor27.borrow(uint256 arg1) with:
                                 gas gas_remaining wei
                                args (0 / Mask(112, 0, ext_call.return_data[0]))
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.getReserves() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.token0() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if ext_call.return_data[12 len 20] != wantAddress:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor27)
                            call stor27.borrow(uint256 arg1) with:
                                 gas gas_remaining wei
                                args (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]))
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.getReserves() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                            require ext_code.size(sub_6ea16e14Address)
                            staticcall sub_6ea16e14Address.token0() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if ext_call.return_data[12 len 20] != wantAddress:
                                if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero', 0
                                    require ext_code.size(wantAddress)
                                    staticcall wantAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if not Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                            else:
                                                if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(stor29)
                                                call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                     gas gas_remaining wei
                                                    args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] * sub_1fa98a80) - (arg1 * sub_1fa98a80) / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                call stor28.0xe2bbb158 with:
                     gas gas_remaining wei
                    args stor34, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
}

function sub_edf9d152(?) payable {
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(shortAddress)
            staticcall shortAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != wantAddress:
                if not ext_call.return_data[0]:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor28)
                    staticcall stor28.0x93f1a40b with:
                            gas gas_remaining wei
                           args stor34, this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not 2 * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return (0 / ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor26)
                            staticcall stor26.exchangeRateStored() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor26)
                            staticcall stor26.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                return (0 / ext_call.return_data[0])
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return (0 / ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])))
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(shortAddress)
        staticcall shortAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return (0 / ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return (0 / ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return (0 / ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])))
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(shortAddress)
        staticcall shortAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return (0 / ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return (0 / ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return (0 / ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])))
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])))
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (0 / ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
    if ext_call.return_data[12 len 20] != wantAddress:
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                return (0 / ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            return (0 / ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(stor26)
    staticcall stor26.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    staticcall stor26.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
            revert with 0, 'SafeMath: subtraction overflow', 0
        return (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
        revert with 0, 'SafeMath: subtraction overflow', 0
    return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
}

function sub_3128801e(?) payable {
    require calldata.size - 4 >= 32
    if msg.sender == strategistAddress:
        if arg1 >= 10000:
            if not sub_1a55f6eb:
                require ext_code.size(stor26)
                call stor26.0xa0712d68 with:
                     gas gas_remaining wei
                    args 0
            else:
                if arg1 * sub_1a55f6eb / sub_1a55f6eb != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                require ext_code.size(stor26)
                call stor26.0xa0712d68 with:
                     gas gas_remaining wei
                    args (arg1 * sub_1a55f6eb / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not sub_1fa98a80:
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != wantAddress:
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor27)
                    call stor27.borrow(uint256 arg1) with:
                         gas gas_remaining wei
                        args (0 / Mask(112, 0, ext_call.return_data[32]))
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                else:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor27)
                    call stor27.borrow(uint256 arg1) with:
                         gas gas_remaining wei
                        args (0 / Mask(112, 0, ext_call.return_data[0]))
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
            else:
                if arg1 * sub_1fa98a80 / sub_1fa98a80 != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != wantAddress:
                    if not arg1 * sub_1fa98a80 / 10000:
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (0 / Mask(112, 0, ext_call.return_data[32]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / arg1 * sub_1fa98a80 / 10000 != Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                else:
                    if not arg1 * sub_1fa98a80 / 10000:
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (0 / Mask(112, 0, ext_call.return_data[0]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / arg1 * sub_1fa98a80 / 10000 != Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            call stor28.0xe2bbb158 with:
                 gas gas_remaining wei
                args stor34, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
    else:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
        if arg1 >= 10000:
            if not sub_1a55f6eb:
                require ext_code.size(stor26)
                call stor26.0xa0712d68 with:
                     gas gas_remaining wei
                    args 0
            else:
                if arg1 * sub_1a55f6eb / sub_1a55f6eb != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                require ext_code.size(stor26)
                call stor26.0xa0712d68 with:
                     gas gas_remaining wei
                    args (arg1 * sub_1a55f6eb / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not sub_1fa98a80:
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != wantAddress:
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor27)
                    call stor27.borrow(uint256 arg1) with:
                         gas gas_remaining wei
                        args (0 / Mask(112, 0, ext_call.return_data[32]))
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                else:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor27)
                    call stor27.borrow(uint256 arg1) with:
                         gas gas_remaining wei
                        args (0 / Mask(112, 0, ext_call.return_data[0]))
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                            else:
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                else:
                                    if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(stor29)
                                        call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                             gas gas_remaining wei
                                            args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
            else:
                if arg1 * sub_1fa98a80 / sub_1fa98a80 != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != wantAddress:
                    if not arg1 * sub_1fa98a80 / 10000:
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (0 / Mask(112, 0, ext_call.return_data[32]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / arg1 * sub_1fa98a80 / 10000 != Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[32]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                else:
                    if not arg1 * sub_1fa98a80 / 10000:
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (0 / Mask(112, 0, ext_call.return_data[0]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, 0 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                    else:
                        if Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / arg1 * sub_1fa98a80 / 10000 != Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor27)
                        call stor27.borrow(uint256 arg1) with:
                             gas gas_remaining wei
                            args (Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]))
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_6ea16e14Address)
                        staticcall sub_6ea16e14Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != wantAddress:
                            if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                        else:
                            if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), 0 / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                            else:
                                if Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: division by zero', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), 0, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]), sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10000, address(this.address), block.timestamp
                                else:
                                    if not Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
                                    else:
                                        if sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) != sub_39bb9c24:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, 0, address(this.address), block.timestamp
                                        else:
                                            if sub_39bb9c24 * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(stor29)
                                            call stor29.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                                 gas gas_remaining wei
                                                args shortAddress, wantAddress, Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]), ext_call.return_data[0], sub_39bb9c24 * Mask(112, 0, ext_call.return_data[32]) * arg1 * sub_1fa98a80 / 10000 / Mask(112, 0, ext_call.return_data[0]) / 10000, sub_39bb9c24 * ext_call.return_data[0] / 10000, address(this.address), block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            call stor28.0xe2bbb158 with:
                 gas gas_remaining wei
                args stor34, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
}

function estimatedTotalAssets() payable {
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(shortAddress)
            staticcall shortAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != wantAddress:
                if not ext_call.return_data[0]:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor28)
                    staticcall stor28.0x93f1a40b with:
                            gas gas_remaining wei
                           args stor34, this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not 2 * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor26)
                            staticcall stor26.exchangeRateStored() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor26)
                            staticcall stor26.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(shortAddress)
        staticcall shortAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0])
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(shortAddress)
        staticcall shortAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0])
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
    if ext_call.return_data[12 len 20] != wantAddress:
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(stor26)
    staticcall stor26.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    staticcall stor26.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
        revert with 0, 'SafeMath: subtraction overflow', 0
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    return ((2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0])
}

function harvestTrigger(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.strategies(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 288
    require bool(ceil32(return_data.size) + 672 <= test266151307())
    if 0 == ext_call.return_data[32]:
        return 0
    if ext_call.return_data[160] > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp - ext_call.return_data[160] < minReportDelay:
        return 0
    if ext_call.return_data[160] > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp - ext_call.return_data[160] >= maxReportDelay:
        return 1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.debtOutstanding() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > debtThreshold:
        return 1
    require ext_code.size(stor27)
    staticcall stor27.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(shortAddress)
            staticcall shortAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != wantAddress:
                if not ext_call.return_data[0]:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_6ea16e14Address)
                    staticcall sub_6ea16e14Address.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor28)
                    staticcall stor28.0x93f1a40b with:
                            gas gas_remaining wei
                           args stor34, this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not 2 * ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[12 len 20] != wantAddress:
                        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero', 0
                            require ext_code.size(stor26)
                            staticcall stor26.exchangeRateStored() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor26)
                            staticcall stor26.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                require ext_code.size(wantAddress)
                                staticcall wantAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if debtThreshold < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                                    return 1
                                if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                    require ext_code.size(vaultAddress)
                                    staticcall vaultAddress.creditAvailable() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if profitFactor:
                                        if 0 / profitFactor:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                    return (0 < ext_call.return_data[0])
                                if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(shortAddress)
        staticcall shortAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(shortAddress)
        staticcall shortAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != wantAddress:
            if not ext_call.return_data[0]:
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_6ea16e14Address)
                staticcall sub_6ea16e14Address.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor28)
                staticcall stor28.0x93f1a40b with:
                        gas gas_remaining wei
                       args stor34, this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if not 2 * ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[12 len 20] != wantAddress:
                    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor26)
                        staticcall stor26.exchangeRateStored() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor26)
                        staticcall stor26.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(wantAddress)
                            staticcall wantAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                                return 1
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                                require ext_code.size(vaultAddress)
                                staticcall vaultAddress.creditAvailable() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if profitFactor:
                                    if 0 / profitFactor:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                return (0 < ext_call.return_data[0])
                            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 0 / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(shortAddress)
    staticcall shortAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != wantAddress:
        if not ext_call.return_data[0]:
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_6ea16e14Address)
            staticcall sub_6ea16e14Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor28)
            staticcall stor28.0x93f1a40b with:
                    gas gas_remaining wei
                   args stor34, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not 2 * ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[12 len 20] != wantAddress:
                if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'SafeMath: multiplication overflow'
                if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor26)
                    staticcall stor26.exchangeRateStored() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor26)
                    staticcall stor26.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                            return 1
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                            require ext_code.size(vaultAddress)
                            staticcall vaultAddress.creditAvailable() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            if profitFactor:
                                if 0 / profitFactor:
                                    revert with 0, 'SafeMath: multiplication overflow'
                            return (0 < ext_call.return_data[0])
                        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow', 0
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if not ext_call.return_data[0]:
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_6ea16e14Address)
        staticcall sub_6ea16e14Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor28)
        staticcall stor28.0x93f1a40b with:
                gas gas_remaining wei
               args stor34, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[12 len 20] != wantAddress:
            if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: multiplication overflow'
            if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor26)
                staticcall stor26.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor26)
                staticcall stor26.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                        return 1
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                        require ext_code.size(vaultAddress)
                        staticcall vaultAddress.creditAvailable() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        if profitFactor:
                            if 0 / profitFactor:
                                revert with 0, 'SafeMath: multiplication overflow'
                        return (0 < ext_call.return_data[0])
                    if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (0 / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_6ea16e14Address)
    staticcall sub_6ea16e14Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor28)
    staticcall stor28.0x93f1a40b with:
            gas gas_remaining wei
           args stor34, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if ext_call.return_data[12 len 20] != wantAddress:
        if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'SafeMath: multiplication overflow'
        if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])):
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor26)
            staticcall stor26.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor26)
            staticcall stor26.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                    return 1
                if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.creditAvailable() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    if profitFactor:
                        if 0 / profitFactor:
                            revert with 0, 'SafeMath: multiplication overflow'
                    return (0 < ext_call.return_data[0])
                if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) != 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'SafeMath: multiplication overflow'
    if not (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])):
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor26)
        staticcall stor26.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor26)
        staticcall stor26.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold < 0:
                revert with 0, 'SafeMath: addition overflow'
            if debtThreshold + (0 / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
                return 1
            if (0 / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.creditAvailable() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                if profitFactor:
                    if 0 / profitFactor:
                        revert with 0, 'SafeMath: multiplication overflow'
                return (0 < ext_call.return_data[0])
            if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < (0 / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) != 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(stor26)
    staticcall stor26.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor26)
    staticcall stor26.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) < 2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]):
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[192]:
            return 1
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0] <= ext_call.return_data[192]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if profitFactor:
                if 0 / profitFactor:
                    revert with 0, 'SafeMath: multiplication overflow'
            return (0 < ext_call.return_data[0])
        if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow', 0
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'SafeMath: multiplication overflow'
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) < 0:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) > (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32])) + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
        revert with 0, 'SafeMath: subtraction overflow', 0
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if debtThreshold < 0:
        revert with 0, 'SafeMath: addition overflow'
    if debtThreshold + (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] < ext_call.return_data[192]:
        return 1
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0] <= ext_call.return_data[192]:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.creditAvailable() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if profitFactor:
            if 0 / profitFactor:
                revert with 0, 'SafeMath: multiplication overflow'
        return (0 < ext_call.return_data[0])
    if ext_call.return_data[192] > (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow', 0
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.creditAvailable() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if profitFactor:
        if 0 / profitFactor:
            revert with 0, 'SafeMath: multiplication overflow'
    return (0 < (2 * (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0])) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0]) - ext_call.return_data[192])
}



}
