contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#
const totalSupply = 10^18


address owner;
mapping of uint256 stor1;
mapping of uint256 stor2;
mapping of uint256 allowance;
mapping of uint8 stor4;
array of address stor5;
uint256 stor6;
uint256 totalFees;
uint256 _maxTxAmount;
array of uint256 name;
array of uint256 symbol;
uint8 decimals;

function name() payable {
    return name[0 len name.length]
}

function totalFees() payable {
    return totalFees
}

function decimals() payable {
    return decimals
}

function _maxTxAmount() payable {
    return _maxTxAmount
}

function owner() payable {
    return owner
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function isExcluded(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(stor4[address(arg1)])
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return allowance[address(arg1)][address(arg2)]
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setMaxTxAmount(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    _maxTxAmount = arg1
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function includeAccount(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not stor4[address(arg1)]:
        revert with 0, 'Account is already excluded'
    idx = 0
    while idx < stor5.length:
        mem[0] = 5
        if stor5[idx] != arg1:
            idx = idx + 1
            continue 
        require stor5.length - 1 < stor5.length
        require idx < stor5.length
        stor5[idx] = stor5[stor5.length]
        stor2[address(arg1)] = 0
        stor4[address(arg1)] = 0
        require stor5.length
        stor5[stor5.length] = 0
        stor5.length--
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 > allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 
                    32,
                    37,
                    0x6e45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                    mem[165 len 27],
                    mem[219 len 5]
    if not msg.sender:
        revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
    if not arg1:
        revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
    allowance[address(msg.sender)][address(arg1)] -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if allowance[address(msg.sender)][address(arg1)] + arg2 < allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function tokenFromReflection(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if arg1 > stor6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                    mem[206 len 22]
    idx = 0
    s = 10^18
    t = stor6
    while idx < stor5.length:
        mem[0] = stor5[idx]
        mem[32] = 1
        if stor1[stor5[idx]] > t:
            _77 = mem[64]
            mem[64] = mem[64] + 64
            mem[_77] = 26
            mem[_77 + 32] = 'SafeMath: division by zero'
            _95 = mem[64]
            mem[64] = mem[64] + 64
            mem[_95] = 26
            mem[_95 + 32] = 'SafeMath: division by zero'
            if stor6 / 10^18 > 0:
                require stor6 / 10^18
                return (arg1 / stor6 / 10^18)
            _101 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_101 + idx + 68] = mem[_95 + idx + 32]
                idx = idx + 32
                continue 
            mem[_101 + 68] = mem[_101 + 74 len 26]
            revert with memory
              from mem[64]
               len _101 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        if stor2[stor5[idx]] > s:
            _81 = mem[64]
            mem[64] = mem[64] + 64
            mem[_81] = 26
            mem[_81 + 32] = 'SafeMath: division by zero'
            _107 = mem[64]
            mem[64] = mem[64] + 64
            mem[_107] = 26
            mem[_107 + 32] = 'SafeMath: division by zero'
            if stor6 / 10^18 > 0:
                require stor6 / 10^18
                return (arg1 / stor6 / 10^18)
            _113 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_113 + idx + 68] = mem[_107 + idx + 32]
                idx = idx + 32
                continue 
            mem[_113 + 68] = mem[_113 + 74 len 26]
            revert with memory
              from mem[64]
               len _113 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 1
        _80 = mem[64]
        mem[64] = mem[64] + 64
        mem[_80] = 30
        mem[_80 + 32] = 'SafeMath: subtraction overflow'
        if stor1[stor5[idx]] > t:
            _82 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_82 + idx + 68] = mem[_80 + idx + 32]
                idx = idx + 32
                continue 
            mem[_82 + 68] = mem[_82 + 70 len 30]
            revert with memory
              from mem[64]
               len _82 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        _96 = mem[64]
        mem[64] = mem[64] + 64
        mem[_96] = 30
        mem[_96 + 32] = 'SafeMath: subtraction overflow'
        if stor2[stor5[idx]] <= s:
            idx = idx + 1
            s = s - stor2[stor5[idx]]
            t = t - stor1[stor5[idx]]
            continue 
        _104 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 30
        idx = 0
        while idx < 30:
            mem[_104 + idx + 68] = mem[_96 + idx + 32]
            idx = idx + 32
            continue 
        mem[_104 + 68] = mem[_104 + 70 len 30]
        revert with memory
          from mem[64]
           len _104 + -mem[64] + 100
    if t < stor6 / 10^18:
        if stor6 / 10^18 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if stor6 / 10^18:
            return (arg1 / stor6 / 10^18)
    else:
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        if s:
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            if t / s:
                return (arg1 / t / s)
    revert
}

function balanceOf(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if stor4[address(arg1)]:
        return stor2[address(arg1)]
    mem[0] = arg1
    mem[32] = 1
    if stor1[address(arg1)] > stor6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                    mem[206 len 22]
    idx = 0
    s = 10^18
    t = stor6
    while idx < stor5.length:
        mem[0] = stor5[idx]
        mem[32] = 1
        if stor1[stor5[idx]] > t:
            _82 = mem[64]
            mem[64] = mem[64] + 64
            mem[_82] = 26
            mem[_82 + 32] = 'SafeMath: division by zero'
            _100 = mem[64]
            mem[64] = mem[64] + 64
            mem[_100] = 26
            mem[_100 + 32] = 'SafeMath: division by zero'
            if stor6 / 10^18 > 0:
                require stor6 / 10^18
                return (stor1[address(arg1)] / stor6 / 10^18)
            _106 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_106 + idx + 68] = mem[_100 + idx + 32]
                idx = idx + 32
                continue 
            mem[_106 + 68] = mem[_106 + 74 len 26]
            revert with memory
              from mem[64]
               len _106 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        if stor2[stor5[idx]] > s:
            _86 = mem[64]
            mem[64] = mem[64] + 64
            mem[_86] = 26
            mem[_86 + 32] = 'SafeMath: division by zero'
            _112 = mem[64]
            mem[64] = mem[64] + 64
            mem[_112] = 26
            mem[_112 + 32] = 'SafeMath: division by zero'
            if stor6 / 10^18 > 0:
                require stor6 / 10^18
                return (stor1[address(arg1)] / stor6 / 10^18)
            _118 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_118 + idx + 68] = mem[_112 + idx + 32]
                idx = idx + 32
                continue 
            mem[_118 + 68] = mem[_118 + 74 len 26]
            revert with memory
              from mem[64]
               len _118 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 1
        _85 = mem[64]
        mem[64] = mem[64] + 64
        mem[_85] = 30
        mem[_85 + 32] = 'SafeMath: subtraction overflow'
        if stor1[stor5[idx]] > t:
            _87 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_87 + idx + 68] = mem[_85 + idx + 32]
                idx = idx + 32
                continue 
            mem[_87 + 68] = mem[_87 + 70 len 30]
            revert with memory
              from mem[64]
               len _87 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        _101 = mem[64]
        mem[64] = mem[64] + 64
        mem[_101] = 30
        mem[_101 + 32] = 'SafeMath: subtraction overflow'
        if stor2[stor5[idx]] <= s:
            idx = idx + 1
            s = s - stor2[stor5[idx]]
            t = t - stor1[stor5[idx]]
            continue 
        _109 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 30
        idx = 0
        while idx < 30:
            mem[_109 + idx + 68] = mem[_101 + idx + 32]
            idx = idx + 32
            continue 
        mem[_109 + 68] = mem[_109 + 70 len 30]
        revert with memory
          from mem[64]
           len _109 + -mem[64] + 100
    if t < stor6 / 10^18:
        if stor6 / 10^18 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if stor6 / 10^18:
            return (stor1[address(arg1)] / stor6 / 10^18)
    else:
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        if s:
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            if t / s:
                return (stor1[address(arg1)] / t / s)
    revert
}

function excludeAccount(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor4[address(arg1)]:
        revert with 0, 'Account is already excluded'
    if stor1[address(arg1)] > 0:
        mem[0] = arg1
        mem[32] = 1
        if stor1[address(arg1)] > stor6:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        42,
                        0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                        mem[206 len 22]
        idx = 0
        s = 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _90 = mem[64]
                mem[64] = mem[64] + 64
                mem[_90] = 26
                mem[_90 + 32] = 'SafeMath: division by zero'
                _108 = mem[64]
                mem[64] = mem[64] + 64
                mem[_108] = 26
                mem[_108 + 32] = 'SafeMath: division by zero'
                if stor6 / 10^18 > 0:
                    require stor6 / 10^18
                    stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 10^18
                    stor4[address(arg1)] = 1
                    stor5.length++
                    stor5[stor5.length] = arg1
                _114 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_114 + idx + 68] = mem[_108 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_114 + 68] = mem[_114 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _114 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _94 = mem[64]
                mem[64] = mem[64] + 64
                mem[_94] = 26
                mem[_94 + 32] = 'SafeMath: division by zero'
                _120 = mem[64]
                mem[64] = mem[64] + 64
                mem[_120] = 26
                mem[_120 + 32] = 'SafeMath: division by zero'
                if stor6 / 10^18 > 0:
                    require stor6 / 10^18
                    stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 10^18
                    stor4[address(arg1)] = 1
                    stor5.length++
                    stor5[stor5.length] = arg1
                _126 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_126 + idx + 68] = mem[_120 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_126 + 68] = mem[_126 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _126 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _93 = mem[64]
            mem[64] = mem[64] + 64
            mem[_93] = 30
            mem[_93 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _95 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_95 + idx + 68] = mem[_93 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_95 + 68] = mem[_95 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _95 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _109 = mem[64]
            mem[64] = mem[64] + 64
            mem[_109] = 30
            mem[_109 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _117 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_117 + idx + 68] = mem[_109 + idx + 32]
                idx = idx + 32
                continue 
            mem[_117 + 68] = mem[_117 + 70 len 30]
            revert with memory
              from mem[64]
               len _117 + -mem[64] + 100
        if t < stor6 / 10^18:
            if stor6 / 10^18 <= 0:
                revert with 0, 'SafeMath: division by zero'
            require stor6 / 10^18
            stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 10^18
        else:
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require t / s
            stor2[address(arg1)] = stor1[address(arg1)] / t / s
    stor4[address(arg1)] = 1
    stor5.length++
    stor5[stor5.length] = arg1
}

function reflectionFromToken(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 > 10^18:
        revert with 0, 'Amount must be less than supply'
    mem[96] = 26
    mem[128] = 'SafeMath: division by zero'
    if arg2:
        if not arg1 / 100:
            mem[64] = 224
            mem[160] = 30
            mem[192] = 'SafeMath: subtraction overflow'
            if 0 > arg1:
                revert with 0, 'SafeMath: subtraction overflow'
            idx = 0
            s = 10^18
            t = stor6
            while idx < stor5.length:
                mem[0] = stor5[idx]
                mem[32] = 1
                if stor1[stor5[idx]] > t:
                    _628 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_628] = 26
                    mem[_628 + 32] = 'SafeMath: division by zero'
                    if not arg1:
                        return 0
                    require arg1
                    if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _800 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_800] = 30
                    mem[_800 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 10^18:
                        return (arg1 * stor6 / 10^18)
                    _832 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_832 + idx + 68] = mem[_800 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_832 + 68] = mem[_832 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _832 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                if stor2[stor5[idx]] > s:
                    _642 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_642] = 26
                    mem[_642 + 32] = 'SafeMath: division by zero'
                    if not arg1:
                        return 0
                    require arg1
                    if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _835 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_835] = 30
                    mem[_835 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 10^18:
                        return (arg1 * stor6 / 10^18)
                    _880 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_880 + idx + 68] = mem[_835 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_880 + 68] = mem[_880 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _880 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _638 = mem[64]
                mem[64] = mem[64] + 64
                mem[_638] = 30
                mem[_638 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _648 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_648 + idx + 68] = mem[_638 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_648 + 68] = mem[_648 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _648 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _699 = mem[64]
                mem[64] = mem[64] + 64
                mem[_699] = 30
                mem[_699 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _716 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_716 + idx + 68] = mem[_699 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_716 + 68] = mem[_716 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _716 + -mem[64] + 100
            _598 = mem[64]
            mem[64] = mem[64] + 64
            mem[_598] = 26
            mem[_598 + 32] = 'SafeMath: division by zero'
            if t < stor6 / 10^18:
                _660 = mem[64]
                mem[64] = mem[64] + 64
                mem[_660] = 26
                mem[_660 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * stor6 / 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (arg1 * stor6 / 10^18)
            _659 = mem[64]
            mem[64] = mem[64] + 64
            mem[_659] = 26
            mem[_659 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                return 0
            require arg1
            if arg1 * t / s / arg1 != t / s:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * t / s)
        require arg1 / 100
        if 3 * arg1 / 100 / arg1 / 100 != 3:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 3 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _625 = mem[64]
                mem[64] = mem[64] + 64
                mem[_625] = 26
                mem[_625 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _798 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_798] = 30
                    mem[_798 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 10^18 <= 0:
                        return (-3 * arg1 / 100 * stor6 / 10^18)
                    _825 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_825 + idx + 68] = mem[_798 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_825 + 68] = mem[_825 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _825 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _797 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_797] = 30
                    mem[_797 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 10^18:
                        return (arg1 * stor6 / 10^18)
                    _822 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_822 + idx + 68] = mem[_797 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_822 + 68] = mem[_822 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _822 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _821 = mem[64]
                mem[64] = mem[64] + 64
                mem[_821] = 30
                mem[_821 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 10^18 <= arg1 * stor6 / 10^18:
                    return ((arg1 * stor6 / 10^18) - (3 * arg1 / 100 * stor6 / 10^18))
                _865 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_865 + idx + 68] = mem[_821 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_865 + 68] = mem[_865 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _865 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _641 = mem[64]
                mem[64] = mem[64] + 64
                mem[_641] = 26
                mem[_641 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _829 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_829] = 30
                    mem[_829 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 10^18 <= 0:
                        return (-3 * arg1 / 100 * stor6 / 10^18)
                    _874 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_874 + idx + 68] = mem[_829 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_874 + 68] = mem[_874 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _874 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _828 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_828] = 30
                    mem[_828 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 10^18:
                        return (arg1 * stor6 / 10^18)
                    _871 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_871 + idx + 68] = mem[_828 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_871 + 68] = mem[_871 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _871 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _870 = mem[64]
                mem[64] = mem[64] + 64
                mem[_870] = 30
                mem[_870 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 10^18 <= arg1 * stor6 / 10^18:
                    return ((arg1 * stor6 / 10^18) - (3 * arg1 / 100 * stor6 / 10^18))
                _936 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_936 + idx + 68] = mem[_870 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_936 + 68] = mem[_936 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _936 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _637 = mem[64]
            mem[64] = mem[64] + 64
            mem[_637] = 30
            mem[_637 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _645 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_645 + idx + 68] = mem[_637 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_645 + 68] = mem[_645 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _645 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _697 = mem[64]
            mem[64] = mem[64] + 64
            mem[_697] = 30
            mem[_697 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _711 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_711 + idx + 68] = mem[_697 + idx + 32]
                idx = idx + 32
                continue 
            mem[_711 + 68] = mem[_711 + 70 len 30]
            revert with memory
              from mem[64]
               len _711 + -mem[64] + 100
        _593 = mem[64]
        mem[64] = mem[64] + 64
        mem[_593] = 26
        mem[_593 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 10^18:
            _658 = mem[64]
            mem[64] = mem[64] + 64
            mem[_658] = 26
            mem[_658 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if not 3 * arg1 / 100:
                    return 0
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 3 * arg1 / 100 * stor6 / 10^18 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (-3 * arg1 / 100 * stor6 / 10^18)
            require arg1
            if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 3 * arg1 / 100:
                if 0 > arg1 * stor6 / 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (arg1 * stor6 / 10^18)
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 3 * arg1 / 100 * stor6 / 10^18 > arg1 * stor6 / 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            return ((arg1 * stor6 / 10^18) - (3 * arg1 / 100 * stor6 / 10^18))
        _657 = mem[64]
        mem[64] = mem[64] + 64
        mem[_657] = 26
        mem[_657 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            if not 3 * arg1 / 100:
                return 0
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 3 * arg1 / 100 * t / s > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return (-3 * arg1 / 100 * t / s)
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not 3 * arg1 / 100:
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * t / s)
        require 3 * arg1 / 100
        if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if 3 * arg1 / 100 * t / s > arg1 * t / s:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((arg1 * t / s) - (3 * arg1 / 100 * t / s))
    if not arg1 / 100:
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 0 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _634 = mem[64]
                mem[64] = mem[64] + 64
                mem[_634] = 26
                mem[_634 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _805 = mem[64]
                mem[64] = mem[64] + 64
                mem[_805] = 30
                mem[_805 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= arg1 * stor6 / 10^18:
                    return (arg1 * stor6 / 10^18)
                _849 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_849 + idx + 68] = mem[_805 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_849 + 68] = mem[_849 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _849 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _644 = mem[64]
                mem[64] = mem[64] + 64
                mem[_644] = 26
                mem[_644 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _852 = mem[64]
                mem[64] = mem[64] + 64
                mem[_852] = 30
                mem[_852 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= arg1 * stor6 / 10^18:
                    return (arg1 * stor6 / 10^18)
                _902 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_902 + idx + 68] = mem[_852 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_902 + 68] = mem[_902 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _902 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _640 = mem[64]
            mem[64] = mem[64] + 64
            mem[_640] = 30
            mem[_640 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _654 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_654 + idx + 68] = mem[_640 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_654 + 68] = mem[_654 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _654 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _703 = mem[64]
            mem[64] = mem[64] + 64
            mem[_703] = 30
            mem[_703 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _726 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_726 + idx + 68] = mem[_703 + idx + 32]
                idx = idx + 32
                continue 
            mem[_726 + 68] = mem[_726 + 70 len 30]
            revert with memory
              from mem[64]
               len _726 + -mem[64] + 100
        _608 = mem[64]
        mem[64] = mem[64] + 64
        mem[_608] = 26
        mem[_608 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 10^18:
            _664 = mem[64]
            mem[64] = mem[64] + 64
            mem[_664] = 26
            mem[_664 + 32] = 'SafeMath: division by zero'
            if not arg1:
                return 0
            require arg1
            if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 0 > arg1 * stor6 / 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * stor6 / 10^18)
        _663 = mem[64]
        mem[64] = mem[64] + 64
        mem[_663] = 26
        mem[_663 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            return 0
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if 0 > arg1 * t / s:
            revert with 0, 'SafeMath: subtraction overflow'
    else:
        require arg1 / 100
        if 3 * arg1 / 100 / arg1 / 100 != 3:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 3 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _631 = mem[64]
                mem[64] = mem[64] + 64
                mem[_631] = 26
                mem[_631 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _803 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_803] = 30
                    mem[_803 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 10^18 <= 0:
                        return 0
                    _842 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_842 + idx + 68] = mem[_803 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_842 + 68] = mem[_842 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _842 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _802 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_802] = 30
                    mem[_802 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 10^18:
                        return (arg1 * stor6 / 10^18)
                    _839 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_839 + idx + 68] = mem[_802 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_839 + 68] = mem[_839 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _839 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _838 = mem[64]
                mem[64] = mem[64] + 64
                mem[_838] = 30
                mem[_838 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 10^18 <= arg1 * stor6 / 10^18:
                    return (arg1 * stor6 / 10^18)
                _887 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_887 + idx + 68] = mem[_838 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_887 + 68] = mem[_887 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _887 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _643 = mem[64]
                mem[64] = mem[64] + 64
                mem[_643] = 26
                mem[_643 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _846 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_846] = 30
                    mem[_846 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 10^18 <= 0:
                        return 0
                    _896 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_896 + idx + 68] = mem[_846 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_896 + 68] = mem[_896 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _896 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _845 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_845] = 30
                    mem[_845 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 10^18:
                        return (arg1 * stor6 / 10^18)
                    _893 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_893 + idx + 68] = mem[_845 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_893 + 68] = mem[_893 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _893 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _892 = mem[64]
                mem[64] = mem[64] + 64
                mem[_892] = 30
                mem[_892 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 10^18 <= arg1 * stor6 / 10^18:
                    return (arg1 * stor6 / 10^18)
                _970 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_970 + idx + 68] = mem[_892 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_970 + 68] = mem[_970 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _970 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _639 = mem[64]
            mem[64] = mem[64] + 64
            mem[_639] = 30
            mem[_639 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _651 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_651 + idx + 68] = mem[_639 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_651 + 68] = mem[_651 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _651 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _701 = mem[64]
            mem[64] = mem[64] + 64
            mem[_701] = 30
            mem[_701 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _721 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_721 + idx + 68] = mem[_701 + idx + 32]
                idx = idx + 32
                continue 
            mem[_721 + 68] = mem[_721 + 70 len 30]
            revert with memory
              from mem[64]
               len _721 + -mem[64] + 100
        _603 = mem[64]
        mem[64] = mem[64] + 64
        mem[_603] = 26
        mem[_603 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 10^18:
            _662 = mem[64]
            mem[64] = mem[64] + 64
            mem[_662] = 26
            mem[_662 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 3 * arg1 / 100:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * stor6 / 10^18 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    else:
                        return 0
                else:
                    return 0
            require arg1
            if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 3 * arg1 / 100:
                if 0 > arg1 * stor6 / 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 3 * arg1 / 100 * stor6 / 10^18 > arg1 * stor6 / 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * stor6 / 10^18)
        _661 = mem[64]
        mem[64] = mem[64] + 64
        mem[_661] = 26
        mem[_661 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            if 3 * arg1 / 100:
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 3 * arg1 / 100 * t / s > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                else:
                    return 0
            else:
                return 0
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not 3 * arg1 / 100:
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
        else:
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 3 * arg1 / 100 * t / s > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
    return (arg1 * t / s)
}

function reflect(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = msg.sender
    mem[32] = 4
    if stor4[address(msg.sender)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    44,
                    0x734578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f,
                    mem[208 len 20]
    mem[96] = 26
    mem[128] = 'SafeMath: division by zero'
    if not arg1 / 100:
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 0 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _750 = mem[64]
                mem[64] = mem[64] + 64
                mem[_750] = 26
                mem[_750 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    _828 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_828] = 30
                    mem[_828 + 32] = 'SafeMath: subtraction overflow'
                    mem[0] = msg.sender
                    mem[32] = 1
                    _896 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_896] = 30
                    mem[_896 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _945 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_945 + idx + 68] = mem[_896 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_945 + 68] = mem[_945 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _945 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1036 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1036] = 30
                    mem[_1036 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1105 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1105 + idx + 68] = mem[_1036 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1105 + 68] = mem[_1105 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1105 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _836 = mem[64]
                mem[64] = mem[64] + 64
                mem[_836] = 30
                mem[_836 + 32] = 'SafeMath: subtraction overflow'
                if 0 > arg1 * stor6 / 10^18:
                    _857 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_857 + idx + 68] = mem[_836 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_857 + 68] = mem[_857 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _857 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _944 = mem[64]
                mem[64] = mem[64] + 64
                mem[_944] = 30
                mem[_944 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                    _1008 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1008 + idx + 68] = mem[_944 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1008 + 68] = mem[_1008 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1008 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
                _1102 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1102] = 30
                mem[_1102 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 10^18
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1186 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1186 + idx + 68] = mem[_1102 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1186 + 68] = mem[_1186 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1186 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] <= s:
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _754 = mem[64]
                mem[64] = mem[64] + 64
                mem[_754] = 30
                mem[_754 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _760 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_760 + idx + 68] = mem[_754 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_760 + 68] = mem[_760 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _760 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _785 = mem[64]
                mem[64] = mem[64] + 64
                mem[_785] = 30
                mem[_785 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _796 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_796 + idx + 68] = mem[_785 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_796 + 68] = mem[_796 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _796 + -mem[64] + 100
            _756 = mem[64]
            mem[64] = mem[64] + 64
            mem[_756] = 26
            mem[_756 + 32] = 'SafeMath: division by zero'
            if not arg1:
                _837 = mem[64]
                mem[64] = mem[64] + 64
                mem[_837] = 30
                mem[_837 + 32] = 'SafeMath: subtraction overflow'
                mem[0] = msg.sender
                mem[32] = 1
                _950 = mem[64]
                mem[64] = mem[64] + 64
                mem[_950] = 30
                mem[_950 + 32] = 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    _1014 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1014 + idx + 68] = mem[_950 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1014 + 68] = mem[_1014 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1014 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _1108 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1108] = 30
                mem[_1108 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= stor6:
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1193 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1193 + idx + 68] = mem[_1108 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1193 + 68] = mem[_1193 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1193 + -mem[64] + 100
            require arg1
            if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _860 = mem[64]
            mem[64] = mem[64] + 64
            mem[_860] = 30
            mem[_860 + 32] = 'SafeMath: subtraction overflow'
            if 0 > arg1 * stor6 / 10^18:
                _886 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_886 + idx + 68] = mem[_860 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_886 + 68] = mem[_886 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _886 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            _1013 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1013] = 30
            mem[_1013 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                _1081 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1081 + idx + 68] = mem[_1013 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1081 + 68] = mem[_1081 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1081 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
            _1190 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1190] = 30
            mem[_1190 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 10^18 <= stor6:
                stor6 += -1 * arg1 * stor6 / 10^18
                if totalFees + arg1 < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += arg1
            _1280 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1280 + idx + 68] = mem[_1190 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1280 + 68] = mem[_1280 + 70 len 30]
            revert with memory
              from mem[64]
               len _1280 + -mem[64] + 100
        _736 = mem[64]
        mem[64] = mem[64] + 64
        mem[_736] = 26
        mem[_736 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 10^18:
            _766 = mem[64]
            mem[64] = mem[64] + 64
            mem[_766] = 26
            mem[_766 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * stor6 / 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
                if arg1 * stor6 / 10^18 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * stor6 / 10^18
        else:
            _765 = mem[64]
            mem[64] = mem[64] + 64
            mem[_765] = 26
            mem[_765 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * t / s / arg1 != t / s:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * t / s:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * t / s > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * t / s
                if arg1 * t / s > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * t / s
    else:
        require arg1 / 100
        if 3 * arg1 / 100 / arg1 / 100 != 3:
            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 3 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 10^18
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _747 = mem[64]
                mem[64] = mem[64] + 64
                mem[_747] = 26
                mem[_747 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        _827 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_827] = 30
                        mem[_827 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 1
                        _893 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_893] = 30
                        mem[_893 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _936 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_936 + idx + 68] = mem[_893 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_936 + 68] = mem[_936 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _936 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _1027 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1027] = 30
                        mem[_1027 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees + arg1 < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += arg1
                        _1096 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_1096 + idx + 68] = mem[_1027 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1096 + 68] = mem[_1096 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _1096 + -mem[64] + 100
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _834 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_834] = 30
                    mem[_834 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 10^18 > 0:
                        _850 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_850 + idx + 68] = mem[_834 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_850 + 68] = mem[_850 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _850 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _935 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_935] = 30
                    mem[_935 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _990 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_990 + idx + 68] = mem[_935 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_990 + 68] = mem[_990 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _990 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1093 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1093] = 30
                    mem[_1093 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1167 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1167 + idx + 68] = mem[_1093 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1167 + 68] = mem[_1167 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1167 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _833 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_833] = 30
                    mem[_833 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > arg1 * stor6 / 10^18:
                        _847 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_847 + idx + 68] = mem[_833 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_847 + 68] = mem[_847 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _847 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _934 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_934] = 30
                    mem[_934 + 32] = 'SafeMath: subtraction overflow'
                    if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                        _987 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_987 + idx + 68] = mem[_934 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_987 + 68] = mem[_987 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _987 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
                    _1090 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1090] = 30
                    mem[_1090 + 32] = 'SafeMath: subtraction overflow'
                    if arg1 * stor6 / 10^18 <= stor6:
                        stor6 += -1 * arg1 * stor6 / 10^18
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1164 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1164 + idx + 68] = mem[_1090 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1164 + 68] = mem[_1164 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1164 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _846 = mem[64]
                mem[64] = mem[64] + 64
                mem[_846] = 30
                mem[_846 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 10^18 > arg1 * stor6 / 10^18:
                    _869 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_869 + idx + 68] = mem[_846 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_869 + 68] = mem[_869 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _869 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _986 = mem[64]
                mem[64] = mem[64] + 64
                mem[_986] = 30
                mem[_986 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                    _1053 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1053 + idx + 68] = mem[_986 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1053 + 68] = mem[_1053 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1053 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
                _1161 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1161] = 30
                mem[_1161 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 10^18
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1246 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1246 + idx + 68] = mem[_1161 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1246 + 68] = mem[_1246 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1246 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] <= s:
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _753 = mem[64]
                mem[64] = mem[64] + 64
                mem[_753] = 30
                mem[_753 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _757 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_757 + idx + 68] = mem[_753 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_757 + 68] = mem[_757 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _757 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _783 = mem[64]
                mem[64] = mem[64] + 64
                mem[_783] = 30
                mem[_783 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _791 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_791 + idx + 68] = mem[_783 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_791 + 68] = mem[_791 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _791 + -mem[64] + 100
            _755 = mem[64]
            mem[64] = mem[64] + 64
            mem[_755] = 26
            mem[_755 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if not 3 * arg1 / 100:
                    _835 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_835] = 30
                    mem[_835 + 32] = 'SafeMath: subtraction overflow'
                    mem[0] = msg.sender
                    mem[32] = 1
                    _943 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_943] = 30
                    mem[_943 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _999 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_999 + idx + 68] = mem[_943 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_999 + 68] = mem[_999 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _999 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1099 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1099] = 30
                    mem[_1099 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1177 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1177 + idx + 68] = mem[_1099 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1177 + 68] = mem[_1177 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1177 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _854 = mem[64]
                mem[64] = mem[64] + 64
                mem[_854] = 30
                mem[_854 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 10^18 > 0:
                    _879 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_879 + idx + 68] = mem[_854 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_879 + 68] = mem[_879 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _879 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _998 = mem[64]
                mem[64] = mem[64] + 64
                mem[_998] = 30
                mem[_998 + 32] = 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    _1065 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1065 + idx + 68] = mem[_998 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1065 + 68] = mem[_1065 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1065 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _1174 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1174] = 30
                mem[_1174 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= stor6:
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1260 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1260 + idx + 68] = mem[_1174 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1260 + 68] = mem[_1260 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1260 + -mem[64] + 100
            require arg1
            if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 3 * arg1 / 100:
                _853 = mem[64]
                mem[64] = mem[64] + 64
                mem[_853] = 30
                mem[_853 + 32] = 'SafeMath: subtraction overflow'
                if 0 > arg1 * stor6 / 10^18:
                    _876 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_876 + idx + 68] = mem[_853 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_876 + 68] = mem[_876 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _876 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _997 = mem[64]
                mem[64] = mem[64] + 64
                mem[_997] = 30
                mem[_997 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                    _1062 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1062 + idx + 68] = mem[_997 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1062 + 68] = mem[_1062 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1062 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
                _1171 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1171] = 30
                mem[_1171 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 10^18
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1257 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1257 + idx + 68] = mem[_1171 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1257 + 68] = mem[_1257 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1257 + -mem[64] + 100
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _875 = mem[64]
            mem[64] = mem[64] + 64
            mem[_875] = 30
            mem[_875 + 32] = 'SafeMath: subtraction overflow'
            if 3 * arg1 / 100 * stor6 / 10^18 > arg1 * stor6 / 10^18:
                _916 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_916 + idx + 68] = mem[_875 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_916 + 68] = mem[_916 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _916 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            _1061 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1061] = 30
            mem[_1061 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                _1133 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1133 + idx + 68] = mem[_1061 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1133 + 68] = mem[_1133 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1133 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
            _1254 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1254] = 30
            mem[_1254 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 10^18 <= stor6:
                stor6 += -1 * arg1 * stor6 / 10^18
                if totalFees + arg1 < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += arg1
            _1332 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1332 + idx + 68] = mem[_1254 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1332 + 68] = mem[_1332 + 70 len 30]
            revert with memory
              from mem[64]
               len _1332 + -mem[64] + 100
        _731 = mem[64]
        mem[64] = mem[64] + 64
        mem[_731] = 26
        mem[_731 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 10^18:
            _764 = mem[64]
            mem[64] = mem[64] + 64
            mem[_764] = 26
            mem[_764 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 3 * arg1 / 100:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * stor6 / 10^18 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * stor6 / 10^18 / arg1 != stor6 / 10^18:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    if 0 > arg1 * stor6 / 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 10^18 / 3 * arg1 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * stor6 / 10^18 > arg1 * stor6 / 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 10^18 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 10^18
                if arg1 * stor6 / 10^18 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * stor6 / 10^18
        else:
            _763 = mem[64]
            mem[64] = mem[64] + 64
            mem[_763] = 26
            mem[_763 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                if 3 * arg1 / 100:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * t / s > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * t / s / arg1 != t / s:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    if 0 > arg1 * t / s:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * t / s > arg1 * t / s:
                        revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * t / s > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * t / s
                if arg1 * t / s > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * t / s
    if totalFees + arg1 < totalFees:
        revert with 0, 'SafeMath: addition overflow'
    totalFees += arg1
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x6f45524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg2 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    41,
                    0x655472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a6572,
                    mem[205 len 23]
    if not stor4[address(msg.sender)]:
        if stor4[address(msg.sender)]:
            if stor4[address(msg.sender)]:
                mem[0] = msg.sender
                mem[32] = 4
                if not stor4[address(msg.sender)]:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not arg2 / 100:
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _33633 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33633] = 26
                                mem[_33633 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36111 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36111] = 30
                                    mem[_36111 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38039 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38039] = 30
                                    mem[_38039 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39378 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39378 + idx + 68] = mem[_38039 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39378 + 68] = mem[_39378 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39378 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _46832 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46832] = 30
                                    mem[_46832 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _49243 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49243 + idx + 68] = mem[_46832 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49243 + 68] = mem[_49243 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49243 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36299 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36299] = 30
                                mem[_36299 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _36650 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36650 + idx + 68] = mem[_36299 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36650 + 68] = mem[_36650 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36650 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39377 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39377] = 30
                                mem[_39377 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _40762 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_40762 + idx + 68] = mem[_39377 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_40762 + 68] = mem[_40762 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _40762 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _49242 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49242] = 30
                                mem[_49242 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _51426 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51426 + idx + 68] = mem[_49242 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51426 + 68] = mem[_51426 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51426 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _33817 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33817] = 30
                                mem[_33817 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _33943 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33943 + idx + 68] = mem[_33817 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33943 + 68] = mem[_33943 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33943 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _34748 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34748] = 30
                                mem[_34748 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _34939 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_34939 + idx + 68] = mem[_34748 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_34939 + 68] = mem[_34939 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _34939 + -mem[64] + 100
                            _33879 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33879] = 26
                            mem[_33879 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _36300 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36300] = 30
                                mem[_36300 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39383 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39383] = 30
                                mem[_39383 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _40769 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_40769 + idx + 68] = mem[_39383 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_40769 + 68] = mem[_40769 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _40769 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _49247 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49247] = 30
                                mem[_49247 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _51431 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51431 + idx + 68] = mem[_49247 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51431 + 68] = mem[_51431 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51431 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36653 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36653] = 30
                            mem[_36653 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                _37309 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37309 + idx + 68] = mem[_36653 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37309 + 68] = mem[_37309 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37309 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _40768 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_40768] = 30
                            mem[_40768 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _42750 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42750 + idx + 68] = mem[_40768 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42750 + 68] = mem[_42750 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42750 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _51430 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51430] = 30
                            mem[_51430 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _53351 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53351 + idx + 68] = mem[_51430 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53351 + 68] = mem[_53351 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53351 + -mem[64] + 100
                        _33139 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33139] = 26
                        mem[_33139 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 10^18:
                            _34129 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34129] = 26
                            mem[_34129 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _36649 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36649] = 30
                                mem[_36649 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40761 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40761] = 30
                                mem[_40761 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51425 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51425] = 30
                                mem[_51425 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37306 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37306] = 30
                                mem[_37306 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42740 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42740] = 30
                                mem[_42740 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _53343 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53343] = 30
                                mem[_53343 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                        else:
                            _34128 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34128] = 26
                            mem[_34128 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                _36648 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36648] = 30
                                mem[_36648 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40758 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40758] = 30
                                mem[_40758 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51423 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51423] = 30
                                mem[_51423 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37305 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37305] = 30
                                mem[_37305 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42736 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42736] = 30
                                mem[_42736 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * t / s
                                _53339 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53339] = 30
                                mem[_53339 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * t / s > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                    else:
                        require arg2 / 100
                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _33630 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33630] = 26
                                mem[_33630 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36110 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36110] = 30
                                        mem[_36110 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38036 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38036] = 30
                                        mem[_38036 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39369 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39369 + idx + 68] = mem[_38036 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39369 + 68] = mem[_39369 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39369 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _46821 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46821] = 30
                                        mem[_46821 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49228 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49228 + idx + 68] = mem[_46821 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49228 + 68] = mem[_49228 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49228 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36297 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36297] = 30
                                    mem[_36297 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _36643 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36643 + idx + 68] = mem[_36297 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36643 + 68] = mem[_36643 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36643 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39368 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39368] = 30
                                    mem[_39368 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40743 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40743 + idx + 68] = mem[_39368 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40743 + 68] = mem[_40743 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40743 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _49227 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49227] = 30
                                    mem[_49227 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51412 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51412 + idx + 68] = mem[_49227 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51412 + 68] = mem[_51412 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51412 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36296 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36296] = 30
                                    mem[_36296 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36640 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36640 + idx + 68] = mem[_36296 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36640 + 68] = mem[_36640 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36640 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39367 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39367] = 30
                                    mem[_39367 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _40740 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40740 + idx + 68] = mem[_39367 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40740 + 68] = mem[_40740 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40740 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49226 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49226] = 30
                                    mem[_49226 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51409 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51409 + idx + 68] = mem[_49226 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51409 + 68] = mem[_51409 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51409 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36639 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36639] = 30
                                mem[_36639 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _37292 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37292 + idx + 68] = mem[_36639 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37292 + 68] = mem[_37292 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37292 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40739 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40739] = 30
                                mem[_40739 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _42714 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42714 + idx + 68] = mem[_40739 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42714 + 68] = mem[_42714 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42714 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _51408 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51408] = 30
                                mem[_51408 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53323 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53323 + idx + 68] = mem[_51408 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53323 + 68] = mem[_53323 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53323 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _33816 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33816] = 30
                                mem[_33816 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _33940 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33940 + idx + 68] = mem[_33816 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33940 + 68] = mem[_33940 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33940 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _34746 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34746] = 30
                                mem[_34746 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _34934 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_34934 + idx + 68] = mem[_34746 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_34934 + 68] = mem[_34934 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _34934 + -mem[64] + 100
                            _33878 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33878] = 26
                            mem[_33878 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36298 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36298] = 30
                                    mem[_36298 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39376 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39376] = 30
                                    mem[_39376 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40753 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40753 + idx + 68] = mem[_39376 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40753 + 68] = mem[_40753 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40753 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49235 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49235] = 30
                                    mem[_49235 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51419 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51419 + idx + 68] = mem[_49235 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51419 + 68] = mem[_51419 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51419 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36647 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36647] = 30
                                mem[_36647 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                    _37302 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37302 + idx + 68] = mem[_36647 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37302 + 68] = mem[_37302 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37302 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40752 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40752] = 30
                                mem[_40752 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _42730 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42730 + idx + 68] = mem[_40752 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42730 + 68] = mem[_42730 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42730 + -mem[64] + 100
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                _51418 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51418] = 30
                                mem[_51418 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53335 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53335 + idx + 68] = mem[_51418 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53335 + 68] = mem[_53335 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53335 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _36646 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36646] = 30
                                mem[_36646 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37299 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37299 + idx + 68] = mem[_36646 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37299 + 68] = mem[_37299 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37299 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40751 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40751] = 30
                                mem[_40751 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _42727 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42727 + idx + 68] = mem[_40751 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42727 + 68] = mem[_42727 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42727 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _51417 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51417] = 30
                                mem[_51417 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53332 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53332 + idx + 68] = mem[_51417 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53332 + 68] = mem[_53332 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53332 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37298 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37298] = 30
                            mem[_37298 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                _38299 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_38299 + idx + 68] = mem[_37298 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_38299 + 68] = mem[_38299 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _38299 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _42726 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42726] = 30
                            mem[_42726 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _45010 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_45010 + idx + 68] = mem[_42726 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_45010 + 68] = mem[_45010 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _45010 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                            _53331 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53331] = 30
                            mem[_53331 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _55344 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55344 + idx + 68] = mem[_53331 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55344 + 68] = mem[_55344 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55344 + -mem[64] + 100
                        _33134 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33134] = 26
                        mem[_33134 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 10^18:
                            _34127 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34127] = 26
                            mem[_34127 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36638 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36638] = 30
                                    mem[_36638 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40738 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40738] = 30
                                    mem[_40738 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51407 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51407] = 30
                                    mem[_51407 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37291 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37291] = 30
                                    mem[_37291 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42710 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42710] = 30
                                    mem[_42710 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _53319 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53319] = 30
                                    mem[_53319 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37290 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37290] = 30
                                    mem[_37290 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42709 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42709] = 30
                                    mem[_42709 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53318 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53318] = 30
                                    mem[_53318 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _38287 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38287] = 30
                                    mem[_38287 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44991 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44991] = 30
                                    mem[_44991 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _55327 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55327] = 30
                                    mem[_55327 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            _34126 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34126] = 26
                            mem[_34126 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36637 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36637] = 30
                                    mem[_36637 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40733 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40733] = 30
                                    mem[_40733 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51402 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51402] = 30
                                    mem[_51402 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37289 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37289] = 30
                                    mem[_37289 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42703 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42703] = 30
                                    mem[_42703 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                    _53313 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53313] = 30
                                    mem[_53313 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37288 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37288] = 30
                                    mem[_37288 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42702 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42702] = 30
                                    mem[_42702 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _53312 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53312] = 30
                                    mem[_53312 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _38280 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38280] = 30
                                    mem[_38280 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44981 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44981] = 30
                                    mem[_44981 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                    _55319 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55319] = 30
                                    mem[_55319 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not stor4[address(arg1)]:
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33639 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33639] = 26
                                    mem[_33639 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36113 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36113] = 30
                                        mem[_36113 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38047 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38047] = 30
                                        mem[_38047 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39397 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39397 + idx + 68] = mem[_38047 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39397 + 68] = mem[_39397 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39397 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _46855 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46855] = 30
                                        mem[_46855 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49276 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49276 + idx + 68] = mem[_46855 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49276 + 68] = mem[_49276 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49276 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36304 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36304] = 30
                                    mem[_36304 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36667 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36667 + idx + 68] = mem[_36304 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36667 + 68] = mem[_36667 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36667 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39396 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39396] = 30
                                    mem[_39396 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _40805 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40805 + idx + 68] = mem[_39396 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40805 + 68] = mem[_40805 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40805 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49275 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49275] = 30
                                    mem[_49275 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51462 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51462 + idx + 68] = mem[_49275 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51462 + 68] = mem[_51462 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51462 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33819 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33819] = 30
                                    mem[_33819 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33949 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33949 + idx + 68] = mem[_33819 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33949 + 68] = mem[_33949 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33949 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34752 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34752] = 30
                                    mem[_34752 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _34949 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34949 + idx + 68] = mem[_34752 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34949 + 68] = mem[_34949 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34949 + -mem[64] + 100
                                _33881 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33881] = 26
                                mem[_33881 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36305 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36305] = 30
                                    mem[_36305 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39402 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39402] = 30
                                    mem[_39402 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40812 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40812 + idx + 68] = mem[_39402 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40812 + 68] = mem[_40812 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40812 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49280 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49280] = 30
                                    mem[_49280 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51467 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51467 + idx + 68] = mem[_49280 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51467 + 68] = mem[_51467 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51467 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36670 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36670] = 30
                                mem[_36670 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37333 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37333 + idx + 68] = mem[_36670 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37333 + 68] = mem[_37333 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37333 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40811 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40811] = 30
                                mem[_40811 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _42806 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42806 + idx + 68] = mem[_40811 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42806 + 68] = mem[_42806 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42806 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _51466 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51466] = 30
                                mem[_51466 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53395 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53395 + idx + 68] = mem[_51466 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53395 + 68] = mem[_53395 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53395 + -mem[64] + 100
                            _33149 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33149] = 26
                            mem[_33149 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34133 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34133] = 26
                                mem[_34133 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36666 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36666] = 30
                                    mem[_36666 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40804 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40804] = 30
                                    mem[_40804 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51461 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51461] = 30
                                    mem[_51461 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37330 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37330] = 30
                                    mem[_37330 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42796 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42796] = 30
                                    mem[_42796 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53387 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53387] = 30
                                    mem[_53387 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34132 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34132] = 26
                                mem[_34132 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _36665 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36665] = 30
                                    mem[_36665 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40801 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40801] = 30
                                    mem[_40801 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51459 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51459] = 30
                                    mem[_51459 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37329 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37329] = 30
                                    mem[_37329 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42792 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42792] = 30
                                    mem[_42792 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _53383 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53383] = 30
                                    mem[_53383 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33636 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33636] = 26
                                    mem[_33636 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36112] = 30
                                            mem[_36112 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38044 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38044] = 30
                                            mem[_38044 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39388 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39388 + idx + 68] = mem[_38044 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39388 + 68] = mem[_39388 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39388 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _46844 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46844] = 30
                                            mem[_46844 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49261 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49261 + idx + 68] = mem[_46844 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49261 + 68] = mem[_49261 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49261 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36302 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36302] = 30
                                        mem[_36302 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _36660 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36660 + idx + 68] = mem[_36302 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36660 + 68] = mem[_36660 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36660 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39387 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39387] = 30
                                        mem[_39387 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40786 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40786 + idx + 68] = mem[_39387 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40786 + 68] = mem[_40786 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40786 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _49260 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49260] = 30
                                        mem[_49260 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51448 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51448 + idx + 68] = mem[_49260 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51448 + 68] = mem[_51448 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51448 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36301 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36301] = 30
                                        mem[_36301 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36657 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36657 + idx + 68] = mem[_36301 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36657 + 68] = mem[_36657 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36657 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39386 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39386] = 30
                                        mem[_39386 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _40783 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40783 + idx + 68] = mem[_39386 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40783 + 68] = mem[_40783 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40783 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49259 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49259] = 30
                                        mem[_49259 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51445 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51445 + idx + 68] = mem[_49259 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51445 + 68] = mem[_51445 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51445 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36656 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36656] = 30
                                    mem[_36656 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37316 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37316 + idx + 68] = mem[_36656 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37316 + 68] = mem[_37316 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37316 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40782 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40782] = 30
                                    mem[_40782 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _42770 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42770 + idx + 68] = mem[_40782 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42770 + 68] = mem[_42770 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42770 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _51444 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51444] = 30
                                    mem[_51444 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53367 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53367 + idx + 68] = mem[_51444 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53367 + 68] = mem[_53367 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53367 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33818 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33818] = 30
                                    mem[_33818 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33946 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33946 + idx + 68] = mem[_33818 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33946 + 68] = mem[_33946 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33946 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34750 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34750] = 30
                                    mem[_34750 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _34944 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34944 + idx + 68] = mem[_34750 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34944 + 68] = mem[_34944 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34944 + -mem[64] + 100
                                _33880 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33880] = 26
                                mem[_33880 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36303 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36303] = 30
                                        mem[_36303 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39395 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39395] = 30
                                        mem[_39395 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40796 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40796 + idx + 68] = mem[_39395 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40796 + 68] = mem[_40796 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40796 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49268 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49268] = 30
                                        mem[_49268 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51455 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51455 + idx + 68] = mem[_49268 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51455 + 68] = mem[_51455 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51455 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36664 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36664] = 30
                                    mem[_36664 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37326 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37326 + idx + 68] = mem[_36664 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37326 + 68] = mem[_37326 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37326 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40795 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40795] = 30
                                    mem[_40795 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42786 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42786 + idx + 68] = mem[_40795 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42786 + 68] = mem[_42786 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42786 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _51454 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51454] = 30
                                    mem[_51454 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53379 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53379 + idx + 68] = mem[_51454 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53379 + 68] = mem[_53379 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53379 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36663 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36663] = 30
                                    mem[_36663 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37323 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37323 + idx + 68] = mem[_36663 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37323 + 68] = mem[_37323 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37323 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40794 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40794] = 30
                                    mem[_40794 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _42783 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42783 + idx + 68] = mem[_40794 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42783 + 68] = mem[_42783 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42783 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _51453 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51453] = 30
                                    mem[_51453 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53376 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53376 + idx + 68] = mem[_51453 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53376 + 68] = mem[_53376 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53376 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37322 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37322] = 30
                                mem[_37322 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _38334 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38334 + idx + 68] = mem[_37322 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38334 + 68] = mem[_38334 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38334 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42782 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42782] = 30
                                mem[_42782 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _45072 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_45072 + idx + 68] = mem[_42782 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_45072 + 68] = mem[_45072 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _45072 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _53375 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53375] = 30
                                mem[_53375 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55394 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55394 + idx + 68] = mem[_53375 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55394 + 68] = mem[_55394 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55394 + -mem[64] + 100
                            _33144 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33144] = 26
                            mem[_33144 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34131 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34131] = 26
                                mem[_34131 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36655 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36655] = 30
                                        mem[_36655 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40781 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40781] = 30
                                        mem[_40781 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51443 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51443] = 30
                                        mem[_51443 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37315 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37315] = 30
                                        mem[_37315 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42766 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42766] = 30
                                        mem[_42766 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _53363 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53363] = 30
                                        mem[_53363 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37314 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37314] = 30
                                        mem[_37314 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42765 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42765] = 30
                                        mem[_42765 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53362 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53362] = 30
                                        mem[_53362 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38322 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38322] = 30
                                        mem[_38322 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45053 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45053] = 30
                                        mem[_45053 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _55377 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55377] = 30
                                        mem[_55377 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34130 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34130] = 26
                                mem[_34130 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36654 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36654] = 30
                                        mem[_36654 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40776 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40776] = 30
                                        mem[_40776 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51438 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51438] = 30
                                        mem[_51438 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37313 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37313] = 30
                                        mem[_37313 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42759 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42759] = 30
                                        mem[_42759 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _53357 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53357] = 30
                                        mem[_53357 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37312 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37312] = 30
                                        mem[_37312 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42758 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42758] = 30
                                        mem[_42758 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53356 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53356] = 30
                                        mem[_53356 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38315 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38315] = 30
                                        mem[_38315 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45043 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45043] = 30
                                        mem[_45043 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _55369 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55369] = 30
                                        mem[_55369 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                    else:
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33645 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33645] = 26
                                    mem[_33645 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36115 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36115] = 30
                                        mem[_36115 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _38055 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38055] = 30
                                        mem[_38055 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _39416 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39416 + idx + 68] = mem[_38055 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39416 + 68] = mem[_39416 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39416 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42121 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42121] = 30
                                        mem[_42121 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _44451 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44451 + idx + 68] = mem[_42121 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44451 + 68] = mem[_44451 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44451 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _55451 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55451] = 30
                                        mem[_55451 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _57544 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57544 + idx + 68] = mem[_55451 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57544 + 68] = mem[_57544 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57544 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36309 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36309] = 30
                                    mem[_36309 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36684 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36684 + idx + 68] = mem[_36309 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36684 + 68] = mem[_36684 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36684 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39415 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39415] = 30
                                    mem[_39415 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _40848 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40848 + idx + 68] = mem[_39415 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40848 + 68] = mem[_40848 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40848 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44448 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44448] = 30
                                    mem[_44448 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _46892 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_46892 + idx + 68] = mem[_44448 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_46892 + 68] = mem[_46892 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _46892 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _57543 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57543] = 30
                                    mem[_57543 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _59470 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59470 + idx + 68] = mem[_57543 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59470 + 68] = mem[_59470 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59470 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33821 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33821] = 30
                                    mem[_33821 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33955 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33955 + idx + 68] = mem[_33821 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33955 + 68] = mem[_33955 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33955 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34756 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34756] = 30
                                    mem[_34756 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _34959 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34959 + idx + 68] = mem[_34756 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34959 + 68] = mem[_34959 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34959 + -mem[64] + 100
                                _33883 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33883] = 26
                                mem[_33883 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36310 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36310] = 30
                                    mem[_36310 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _39421 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39421] = 30
                                    mem[_39421 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _40855 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40855 + idx + 68] = mem[_39421 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40855 + 68] = mem[_40855 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40855 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44454 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44454] = 30
                                    mem[_44454 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _46901 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_46901 + idx + 68] = mem[_44454 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_46901 + 68] = mem[_46901 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _46901 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _57548 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57548] = 30
                                    mem[_57548 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _59475 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59475 + idx + 68] = mem[_57548 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59475 + 68] = mem[_59475 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59475 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36687 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36687] = 30
                                mem[_36687 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37357 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37357 + idx + 68] = mem[_36687 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37357 + 68] = mem[_37357 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37357 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 2
                                _40854 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40854] = 30
                                mem[_40854 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _42858 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42858 + idx + 68] = mem[_40854 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42858 + 68] = mem[_42858 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42858 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                mem[0] = msg.sender
                                mem[32] = 1
                                _46898 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_46898] = 30
                                mem[_46898 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _49341 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49341 + idx + 68] = mem[_46898 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49341 + 68] = mem[_49341 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49341 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _59474 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_59474] = 30
                                mem[_59474 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _61142 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_61142 + idx + 68] = mem[_59474 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_61142 + 68] = mem[_61142 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _61142 + -mem[64] + 100
                            _33159 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33159] = 26
                            mem[_33159 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34137 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34137] = 26
                                mem[_34137 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36683 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36683] = 30
                                    mem[_36683 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40847 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40847] = 30
                                    mem[_40847 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46889 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46889] = 30
                                    mem[_46889 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _59469 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59469] = 30
                                    mem[_59469 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37354 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37354] = 30
                                    mem[_37354 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _42850 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42850] = 30
                                    mem[_42850 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _49329 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49329] = 30
                                    mem[_49329 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _61134 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_61134] = 30
                                    mem[_61134 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34136 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34136] = 26
                                mem[_34136 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _36682 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36682] = 30
                                    mem[_36682 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40844 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40844] = 30
                                    mem[_40844 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46886 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46886] = 30
                                    mem[_46886 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _59467 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59467] = 30
                                    mem[_59467 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37353 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37353] = 30
                                    mem[_37353 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _42846 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42846] = 30
                                    mem[_42846 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _49323 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49323] = 30
                                    mem[_49323 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _61130 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_61130] = 30
                                    mem[_61130 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33642 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33642] = 26
                                    mem[_33642 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36114 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36114] = 30
                                            mem[_36114 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38052 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38052] = 30
                                            mem[_38052 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39407 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39407 + idx + 68] = mem[_38052 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39407 + 68] = mem[_39407 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39407 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42112] = 30
                                            mem[_42112 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _44442 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44442 + idx + 68] = mem[_42112 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44442 + 68] = mem[_44442 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44442 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _55439 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55439] = 30
                                            mem[_55439 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _57535 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57535 + idx + 68] = mem[_55439 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57535 + 68] = mem[_57535 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57535 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36307 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36307] = 30
                                        mem[_36307 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _36677 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36677 + idx + 68] = mem[_36307 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36677 + 68] = mem[_36677 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36677 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39406 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39406] = 30
                                        mem[_39406 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40829 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40829 + idx + 68] = mem[_39406 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40829 + 68] = mem[_40829 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40829 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44439 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44439] = 30
                                        mem[_44439 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _46871 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46871 + idx + 68] = mem[_44439 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46871 + 68] = mem[_46871 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46871 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _57534 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57534] = 30
                                        mem[_57534 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59456 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59456 + idx + 68] = mem[_57534 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59456 + 68] = mem[_59456 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59456 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36306 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36306] = 30
                                        mem[_36306 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36674 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36674 + idx + 68] = mem[_36306 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36674 + 68] = mem[_36674 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36674 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39405 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39405] = 30
                                        mem[_39405 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40826 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40826 + idx + 68] = mem[_39405 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40826 + 68] = mem[_40826 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40826 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44436 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44436] = 30
                                        mem[_44436 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _46868 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46868 + idx + 68] = mem[_44436 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46868 + 68] = mem[_46868 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46868 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _57533 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57533] = 30
                                        mem[_57533 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59453 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59453 + idx + 68] = mem[_57533 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59453 + 68] = mem[_59453 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59453 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36673 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36673] = 30
                                    mem[_36673 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37340 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37340 + idx + 68] = mem[_36673 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37340 + 68] = mem[_37340 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37340 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40825 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40825] = 30
                                    mem[_40825 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _42826 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42826 + idx + 68] = mem[_40825 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42826 + 68] = mem[_42826 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42826 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46865 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46865] = 30
                                    mem[_46865 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _49299 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49299 + idx + 68] = mem[_46865 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49299 + 68] = mem[_49299 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49299 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _59452 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59452] = 30
                                    mem[_59452 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _61114 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_61114 + idx + 68] = mem[_59452 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_61114 + 68] = mem[_61114 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _61114 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33820 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33820] = 30
                                    mem[_33820 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33952 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33952 + idx + 68] = mem[_33820 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33952 + 68] = mem[_33952 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33952 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34754 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34754] = 30
                                    mem[_34754 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _34954 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34954 + idx + 68] = mem[_34754 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34954 + 68] = mem[_34954 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34954 + -mem[64] + 100
                                _33882 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33882] = 26
                                mem[_33882 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36308 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36308] = 30
                                        mem[_36308 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39414 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39414] = 30
                                        mem[_39414 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40839 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40839 + idx + 68] = mem[_39414 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40839 + 68] = mem[_40839 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40839 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44445 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44445] = 30
                                        mem[_44445 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _46883 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46883 + idx + 68] = mem[_44445 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46883 + 68] = mem[_46883 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46883 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _57540 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57540] = 30
                                        mem[_57540 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59463 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59463 + idx + 68] = mem[_57540 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59463 + 68] = mem[_59463 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59463 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36681 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36681] = 30
                                    mem[_36681 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37350 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37350 + idx + 68] = mem[_36681 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37350 + 68] = mem[_37350 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37350 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40838 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40838] = 30
                                    mem[_40838 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _42840 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42840 + idx + 68] = mem[_40838 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42840 + 68] = mem[_42840 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42840 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46880] = 30
                                    mem[_46880 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _49317 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49317 + idx + 68] = mem[_46880 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49317 + 68] = mem[_49317 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49317 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _59462 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59462] = 30
                                    mem[_59462 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _61126 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_61126 + idx + 68] = mem[_59462 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_61126 + 68] = mem[_61126 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _61126 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36680 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36680] = 30
                                    mem[_36680 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37347 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37347 + idx + 68] = mem[_36680 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37347 + 68] = mem[_37347 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37347 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40837 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40837] = 30
                                    mem[_40837 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _42837 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42837 + idx + 68] = mem[_40837 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42837 + 68] = mem[_42837 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42837 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46877 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46877] = 30
                                    mem[_46877 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _49314 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49314 + idx + 68] = mem[_46877 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49314 + 68] = mem[_49314 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49314 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _59461 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59461] = 30
                                    mem[_59461 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _61123 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_61123 + idx + 68] = mem[_59461 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_61123 + 68] = mem[_61123 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _61123 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37346 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37346] = 30
                                mem[_37346 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _38369 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38369 + idx + 68] = mem[_37346 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38369 + 68] = mem[_38369 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38369 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 2
                                _42836 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42836] = 30
                                mem[_42836 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _45130 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_45130 + idx + 68] = mem[_42836 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_45130 + 68] = mem[_45130 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _45130 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                mem[0] = msg.sender
                                mem[32] = 1
                                _49311 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49311] = 30
                                mem[_49311 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _51503 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51503 + idx + 68] = mem[_49311 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51503 + 68] = mem[_51503 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51503 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _61122 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_61122] = 30
                                mem[_61122 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _62424 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_62424 + idx + 68] = mem[_61122 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_62424 + 68] = mem[_62424 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _62424 + -mem[64] + 100
                            _33154 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33154] = 26
                            mem[_33154 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34135 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34135] = 26
                                mem[_34135 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36672 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36672] = 30
                                        mem[_36672 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40824 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40824] = 30
                                        mem[_40824 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46862 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46862] = 30
                                        mem[_46862 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _59451 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59451] = 30
                                        mem[_59451 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37339 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37339] = 30
                                        mem[_37339 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _42822 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42822] = 30
                                        mem[_42822 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49293 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49293] = 30
                                        mem[_49293 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _61110 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61110] = 30
                                        mem[_61110 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37338 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37338] = 30
                                        mem[_37338 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _42821 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42821] = 30
                                        mem[_42821 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49290 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49290] = 30
                                        mem[_49290 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _61109 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61109] = 30
                                        mem[_61109 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38357 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38357] = 30
                                        mem[_38357 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _45115 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45115] = 30
                                        mem[_45115 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _51482 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51482] = 30
                                        mem[_51482 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _62407 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_62407] = 30
                                        mem[_62407 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34134 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34134] = 26
                                mem[_34134 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36671 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36671] = 30
                                        mem[_36671 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40819 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40819] = 30
                                        mem[_40819 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46859 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46859] = 30
                                        mem[_46859 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _59448 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59448] = 30
                                        mem[_59448 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37337 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37337] = 30
                                        mem[_37337 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _42815 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42815] = 30
                                        mem[_42815 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49284 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49284] = 30
                                        mem[_49284 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _61104 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61104] = 30
                                        mem[_61104 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37336 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37336] = 30
                                        mem[_37336 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _42814 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42814] = 30
                                        mem[_42814 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49281 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49281] = 30
                                        mem[_49281 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _61103 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61103] = 30
                                        mem[_61103 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38350 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38350] = 30
                                        mem[_38350 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _45105 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45105] = 30
                                        mem[_45105 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _51470 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51470] = 30
                                        mem[_51470 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _62399 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_62399] = 30
                                        mem[_62399 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
            else:
                mem[0] = arg1
                mem[32] = 4
                if not stor4[address(arg1)]:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not arg2 / 100:
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _33669 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33669] = 26
                                mem[_33669 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36123 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36123] = 30
                                    mem[_36123 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38087 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38087] = 30
                                    mem[_38087 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39492 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39492 + idx + 68] = mem[_38087 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39492 + 68] = mem[_39492 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39492 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47014 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47014] = 30
                                    mem[_47014 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _49507 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49507 + idx + 68] = mem[_47014 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49507 + 68] = mem[_49507 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49507 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36329 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36329] = 30
                                mem[_36329 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _36752 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36752 + idx + 68] = mem[_36329 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36752 + 68] = mem[_36752 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36752 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39491 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39491] = 30
                                mem[_39491 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _41020 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41020 + idx + 68] = mem[_39491 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41020 + 68] = mem[_41020 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41020 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _49506 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49506] = 30
                                mem[_49506 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _51702 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51702 + idx + 68] = mem[_49506 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51702 + 68] = mem[_51702 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51702 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _33829 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33829] = 30
                                mem[_33829 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _33979 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33979 + idx + 68] = mem[_33829 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33979 + 68] = mem[_33979 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33979 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _34772 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34772] = 30
                                mem[_34772 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _34999 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_34999 + idx + 68] = mem[_34772 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_34999 + 68] = mem[_34999 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _34999 + -mem[64] + 100
                            _33891 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33891] = 26
                            mem[_33891 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _36330 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36330] = 30
                                mem[_36330 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39497 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39497] = 30
                                mem[_39497 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41027 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41027 + idx + 68] = mem[_39497 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41027 + 68] = mem[_41027 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41027 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _49511 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49511] = 30
                                mem[_49511 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _51707 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51707 + idx + 68] = mem[_49511 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51707 + 68] = mem[_51707 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51707 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36755 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36755] = 30
                            mem[_36755 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                _37453 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37453 + idx + 68] = mem[_36755 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37453 + 68] = mem[_37453 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37453 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41026 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41026] = 30
                            mem[_41026 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _43078 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43078 + idx + 68] = mem[_41026 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43078 + 68] = mem[_43078 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43078 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _51706 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51706] = 30
                            mem[_51706 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _53633 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53633 + idx + 68] = mem[_51706 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53633 + 68] = mem[_53633 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53633 + -mem[64] + 100
                        _33199 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33199] = 26
                        mem[_33199 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 10^18:
                            _34153 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34153] = 26
                            mem[_34153 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _36751 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36751] = 30
                                mem[_36751 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41019 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41019] = 30
                                mem[_41019 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51701 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51701] = 30
                                mem[_51701 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37450 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37450] = 30
                                mem[_37450 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43068 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43068] = 30
                                mem[_43068 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _53625 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53625] = 30
                                mem[_53625 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                        else:
                            _34152 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34152] = 26
                            mem[_34152 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                _36750 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36750] = 30
                                mem[_36750 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41016 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41016] = 30
                                mem[_41016 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _51699 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51699] = 30
                                mem[_51699 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37449 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37449] = 30
                                mem[_37449 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43064 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43064] = 30
                                mem[_43064 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * t / s
                                _53621 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53621] = 30
                                mem[_53621 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * t / s > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                    else:
                        require arg2 / 100
                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _33666 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33666] = 26
                                mem[_33666 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36122 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36122] = 30
                                        mem[_36122 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38084 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38084] = 30
                                        mem[_38084 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39483 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39483 + idx + 68] = mem[_38084 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39483 + 68] = mem[_39483 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39483 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47003 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47003] = 30
                                        mem[_47003 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49492 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49492 + idx + 68] = mem[_47003 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49492 + 68] = mem[_49492 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49492 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36327 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36327] = 30
                                    mem[_36327 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _36745 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36745 + idx + 68] = mem[_36327 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36745 + 68] = mem[_36745 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36745 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39482 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39482] = 30
                                    mem[_39482 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41001 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41001 + idx + 68] = mem[_39482 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41001 + 68] = mem[_41001 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41001 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _49491 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49491] = 30
                                    mem[_49491 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51688 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51688 + idx + 68] = mem[_49491 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51688 + 68] = mem[_51688 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51688 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36326 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36326] = 30
                                    mem[_36326 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36742 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36742 + idx + 68] = mem[_36326 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36742 + 68] = mem[_36742 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36742 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39481 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39481] = 30
                                    mem[_39481 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _40998 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40998 + idx + 68] = mem[_39481 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40998 + 68] = mem[_40998 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40998 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49490 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49490] = 30
                                    mem[_49490 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51685 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51685 + idx + 68] = mem[_49490 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51685 + 68] = mem[_51685 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51685 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36741 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36741] = 30
                                mem[_36741 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _37436 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37436 + idx + 68] = mem[_36741 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37436 + 68] = mem[_37436 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37436 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40997 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40997] = 30
                                mem[_40997 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _43042 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43042 + idx + 68] = mem[_40997 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43042 + 68] = mem[_43042 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43042 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _51684 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51684] = 30
                                mem[_51684 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53605 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53605 + idx + 68] = mem[_51684 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53605 + 68] = mem[_53605 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53605 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _33828 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33828] = 30
                                mem[_33828 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _33976 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33976 + idx + 68] = mem[_33828 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33976 + 68] = mem[_33976 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33976 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _34770 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34770] = 30
                                mem[_34770 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _34994 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_34994 + idx + 68] = mem[_34770 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_34994 + 68] = mem[_34994 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _34994 + -mem[64] + 100
                            _33890 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33890] = 26
                            mem[_33890 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36328 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36328] = 30
                                    mem[_36328 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39490 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39490] = 30
                                    mem[_39490 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41011 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41011 + idx + 68] = mem[_39490 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41011 + 68] = mem[_41011 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41011 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49499 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49499] = 30
                                    mem[_49499 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51695 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51695 + idx + 68] = mem[_49499 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51695 + 68] = mem[_51695 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51695 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36749 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36749] = 30
                                mem[_36749 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                    _37446 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37446 + idx + 68] = mem[_36749 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37446 + 68] = mem[_37446 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37446 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41010 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41010] = 30
                                mem[_41010 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _43058 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43058 + idx + 68] = mem[_41010 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43058 + 68] = mem[_43058 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43058 + -mem[64] + 100
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                _51694 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51694] = 30
                                mem[_51694 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53617 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53617 + idx + 68] = mem[_51694 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53617 + 68] = mem[_53617 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53617 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _36748 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36748] = 30
                                mem[_36748 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37443 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37443 + idx + 68] = mem[_36748 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37443 + 68] = mem[_37443 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37443 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41009 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41009] = 30
                                mem[_41009 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _43055 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43055 + idx + 68] = mem[_41009 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43055 + 68] = mem[_43055 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43055 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _51693 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51693] = 30
                                mem[_51693 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53614 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53614 + idx + 68] = mem[_51693 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53614 + 68] = mem[_53614 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53614 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37442 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37442] = 30
                            mem[_37442 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                _38509 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_38509 + idx + 68] = mem[_37442 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_38509 + 68] = mem[_38509 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _38509 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _43054 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_43054] = 30
                            mem[_43054 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _45362 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_45362 + idx + 68] = mem[_43054 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_45362 + 68] = mem[_45362 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _45362 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                            _53613 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53613] = 30
                            mem[_53613 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _55612 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55612 + idx + 68] = mem[_53613 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55612 + 68] = mem[_55612 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55612 + -mem[64] + 100
                        _33194 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33194] = 26
                        mem[_33194 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 10^18:
                            _34151 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34151] = 26
                            mem[_34151 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36740 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36740] = 30
                                    mem[_36740 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40996 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40996] = 30
                                    mem[_40996 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51683 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51683] = 30
                                    mem[_51683 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37435 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37435] = 30
                                    mem[_37435 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43038 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43038] = 30
                                    mem[_43038 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _53601 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53601] = 30
                                    mem[_53601 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37434 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37434] = 30
                                    mem[_37434 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43037 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43037] = 30
                                    mem[_43037 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53600 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53600] = 30
                                    mem[_53600 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _38497 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38497] = 30
                                    mem[_38497 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45343] = 30
                                    mem[_45343 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _55595 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55595] = 30
                                    mem[_55595 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            _34150 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34150] = 26
                            mem[_34150 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36739 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36739] = 30
                                    mem[_36739 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40991 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40991] = 30
                                    mem[_40991 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51678 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51678] = 30
                                    mem[_51678 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37433 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37433] = 30
                                    mem[_37433 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43031 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43031] = 30
                                    mem[_43031 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                    _53595 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53595] = 30
                                    mem[_53595 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37432 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37432] = 30
                                    mem[_37432 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43030 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43030] = 30
                                    mem[_43030 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _53594 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53594] = 30
                                    mem[_53594 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _38490 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38490] = 30
                                    mem[_38490 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _45333 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45333] = 30
                                    mem[_45333 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                    _55587 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55587] = 30
                                    mem[_55587 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                else:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33651 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33651] = 26
                                    mem[_33651 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36117 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36117] = 30
                                        mem[_36117 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38063 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38063] = 30
                                        mem[_38063 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39435 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39435 + idx + 68] = mem[_38063 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39435 + 68] = mem[_39435 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39435 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _46923 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46923] = 30
                                        mem[_46923 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49375 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49375 + idx + 68] = mem[_46923 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49375 + 68] = mem[_49375 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49375 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36314 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36314] = 30
                                    mem[_36314 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36701 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36701 + idx + 68] = mem[_36314 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36701 + 68] = mem[_36701 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36701 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39434 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39434] = 30
                                    mem[_39434 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _40891 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40891 + idx + 68] = mem[_39434 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40891 + 68] = mem[_40891 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40891 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49374 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49374] = 30
                                    mem[_49374 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51564 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51564 + idx + 68] = mem[_49374 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51564 + 68] = mem[_51564 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51564 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33823 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33823] = 30
                                    mem[_33823 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33961 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33961 + idx + 68] = mem[_33823 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33961 + 68] = mem[_33961 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33961 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34760 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34760] = 30
                                    mem[_34760 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _34969 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34969 + idx + 68] = mem[_34760 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34969 + 68] = mem[_34969 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34969 + -mem[64] + 100
                                _33885 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33885] = 26
                                mem[_33885 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36315 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36315] = 30
                                    mem[_36315 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39440 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39440] = 30
                                    mem[_39440 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40898 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40898 + idx + 68] = mem[_39440 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40898 + 68] = mem[_40898 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40898 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49379 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49379] = 30
                                    mem[_49379 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51569 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51569 + idx + 68] = mem[_49379 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51569 + 68] = mem[_51569 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51569 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36704 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36704] = 30
                                mem[_36704 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37381 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37381 + idx + 68] = mem[_36704 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37381 + 68] = mem[_37381 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37381 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40897 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40897] = 30
                                mem[_40897 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _42914 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42914 + idx + 68] = mem[_40897 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42914 + 68] = mem[_42914 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42914 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _51568 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51568] = 30
                                mem[_51568 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53492 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53492 + idx + 68] = mem[_51568 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53492 + 68] = mem[_53492 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53492 + -mem[64] + 100
                            _33169 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33169] = 26
                            mem[_33169 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34141 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34141] = 26
                                mem[_34141 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36700 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36700] = 30
                                    mem[_36700 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40890 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40890] = 30
                                    mem[_40890 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51563 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51563] = 30
                                    mem[_51563 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37378 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37378] = 30
                                    mem[_37378 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42904 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42904] = 30
                                    mem[_42904 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53484 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53484] = 30
                                    mem[_53484 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34140 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34140] = 26
                                mem[_34140 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _36699 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36699] = 30
                                    mem[_36699 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40887 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40887] = 30
                                    mem[_40887 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51561 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51561] = 30
                                    mem[_51561 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37377 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37377] = 30
                                    mem[_37377 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42900 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42900] = 30
                                    mem[_42900 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _53480 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53480] = 30
                                    mem[_53480 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33648 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33648] = 26
                                    mem[_33648 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36116 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36116] = 30
                                            mem[_36116 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38060 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38060] = 30
                                            mem[_38060 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39426 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39426 + idx + 68] = mem[_38060 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39426 + 68] = mem[_39426 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39426 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _46912 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46912] = 30
                                            mem[_46912 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49360 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49360 + idx + 68] = mem[_46912 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49360 + 68] = mem[_49360 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49360 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36312 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36312] = 30
                                        mem[_36312 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _36694 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36694 + idx + 68] = mem[_36312 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36694 + 68] = mem[_36694 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36694 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39425 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39425] = 30
                                        mem[_39425 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40872 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40872 + idx + 68] = mem[_39425 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40872 + 68] = mem[_40872 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40872 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _49359 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49359] = 30
                                        mem[_49359 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51550 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51550 + idx + 68] = mem[_49359 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51550 + 68] = mem[_51550 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51550 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36311 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36311] = 30
                                        mem[_36311 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36691 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36691 + idx + 68] = mem[_36311 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36691 + 68] = mem[_36691 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36691 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39424 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39424] = 30
                                        mem[_39424 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _40869 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40869 + idx + 68] = mem[_39424 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40869 + 68] = mem[_40869 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40869 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49358 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49358] = 30
                                        mem[_49358 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51547 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51547 + idx + 68] = mem[_49358 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51547 + 68] = mem[_51547 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51547 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36690 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36690] = 30
                                    mem[_36690 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37364 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37364 + idx + 68] = mem[_36690 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37364 + 68] = mem[_37364 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37364 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40868 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40868] = 30
                                    mem[_40868 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _42878 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42878 + idx + 68] = mem[_40868 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42878 + 68] = mem[_42878 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42878 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _51546 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51546] = 30
                                    mem[_51546 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53464 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53464 + idx + 68] = mem[_51546 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53464 + 68] = mem[_53464 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53464 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33822 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33822] = 30
                                    mem[_33822 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33958 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33958 + idx + 68] = mem[_33822 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33958 + 68] = mem[_33958 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33958 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34758 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34758] = 30
                                    mem[_34758 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _34964 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34964 + idx + 68] = mem[_34758 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34964 + 68] = mem[_34964 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34964 + -mem[64] + 100
                                _33884 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33884] = 26
                                mem[_33884 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36313 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36313] = 30
                                        mem[_36313 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39433 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39433] = 30
                                        mem[_39433 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40882 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40882 + idx + 68] = mem[_39433 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40882 + 68] = mem[_40882 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40882 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49367 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49367] = 30
                                        mem[_49367 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51557 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51557 + idx + 68] = mem[_49367 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51557 + 68] = mem[_51557 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51557 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36698 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36698] = 30
                                    mem[_36698 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37374 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37374 + idx + 68] = mem[_36698 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37374 + 68] = mem[_37374 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37374 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40881 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40881] = 30
                                    mem[_40881 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42894 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42894 + idx + 68] = mem[_40881 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42894 + 68] = mem[_42894 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42894 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _51556 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51556] = 30
                                    mem[_51556 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53476 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53476 + idx + 68] = mem[_51556 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53476 + 68] = mem[_53476 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53476 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36697 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36697] = 30
                                    mem[_36697 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37371 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37371 + idx + 68] = mem[_36697 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37371 + 68] = mem[_37371 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37371 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40880] = 30
                                    mem[_40880 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _42891 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42891 + idx + 68] = mem[_40880 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42891 + 68] = mem[_42891 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42891 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _51555 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51555] = 30
                                    mem[_51555 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53473 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53473 + idx + 68] = mem[_51555 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53473 + 68] = mem[_53473 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53473 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37370 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37370] = 30
                                mem[_37370 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _38404 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38404 + idx + 68] = mem[_37370 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38404 + 68] = mem[_38404 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38404 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42890 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42890] = 30
                                mem[_42890 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _45186 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_45186 + idx + 68] = mem[_42890 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_45186 + 68] = mem[_45186 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _45186 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _53472 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53472] = 30
                                mem[_53472 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55478 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55478 + idx + 68] = mem[_53472 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55478 + 68] = mem[_55478 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55478 + -mem[64] + 100
                            _33164 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33164] = 26
                            mem[_33164 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34139 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34139] = 26
                                mem[_34139 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36689 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36689] = 30
                                        mem[_36689 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40867 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40867] = 30
                                        mem[_40867 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51545 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51545] = 30
                                        mem[_51545 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37363 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37363] = 30
                                        mem[_37363 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42874 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42874] = 30
                                        mem[_42874 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _53460 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53460] = 30
                                        mem[_53460 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37362 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37362] = 30
                                        mem[_37362 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42873 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42873] = 30
                                        mem[_42873 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53459 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53459] = 30
                                        mem[_53459 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38392 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38392] = 30
                                        mem[_38392 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45167 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45167] = 30
                                        mem[_45167 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _55461 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55461] = 30
                                        mem[_55461 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34138 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34138] = 26
                                mem[_34138 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36688 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36688] = 30
                                        mem[_36688 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40862 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40862] = 30
                                        mem[_40862 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51540 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51540] = 30
                                        mem[_51540 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37361 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37361] = 30
                                        mem[_37361 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42867 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42867] = 30
                                        mem[_42867 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _53454 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53454] = 30
                                        mem[_53454 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37360 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37360] = 30
                                        mem[_37360 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42866 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42866] = 30
                                        mem[_42866 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53453 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53453] = 30
                                        mem[_53453 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38385 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38385] = 30
                                        mem[_38385 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45157 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45157] = 30
                                        mem[_45157 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _55453 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55453] = 30
                                        mem[_55453 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not stor4[address(arg1)]:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33657 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33657] = 26
                                        mem[_33657 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36119 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36119] = 30
                                            mem[_36119 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38071 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38071] = 30
                                            mem[_38071 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39454 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39454 + idx + 68] = mem[_38071 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39454 + 68] = mem[_39454 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39454 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _46946 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46946] = 30
                                            mem[_46946 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49408 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49408 + idx + 68] = mem[_46946 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49408 + 68] = mem[_49408 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49408 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36319 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36319] = 30
                                        mem[_36319 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36718 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36718 + idx + 68] = mem[_36319 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36718 + 68] = mem[_36718 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36718 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39453 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39453] = 30
                                        mem[_39453 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _40934 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40934 + idx + 68] = mem[_39453 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40934 + 68] = mem[_40934 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40934 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49407 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49407] = 30
                                        mem[_49407 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51600 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51600 + idx + 68] = mem[_49407 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51600 + 68] = mem[_51600 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51600 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33825 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33825] = 30
                                        mem[_33825 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33967 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33967 + idx + 68] = mem[_33825 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33967 + 68] = mem[_33967 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33967 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34764 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34764] = 30
                                        mem[_34764 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _34979 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34979 + idx + 68] = mem[_34764 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34979 + 68] = mem[_34979 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34979 + -mem[64] + 100
                                    _33887 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33887] = 26
                                    mem[_33887 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36320 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36320] = 30
                                        mem[_36320 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39459 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39459] = 30
                                        mem[_39459 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40941 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40941 + idx + 68] = mem[_39459 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40941 + 68] = mem[_40941 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40941 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49412 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49412] = 30
                                        mem[_49412 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51605 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51605 + idx + 68] = mem[_49412 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51605 + 68] = mem[_51605 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51605 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36721 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36721] = 30
                                    mem[_36721 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37405 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37405 + idx + 68] = mem[_36721 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37405 + 68] = mem[_37405 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37405 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40940 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40940] = 30
                                    mem[_40940 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _42970 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42970 + idx + 68] = mem[_40940 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42970 + 68] = mem[_42970 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42970 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _51604 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51604] = 30
                                    mem[_51604 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53536 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53536 + idx + 68] = mem[_51604 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53536 + 68] = mem[_53536 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53536 + -mem[64] + 100
                                _33179 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33179] = 26
                                mem[_33179 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34145 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34145] = 26
                                    mem[_34145 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36717 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36717] = 30
                                        mem[_36717 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40933 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40933] = 30
                                        mem[_40933 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51599 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51599] = 30
                                        mem[_51599 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37402 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37402] = 30
                                        mem[_37402 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42960 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42960] = 30
                                        mem[_42960 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53528 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53528] = 30
                                        mem[_53528 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34144 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34144] = 26
                                    mem[_34144 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36716 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36716] = 30
                                        mem[_36716 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40930 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40930] = 30
                                        mem[_40930 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51597 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51597] = 30
                                        mem[_51597 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37401] = 30
                                        mem[_37401 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42956 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42956] = 30
                                        mem[_42956 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53524 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53524] = 30
                                        mem[_53524 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33654 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33654] = 26
                                        mem[_33654 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36118 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36118] = 30
                                                mem[_36118 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38068 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38068] = 30
                                                mem[_38068 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39445 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39445 + idx + 68] = mem[_38068 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39445 + 68] = mem[_39445 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39445 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46935 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46935] = 30
                                                mem[_46935 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _49393 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49393 + idx + 68] = mem[_46935 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49393 + 68] = mem[_49393 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49393 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36317 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36317] = 30
                                            mem[_36317 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36711 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36711 + idx + 68] = mem[_36317 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36711 + 68] = mem[_36711 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36711 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39444 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39444] = 30
                                            mem[_39444 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40915 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40915 + idx + 68] = mem[_39444 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40915 + 68] = mem[_40915 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40915 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _49392 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49392] = 30
                                            mem[_49392 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51586 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51586 + idx + 68] = mem[_49392 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51586 + 68] = mem[_51586 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51586 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36316 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36316] = 30
                                            mem[_36316 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36708 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36708 + idx + 68] = mem[_36316 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36708 + 68] = mem[_36708 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36708 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39443 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39443] = 30
                                            mem[_39443 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _40912 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40912 + idx + 68] = mem[_39443 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40912 + 68] = mem[_40912 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40912 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _49391 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49391] = 30
                                            mem[_49391 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51583 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51583 + idx + 68] = mem[_49391 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51583 + 68] = mem[_51583 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51583 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36707 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36707] = 30
                                        mem[_36707 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37388 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37388 + idx + 68] = mem[_36707 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37388 + 68] = mem[_37388 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37388 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40911 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40911] = 30
                                        mem[_40911 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _42934 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42934 + idx + 68] = mem[_40911 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42934 + 68] = mem[_42934 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42934 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _51582 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51582] = 30
                                        mem[_51582 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53508 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53508 + idx + 68] = mem[_51582 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53508 + 68] = mem[_53508 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53508 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33824 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33824] = 30
                                        mem[_33824 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33964 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33964 + idx + 68] = mem[_33824 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33964 + 68] = mem[_33964 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33964 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34762 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34762] = 30
                                        mem[_34762 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _34974 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34974 + idx + 68] = mem[_34762 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34974 + 68] = mem[_34974 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34974 + -mem[64] + 100
                                    _33886 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33886] = 26
                                    mem[_33886 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36318 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36318] = 30
                                            mem[_36318 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39452 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39452] = 30
                                            mem[_39452 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40925 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40925 + idx + 68] = mem[_39452 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40925 + 68] = mem[_40925 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40925 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _49400 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49400] = 30
                                            mem[_49400 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51593 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51593 + idx + 68] = mem[_49400 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51593 + 68] = mem[_51593 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51593 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36715 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36715] = 30
                                        mem[_36715 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37398 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37398 + idx + 68] = mem[_36715 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37398 + 68] = mem[_37398 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37398 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40924 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40924] = 30
                                        mem[_40924 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42950 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42950 + idx + 68] = mem[_40924 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42950 + 68] = mem[_42950 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42950 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _51592 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51592] = 30
                                        mem[_51592 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53520 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53520 + idx + 68] = mem[_51592 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53520 + 68] = mem[_53520 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53520 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36714 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36714] = 30
                                        mem[_36714 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37395 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37395 + idx + 68] = mem[_36714 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37395 + 68] = mem[_37395 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37395 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40923 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40923] = 30
                                        mem[_40923 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _42947 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42947 + idx + 68] = mem[_40923 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42947 + 68] = mem[_42947 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42947 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _51591 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51591] = 30
                                        mem[_51591 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53517 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53517 + idx + 68] = mem[_51591 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53517 + 68] = mem[_53517 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53517 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37394 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37394] = 30
                                    mem[_37394 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38439 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38439 + idx + 68] = mem[_37394 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38439 + 68] = mem[_38439 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38439 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42946 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42946] = 30
                                    mem[_42946 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _45248 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45248 + idx + 68] = mem[_42946 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45248 + 68] = mem[_45248 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45248 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _53516 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53516] = 30
                                    mem[_53516 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _55528 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55528 + idx + 68] = mem[_53516 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55528 + 68] = mem[_55528 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55528 + -mem[64] + 100
                                _33174 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33174] = 26
                                mem[_33174 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34143 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34143] = 26
                                    mem[_34143 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36706 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36706] = 30
                                            mem[_36706 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40910 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40910] = 30
                                            mem[_40910 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51581 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51581] = 30
                                            mem[_51581 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37387 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37387] = 30
                                            mem[_37387 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42930 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42930] = 30
                                            mem[_42930 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _53504 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53504] = 30
                                            mem[_53504 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37386 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37386] = 30
                                            mem[_37386 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42929 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42929] = 30
                                            mem[_42929 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _53503 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53503] = 30
                                            mem[_53503 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38427 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38427] = 30
                                            mem[_38427 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45229 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45229] = 30
                                            mem[_45229 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _55511 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55511] = 30
                                            mem[_55511 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34142 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34142] = 26
                                    mem[_34142 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36705 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36705] = 30
                                            mem[_36705 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40905 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40905] = 30
                                            mem[_40905 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51576 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51576] = 30
                                            mem[_51576 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37385 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37385] = 30
                                            mem[_37385 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42923 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42923] = 30
                                            mem[_42923 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _53498 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53498] = 30
                                            mem[_53498 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37384 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37384] = 30
                                            mem[_37384 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42922 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42922] = 30
                                            mem[_42922 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _53497 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53497] = 30
                                            mem[_53497 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38420 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38420] = 30
                                            mem[_38420 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45219 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45219] = 30
                                            mem[_45219 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _55503 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55503] = 30
                                            mem[_55503 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33663 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33663] = 26
                                        mem[_33663 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36121 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36121] = 30
                                            mem[_36121 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38079 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38079] = 30
                                            mem[_38079 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39473 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39473 + idx + 68] = mem[_38079 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39473 + 68] = mem[_39473 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39473 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42183 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42183] = 30
                                            mem[_42183 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _44508 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44508 + idx + 68] = mem[_42183 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44508 + 68] = mem[_44508 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44508 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _55585 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55585] = 30
                                            mem[_55585 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _57663 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57663 + idx + 68] = mem[_55585 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57663 + 68] = mem[_57663 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57663 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36324 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36324] = 30
                                        mem[_36324 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36735 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36735 + idx + 68] = mem[_36324 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36735 + 68] = mem[_36735 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36735 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39472 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39472] = 30
                                        mem[_39472 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40977 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40977 + idx + 68] = mem[_39472 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40977 + 68] = mem[_40977 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40977 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44505 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44505] = 30
                                        mem[_44505 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _46983 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46983 + idx + 68] = mem[_44505 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46983 + 68] = mem[_46983 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46983 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _57662 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57662] = 30
                                        mem[_57662 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59580 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59580 + idx + 68] = mem[_57662 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59580 + 68] = mem[_59580 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59580 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33827 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33827] = 30
                                        mem[_33827 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33973 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33973 + idx + 68] = mem[_33827 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33973 + 68] = mem[_33973 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33973 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34768 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34768] = 30
                                        mem[_34768 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _34989 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34989 + idx + 68] = mem[_34768 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34989 + 68] = mem[_34989 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34989 + -mem[64] + 100
                                    _33889 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33889] = 26
                                    mem[_33889 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36325 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36325] = 30
                                        mem[_36325 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39478 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39478] = 30
                                        mem[_39478 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _40984 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40984 + idx + 68] = mem[_39478 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40984 + 68] = mem[_40984 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40984 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44511 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44511] = 30
                                        mem[_44511 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _46992 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46992 + idx + 68] = mem[_44511 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46992 + 68] = mem[_46992 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46992 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _57667 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57667] = 30
                                        mem[_57667 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59585 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59585 + idx + 68] = mem[_57667 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59585 + 68] = mem[_59585 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59585 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36738 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36738] = 30
                                    mem[_36738 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37429 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37429 + idx + 68] = mem[_36738 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37429 + 68] = mem[_37429 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37429 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _40983 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40983] = 30
                                    mem[_40983 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _43022 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43022 + idx + 68] = mem[_40983 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43022 + 68] = mem[_43022 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43022 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46989 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46989] = 30
                                    mem[_46989 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _49473 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49473 + idx + 68] = mem[_46989 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49473 + 68] = mem[_49473 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49473 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _59584 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59584] = 30
                                    mem[_59584 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _61226 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_61226 + idx + 68] = mem[_59584 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_61226 + 68] = mem[_61226 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _61226 + -mem[64] + 100
                                _33189 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33189] = 26
                                mem[_33189 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34149 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34149] = 26
                                    mem[_34149 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36734 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36734] = 30
                                        mem[_36734 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40976 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40976] = 30
                                        mem[_40976 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46980 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46980] = 30
                                        mem[_46980 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _59579 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59579] = 30
                                        mem[_59579 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37426 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37426] = 30
                                        mem[_37426 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43014 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43014] = 30
                                        mem[_43014 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49461 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49461] = 30
                                        mem[_49461 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _61218 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61218] = 30
                                        mem[_61218 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34148 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34148] = 26
                                    mem[_34148 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36733 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36733] = 30
                                        mem[_36733 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40973 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40973] = 30
                                        mem[_40973 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46977 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46977] = 30
                                        mem[_46977 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _59577 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59577] = 30
                                        mem[_59577 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37425 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37425] = 30
                                        mem[_37425 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43010 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43010] = 30
                                        mem[_43010 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49455 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49455] = 30
                                        mem[_49455 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _61214 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61214] = 30
                                        mem[_61214 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33660 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33660] = 26
                                        mem[_33660 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36120 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36120] = 30
                                                mem[_36120 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38076 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38076] = 30
                                                mem[_38076 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39464 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39464 + idx + 68] = mem[_38076 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39464 + 68] = mem[_39464 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39464 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _42174 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_42174] = 30
                                                mem[_42174 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44499 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44499 + idx + 68] = mem[_42174 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44499 + 68] = mem[_44499 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44499 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _55573 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_55573] = 30
                                                mem[_55573 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _57654 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_57654 + idx + 68] = mem[_55573 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_57654 + 68] = mem[_57654 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _57654 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36322 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36322] = 30
                                            mem[_36322 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36728 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36728 + idx + 68] = mem[_36322 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36728 + 68] = mem[_36728 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36728 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39463 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39463] = 30
                                            mem[_39463 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40958 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40958 + idx + 68] = mem[_39463 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40958 + 68] = mem[_40958 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40958 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44496 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44496] = 30
                                            mem[_44496 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _46962 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46962 + idx + 68] = mem[_44496 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46962 + 68] = mem[_46962 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46962 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _57653 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57653] = 30
                                            mem[_57653 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59566 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59566 + idx + 68] = mem[_57653 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59566 + 68] = mem[_59566 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59566 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36321 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36321] = 30
                                            mem[_36321 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36725 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36725 + idx + 68] = mem[_36321 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36725 + 68] = mem[_36725 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36725 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39462 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39462] = 30
                                            mem[_39462 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40955 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40955 + idx + 68] = mem[_39462 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40955 + 68] = mem[_40955 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40955 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44493 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44493] = 30
                                            mem[_44493 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _46959 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46959 + idx + 68] = mem[_44493 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46959 + 68] = mem[_46959 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46959 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _57652 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57652] = 30
                                            mem[_57652 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59563 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59563 + idx + 68] = mem[_57652 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59563 + 68] = mem[_59563 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59563 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36724 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36724] = 30
                                        mem[_36724 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37412 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37412 + idx + 68] = mem[_36724 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37412 + 68] = mem[_37412 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37412 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40954 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40954] = 30
                                        mem[_40954 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _42990 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42990 + idx + 68] = mem[_40954 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42990 + 68] = mem[_42990 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42990 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46956 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46956] = 30
                                        mem[_46956 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49431 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49431 + idx + 68] = mem[_46956 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49431 + 68] = mem[_49431 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49431 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _59562 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59562] = 30
                                        mem[_59562 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61198 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61198 + idx + 68] = mem[_59562 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61198 + 68] = mem[_61198 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61198 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33826 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33826] = 30
                                        mem[_33826 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33970 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33970 + idx + 68] = mem[_33826 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33970 + 68] = mem[_33970 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33970 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34766 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34766] = 30
                                        mem[_34766 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _34984 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34984 + idx + 68] = mem[_34766 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34984 + 68] = mem[_34984 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34984 + -mem[64] + 100
                                    _33888 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33888] = 26
                                    mem[_33888 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36323 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36323] = 30
                                            mem[_36323 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39471 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39471] = 30
                                            mem[_39471 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _40968 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40968 + idx + 68] = mem[_39471 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40968 + 68] = mem[_40968 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40968 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44502 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44502] = 30
                                            mem[_44502 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _46974 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46974 + idx + 68] = mem[_44502 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46974 + 68] = mem[_46974 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46974 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _57659 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57659] = 30
                                            mem[_57659 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59573 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59573 + idx + 68] = mem[_57659 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59573 + 68] = mem[_59573 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59573 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36732 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36732] = 30
                                        mem[_36732 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37422 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37422 + idx + 68] = mem[_36732 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37422 + 68] = mem[_37422 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37422 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40967 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40967] = 30
                                        mem[_40967 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43004 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43004 + idx + 68] = mem[_40967 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43004 + 68] = mem[_43004 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43004 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46971 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46971] = 30
                                        mem[_46971 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _49449 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49449 + idx + 68] = mem[_46971 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49449 + 68] = mem[_49449 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49449 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _59572 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59572] = 30
                                        mem[_59572 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61210 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61210 + idx + 68] = mem[_59572 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61210 + 68] = mem[_61210 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61210 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36731 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36731] = 30
                                        mem[_36731 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37419 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37419 + idx + 68] = mem[_36731 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37419 + 68] = mem[_37419 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37419 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _40966 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40966] = 30
                                        mem[_40966 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43001 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43001 + idx + 68] = mem[_40966 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43001 + 68] = mem[_43001 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43001 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46968 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46968] = 30
                                        mem[_46968 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49446 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49446 + idx + 68] = mem[_46968 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49446 + 68] = mem[_49446 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49446 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _59571 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59571] = 30
                                        mem[_59571 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61207 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61207 + idx + 68] = mem[_59571 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61207 + 68] = mem[_61207 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61207 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37418 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37418] = 30
                                    mem[_37418 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38474 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38474 + idx + 68] = mem[_37418 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38474 + 68] = mem[_38474 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38474 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _43000 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43000] = 30
                                    mem[_43000 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _45306 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45306 + idx + 68] = mem[_43000 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45306 + 68] = mem[_45306 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45306 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _49443 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49443] = 30
                                    mem[_49443 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _51641 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51641 + idx + 68] = mem[_49443 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51641 + 68] = mem[_51641 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51641 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _61206 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_61206] = 30
                                    mem[_61206 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _62490 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_62490 + idx + 68] = mem[_61206 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_62490 + 68] = mem[_62490 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _62490 + -mem[64] + 100
                                _33184 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33184] = 26
                                mem[_33184 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34147 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34147] = 26
                                    mem[_34147 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36723 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36723] = 30
                                            mem[_36723 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40953 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40953] = 30
                                            mem[_40953 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46953 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46953] = 30
                                            mem[_46953 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59561 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59561] = 30
                                            mem[_59561 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37411 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37411] = 30
                                            mem[_37411 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _42986 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42986] = 30
                                            mem[_42986 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49425 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49425] = 30
                                            mem[_49425 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _61194 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61194] = 30
                                            mem[_61194 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37410 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37410] = 30
                                            mem[_37410 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _42985 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42985] = 30
                                            mem[_42985 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49422 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49422] = 30
                                            mem[_49422 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _61193 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61193] = 30
                                            mem[_61193 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38462 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38462] = 30
                                            mem[_38462 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _45291 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45291] = 30
                                            mem[_45291 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _51620 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51620] = 30
                                            mem[_51620 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _62473 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_62473] = 30
                                            mem[_62473 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34146 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34146] = 26
                                    mem[_34146 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36722 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36722] = 30
                                            mem[_36722 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _40948 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40948] = 30
                                            mem[_40948 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46950 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46950] = 30
                                            mem[_46950 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59558 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59558] = 30
                                            mem[_59558 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37409 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37409] = 30
                                            mem[_37409 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _42979 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42979] = 30
                                            mem[_42979 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49416 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49416] = 30
                                            mem[_49416 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _61188 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61188] = 30
                                            mem[_61188 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37408] = 30
                                            mem[_37408 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _42978 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42978] = 30
                                            mem[_42978 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49413 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49413] = 30
                                            mem[_49413 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _61187 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61187] = 30
                                            mem[_61187 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38455 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38455] = 30
                                            mem[_38455 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _45281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45281] = 30
                                            mem[_45281 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _51608 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51608] = 30
                                            mem[_51608 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _62465 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_62465] = 30
                                            mem[_62465 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
        else:
            mem[0] = arg1
            mem[32] = 4
            if stor4[address(arg1)]:
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                if not arg2 / 100:
                    mem[64] = 224
                    mem[160] = 30
                    mem[192] = 'SafeMath: subtraction overflow'
                    if 0 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow'
                    idx = 0
                    s = 10^18
                    t = stor6
                    while idx < stor5.length:
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        if stor1[stor5[idx]] > t:
                            _33717 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33717] = 26
                            mem[_33717 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _36139 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36139] = 30
                                mem[_36139 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38151 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38151] = 30
                                mem[_38151 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39644 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39644 + idx + 68] = mem[_38151 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39644 + 68] = mem[_39644 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39644 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _50959 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50959] = 30
                                mem[_50959 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53028 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53028 + idx + 68] = mem[_50959 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53028 + 68] = mem[_53028 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53028 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36369 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36369] = 30
                            mem[_36369 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                _36888 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36888 + idx + 68] = mem[_36369 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36888 + 68] = mem[_36888 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36888 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39643 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39643] = 30
                            mem[_39643 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _41364 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41364 + idx + 68] = mem[_39643 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41364 + 68] = mem[_41364 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41364 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _53027 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53027] = 30
                            mem[_53027 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _54986 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_54986 + idx + 68] = mem[_53027 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_54986 + 68] = mem[_54986 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _54986 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        if stor2[stor5[idx]] <= s:
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            _33845 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33845] = 30
                            mem[_33845 + 32] = 'SafeMath: subtraction overflow'
                            if stor1[stor5[idx]] > t:
                                _34027 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_34027 + idx + 68] = mem[_33845 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_34027 + 68] = mem[_34027 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _34027 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            _34804 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34804] = 30
                            mem[_34804 + 32] = 'SafeMath: subtraction overflow'
                            if stor2[stor5[idx]] <= s:
                                idx = idx + 1
                                s = s - stor2[stor5[idx]]
                                t = t - stor1[stor5[idx]]
                                continue 
                            _35079 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_35079 + idx + 68] = mem[_34804 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_35079 + 68] = mem[_35079 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _35079 + -mem[64] + 100
                        _33907 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33907] = 26
                        mem[_33907 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _36370 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36370] = 30
                            mem[_36370 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39649 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39649] = 30
                            mem[_39649 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _41371 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41371 + idx + 68] = mem[_39649 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41371 + 68] = mem[_41371 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41371 + -mem[64] + 100
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _53032 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53032] = 30
                            mem[_53032 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _54991 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_54991 + idx + 68] = mem[_53032 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_54991 + 68] = mem[_54991 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _54991 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _36891 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_36891] = 30
                        mem[_36891 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 10^18:
                            _37645 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37645 + idx + 68] = mem[_36891 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37645 + 68] = mem[_37645 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37645 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _41370 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_41370] = 30
                        mem[_41370 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                            _43518 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_43518 + idx + 68] = mem[_41370 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_43518 + 68] = mem[_43518 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _43518 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor2[address(arg1)] += arg2
                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                        _54990 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_54990] = 30
                        mem[_54990 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _57010 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57010 + idx + 68] = mem[_54990 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57010 + 68] = mem[_57010 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57010 + -mem[64] + 100
                    _33279 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_33279] = 26
                    mem[_33279 + 32] = 'SafeMath: division by zero'
                    if t < stor6 / 10^18:
                        _34185 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34185] = 26
                        mem[_34185 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _36887 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36887] = 30
                            mem[_36887 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41363 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41363] = 30
                            mem[_41363 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _54985 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_54985] = 30
                            mem[_54985 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if 0 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                        else:
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37642 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37642] = 30
                            mem[_37642 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _43508 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_43508] = 30
                            mem[_43508 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _57002 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_57002] = 30
                            mem[_57002 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                    else:
                        _34184 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34184] = 26
                        mem[_34184 + 32] = 'SafeMath: division by zero'
                        if s <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require s
                        if not arg2:
                            _36886 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36886] = 30
                            mem[_36886 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41360 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41360] = 30
                            mem[_41360 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _54983 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_54983] = 30
                            mem[_54983 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if 0 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                        else:
                            require arg2
                            if arg2 * t / s / arg2 != t / s:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37641 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37641] = 30
                            mem[_37641 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _43504 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_43504] = 30
                            mem[_43504 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * t / s
                            _56998 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_56998] = 30
                            mem[_56998 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if arg2 * t / s > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                else:
                    require arg2 / 100
                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    mem[64] = 224
                    mem[160] = 30
                    mem[192] = 'SafeMath: subtraction overflow'
                    if 3 * arg2 / 100 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow'
                    idx = 0
                    s = 10^18
                    t = stor6
                    while idx < stor5.length:
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        if stor1[stor5[idx]] > t:
                            _33714 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33714] = 26
                            mem[_33714 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36138 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36138] = 30
                                    mem[_36138 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38148 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38148] = 30
                                    mem[_38148 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39635 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39635 + idx + 68] = mem[_38148 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39635 + 68] = mem[_39635 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39635 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _50947 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50947] = 30
                                    mem[_50947 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53019 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53019 + idx + 68] = mem[_50947 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53019 + 68] = mem[_53019 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53019 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36367 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36367] = 30
                                mem[_36367 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                    _36881 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36881 + idx + 68] = mem[_36367 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36881 + 68] = mem[_36881 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36881 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39634 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39634] = 30
                                mem[_39634 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41345 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41345 + idx + 68] = mem[_39634 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41345 + 68] = mem[_41345 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41345 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                _53018 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53018] = 30
                                mem[_53018 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _54972 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54972 + idx + 68] = mem[_53018 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54972 + 68] = mem[_54972 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54972 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _36366 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36366] = 30
                                mem[_36366 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _36878 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36878 + idx + 68] = mem[_36366 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36878 + 68] = mem[_36878 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36878 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39633 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39633] = 30
                                mem[_39633 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _41342 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41342 + idx + 68] = mem[_39633 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41342 + 68] = mem[_41342 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41342 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _53017 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53017] = 30
                                mem[_53017 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _54969 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54969 + idx + 68] = mem[_53017 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54969 + 68] = mem[_54969 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54969 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36877 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36877] = 30
                            mem[_36877 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                _37628 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37628 + idx + 68] = mem[_36877 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37628 + 68] = mem[_37628 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37628 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41341 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41341] = 30
                            mem[_41341 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _43482 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43482 + idx + 68] = mem[_41341 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43482 + 68] = mem[_43482 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43482 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                            _54968 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_54968] = 30
                            mem[_54968 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _56982 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_56982 + idx + 68] = mem[_54968 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_56982 + 68] = mem[_56982 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _56982 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        if stor2[stor5[idx]] <= s:
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            _33844 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33844] = 30
                            mem[_33844 + 32] = 'SafeMath: subtraction overflow'
                            if stor1[stor5[idx]] > t:
                                _34024 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_34024 + idx + 68] = mem[_33844 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_34024 + 68] = mem[_34024 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _34024 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            _34802 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34802] = 30
                            mem[_34802 + 32] = 'SafeMath: subtraction overflow'
                            if stor2[stor5[idx]] <= s:
                                idx = idx + 1
                                s = s - stor2[stor5[idx]]
                                t = t - stor1[stor5[idx]]
                                continue 
                            _35074 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_35074 + idx + 68] = mem[_34802 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_35074 + 68] = mem[_35074 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _35074 + -mem[64] + 100
                        _33906 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33906] = 26
                        mem[_33906 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 3 * arg2 / 100:
                                _36368 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36368] = 30
                                mem[_36368 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39642 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39642] = 30
                                mem[_39642 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41355 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41355 + idx + 68] = mem[_39642 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41355 + 68] = mem[_41355 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41355 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _53024 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53024] = 30
                                mem[_53024 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _54979 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54979 + idx + 68] = mem[_53024 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54979 + 68] = mem[_54979 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54979 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36885 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36885] = 30
                            mem[_36885 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                _37638 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37638 + idx + 68] = mem[_36885 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37638 + 68] = mem[_37638 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37638 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41354 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41354] = 30
                            mem[_41354 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _43498 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43498 + idx + 68] = mem[_41354 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43498 + 68] = mem[_43498 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43498 + -mem[64] + 100
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                            _54978 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_54978] = 30
                            mem[_54978 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _56994 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_56994 + idx + 68] = mem[_54978 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_56994 + 68] = mem[_56994 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _56994 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            _36884 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36884] = 30
                            mem[_36884 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                _37635 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37635 + idx + 68] = mem[_36884 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37635 + 68] = mem[_37635 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37635 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41353 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41353] = 30
                            mem[_41353 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _43495 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43495 + idx + 68] = mem[_41353 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43495 + 68] = mem[_43495 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43495 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _54977 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_54977] = 30
                            mem[_54977 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _56991 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_56991 + idx + 68] = mem[_54977 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_56991 + 68] = mem[_56991 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _56991 + -mem[64] + 100
                        require 3 * arg2 / 100
                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37634 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37634] = 30
                        mem[_37634 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                            _38789 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_38789 + idx + 68] = mem[_37634 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_38789 + 68] = mem[_38789 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _38789 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _43494 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_43494] = 30
                        mem[_43494 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                            _45838 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_45838 + idx + 68] = mem[_43494 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_45838 + 68] = mem[_45838 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _45838 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                        _56990 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_56990] = 30
                        mem[_56990 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _58937 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_58937 + idx + 68] = mem[_56990 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_58937 + 68] = mem[_58937 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _58937 + -mem[64] + 100
                    _33274 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_33274] = 26
                    mem[_33274 + 32] = 'SafeMath: division by zero'
                    if t < stor6 / 10^18:
                        _34183 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34183] = 26
                        mem[_34183 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 3 * arg2 / 100:
                                _36876 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36876] = 30
                                mem[_36876 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41340 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41340] = 30
                                mem[_41340 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _54967 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_54967] = 30
                                mem[_54967 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37627 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37627] = 30
                                mem[_37627 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43478 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43478] = 30
                                mem[_43478 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                _56978 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_56978] = 30
                                mem[_56978 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                        else:
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _37626 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37626] = 30
                                mem[_37626 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43477 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43477] = 30
                                mem[_43477 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _56977 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_56977] = 30
                                mem[_56977 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _38777 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38777] = 30
                                mem[_38777 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _45819 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_45819] = 30
                                mem[_45819 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _58920 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_58920] = 30
                                mem[_58920 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                    else:
                        _34182 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34182] = 26
                        mem[_34182 + 32] = 'SafeMath: division by zero'
                        if s <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require s
                        if not arg2:
                            if not 3 * arg2 / 100:
                                _36875 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36875] = 30
                                mem[_36875 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41335 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41335] = 30
                                mem[_41335 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _54964 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_54964] = 30
                                mem[_54964 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37625 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37625] = 30
                                mem[_37625 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * t / s > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43471 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43471] = 30
                                mem[_43471 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                _56972 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_56972] = 30
                                mem[_56972 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * t / s > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                        else:
                            require arg2
                            if arg2 * t / s / arg2 != t / s:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _37624 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37624] = 30
                                mem[_37624 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43470 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43470] = 30
                                mem[_43470 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * t / s
                                _56971 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_56971] = 30
                                mem[_56971 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if arg2 * t / s > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _38770 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38770] = 30
                                mem[_38770 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _45809 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_45809] = 30
                                mem[_45809 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                _58912 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_58912] = 30
                                mem[_58912 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * t / s > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
            else:
                if stor4[address(msg.sender)]:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33675 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33675] = 26
                                    mem[_33675 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36125] = 30
                                        mem[_36125 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38095 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38095] = 30
                                        mem[_38095 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39511 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39511 + idx + 68] = mem[_38095 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39511 + 68] = mem[_39511 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39511 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47037 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47037] = 30
                                        mem[_47037 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49540 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49540 + idx + 68] = mem[_47037 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49540 + 68] = mem[_49540 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49540 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36334 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36334] = 30
                                    mem[_36334 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36769 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36769 + idx + 68] = mem[_36334 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36769 + 68] = mem[_36769 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36769 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39510 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39510] = 30
                                    mem[_39510 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _41063 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41063 + idx + 68] = mem[_39510 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41063 + 68] = mem[_41063 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41063 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49539 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49539] = 30
                                    mem[_49539 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51738 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51738 + idx + 68] = mem[_49539 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51738 + 68] = mem[_51738 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51738 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33831 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33831] = 30
                                    mem[_33831 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33985 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33985 + idx + 68] = mem[_33831 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33985 + 68] = mem[_33985 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33985 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34776 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34776] = 30
                                    mem[_34776 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35009 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35009 + idx + 68] = mem[_34776 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35009 + 68] = mem[_35009 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35009 + -mem[64] + 100
                                _33893 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33893] = 26
                                mem[_33893 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36335 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36335] = 30
                                    mem[_36335 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39516 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39516] = 30
                                    mem[_39516 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41070 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41070 + idx + 68] = mem[_39516 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41070 + 68] = mem[_41070 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41070 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49544 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49544] = 30
                                    mem[_49544 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _51743 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51743 + idx + 68] = mem[_49544 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51743 + 68] = mem[_51743 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51743 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36772 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36772] = 30
                                mem[_36772 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37477 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37477 + idx + 68] = mem[_36772 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37477 + 68] = mem[_37477 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37477 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41069 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41069] = 30
                                mem[_41069 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _43134 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43134 + idx + 68] = mem[_41069 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43134 + 68] = mem[_43134 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43134 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _51742 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51742] = 30
                                mem[_51742 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53677 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53677 + idx + 68] = mem[_51742 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53677 + 68] = mem[_53677 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53677 + -mem[64] + 100
                            _33209 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33209] = 26
                            mem[_33209 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34157 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34157] = 26
                                mem[_34157 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36768 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36768] = 30
                                    mem[_36768 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41062 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41062] = 30
                                    mem[_41062 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51737 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51737] = 30
                                    mem[_51737 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37474 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37474] = 30
                                    mem[_37474 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43124 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43124] = 30
                                    mem[_43124 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53669 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53669] = 30
                                    mem[_53669 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34156 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34156] = 26
                                mem[_34156 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _36767 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36767] = 30
                                    mem[_36767 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41059 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41059] = 30
                                    mem[_41059 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51735 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51735] = 30
                                    mem[_51735 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37473 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37473] = 30
                                    mem[_37473 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43120 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43120] = 30
                                    mem[_43120 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _53665 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53665] = 30
                                    mem[_53665 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33672 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33672] = 26
                                    mem[_33672 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36124 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36124] = 30
                                            mem[_36124 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38092 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38092] = 30
                                            mem[_38092 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39502 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39502 + idx + 68] = mem[_38092 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39502 + 68] = mem[_39502 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39502 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47026 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47026] = 30
                                            mem[_47026 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49525 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49525 + idx + 68] = mem[_47026 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49525 + 68] = mem[_49525 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49525 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36332 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36332] = 30
                                        mem[_36332 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _36762 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36762 + idx + 68] = mem[_36332 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36762 + 68] = mem[_36762 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36762 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39501 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39501] = 30
                                        mem[_39501 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41044 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41044 + idx + 68] = mem[_39501 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41044 + 68] = mem[_41044 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41044 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _49524 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49524] = 30
                                        mem[_49524 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51724 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51724 + idx + 68] = mem[_49524 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51724 + 68] = mem[_51724 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51724 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36331 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36331] = 30
                                        mem[_36331 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36759 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36759 + idx + 68] = mem[_36331 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36759 + 68] = mem[_36759 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36759 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39500 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39500] = 30
                                        mem[_39500 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41041 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41041 + idx + 68] = mem[_39500 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41041 + 68] = mem[_41041 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41041 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49523 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49523] = 30
                                        mem[_49523 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51721 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51721 + idx + 68] = mem[_49523 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51721 + 68] = mem[_51721 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51721 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36758 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36758] = 30
                                    mem[_36758 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37460 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37460 + idx + 68] = mem[_36758 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37460 + 68] = mem[_37460 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37460 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41040 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41040] = 30
                                    mem[_41040 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43098 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43098 + idx + 68] = mem[_41040 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43098 + 68] = mem[_43098 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43098 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _51720 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51720] = 30
                                    mem[_51720 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53649 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53649 + idx + 68] = mem[_51720 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53649 + 68] = mem[_53649 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53649 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33830 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33830] = 30
                                    mem[_33830 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _33982 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33982 + idx + 68] = mem[_33830 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33982 + 68] = mem[_33982 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33982 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34774 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34774] = 30
                                    mem[_34774 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35004 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35004 + idx + 68] = mem[_34774 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35004 + 68] = mem[_35004 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35004 + -mem[64] + 100
                                _33892 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33892] = 26
                                mem[_33892 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36333 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36333] = 30
                                        mem[_36333 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39509 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39509] = 30
                                        mem[_39509 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41054 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41054 + idx + 68] = mem[_39509 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41054 + 68] = mem[_41054 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41054 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49532 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49532] = 30
                                        mem[_49532 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51731 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51731 + idx + 68] = mem[_49532 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51731 + 68] = mem[_51731 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51731 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36766 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36766] = 30
                                    mem[_36766 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37470 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37470 + idx + 68] = mem[_36766 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37470 + 68] = mem[_37470 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37470 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41053 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41053] = 30
                                    mem[_41053 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _43114 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43114 + idx + 68] = mem[_41053 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43114 + 68] = mem[_43114 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43114 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _51730 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51730] = 30
                                    mem[_51730 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53661 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53661 + idx + 68] = mem[_51730 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53661 + 68] = mem[_53661 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53661 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36765 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36765] = 30
                                    mem[_36765 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37467 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37467 + idx + 68] = mem[_36765 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37467 + 68] = mem[_37467 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37467 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41052 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41052] = 30
                                    mem[_41052 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43111 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43111 + idx + 68] = mem[_41052 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43111 + 68] = mem[_43111 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43111 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _51729 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51729] = 30
                                    mem[_51729 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53658 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53658 + idx + 68] = mem[_51729 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53658 + 68] = mem[_53658 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53658 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37466 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37466] = 30
                                mem[_37466 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _38544 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38544 + idx + 68] = mem[_37466 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38544 + 68] = mem[_38544 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38544 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43110 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43110] = 30
                                mem[_43110 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _45424 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_45424 + idx + 68] = mem[_43110 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_45424 + 68] = mem[_45424 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _45424 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _53657 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53657] = 30
                                mem[_53657 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55662 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55662 + idx + 68] = mem[_53657 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55662 + 68] = mem[_55662 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55662 + -mem[64] + 100
                            _33204 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33204] = 26
                            mem[_33204 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34155 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34155] = 26
                                mem[_34155 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36757 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36757] = 30
                                        mem[_36757 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41039 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41039] = 30
                                        mem[_41039 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51719 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51719] = 30
                                        mem[_51719 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37459 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37459] = 30
                                        mem[_37459 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43094 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43094] = 30
                                        mem[_43094 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _53645 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53645] = 30
                                        mem[_53645 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37458 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37458] = 30
                                        mem[_37458 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43093 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43093] = 30
                                        mem[_43093 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53644 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53644] = 30
                                        mem[_53644 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38532 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38532] = 30
                                        mem[_38532 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45405 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45405] = 30
                                        mem[_45405 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _55645 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55645] = 30
                                        mem[_55645 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34154 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34154] = 26
                                mem[_34154 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36756 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36756] = 30
                                        mem[_36756 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41034 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41034] = 30
                                        mem[_41034 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51714 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51714] = 30
                                        mem[_51714 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37457 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37457] = 30
                                        mem[_37457 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43087 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43087] = 30
                                        mem[_43087 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _53639 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53639] = 30
                                        mem[_53639 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37456 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37456] = 30
                                        mem[_37456 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43086 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43086] = 30
                                        mem[_43086 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53638 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53638] = 30
                                        mem[_53638 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38525 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38525] = 30
                                        mem[_38525 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45395 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45395] = 30
                                        mem[_45395 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _55637 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55637] = 30
                                        mem[_55637 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not stor4[address(arg1)]:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33681 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33681] = 26
                                        mem[_33681 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36127 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36127] = 30
                                            mem[_36127 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38103 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38103] = 30
                                            mem[_38103 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39530 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39530 + idx + 68] = mem[_38103 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39530 + 68] = mem[_39530 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39530 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47060 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47060] = 30
                                            mem[_47060 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49573 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49573 + idx + 68] = mem[_47060 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49573 + 68] = mem[_49573 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49573 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36339 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36339] = 30
                                        mem[_36339 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36786 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36786 + idx + 68] = mem[_36339 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36786 + 68] = mem[_36786 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36786 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39529 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39529] = 30
                                        mem[_39529 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41106 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41106 + idx + 68] = mem[_39529 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41106 + 68] = mem[_41106 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41106 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49572 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49572] = 30
                                        mem[_49572 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51774 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51774 + idx + 68] = mem[_49572 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51774 + 68] = mem[_51774 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51774 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33833 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33833] = 30
                                        mem[_33833 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33991 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33991 + idx + 68] = mem[_33833 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33991 + 68] = mem[_33991 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33991 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34780 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34780] = 30
                                        mem[_34780 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35019 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35019 + idx + 68] = mem[_34780 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35019 + 68] = mem[_35019 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35019 + -mem[64] + 100
                                    _33895 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33895] = 26
                                    mem[_33895 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36340 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36340] = 30
                                        mem[_36340 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39535 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39535] = 30
                                        mem[_39535 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41113 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41113 + idx + 68] = mem[_39535 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41113 + 68] = mem[_41113 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41113 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49577 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49577] = 30
                                        mem[_49577 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51779 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51779 + idx + 68] = mem[_49577 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51779 + 68] = mem[_51779 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51779 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36789 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36789] = 30
                                    mem[_36789 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37501 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37501 + idx + 68] = mem[_36789 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37501 + 68] = mem[_37501 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37501 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41112 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41112] = 30
                                    mem[_41112 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43190 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43190 + idx + 68] = mem[_41112 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43190 + 68] = mem[_43190 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43190 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _51778 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51778] = 30
                                    mem[_51778 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53721 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53721 + idx + 68] = mem[_51778 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53721 + 68] = mem[_53721 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53721 + -mem[64] + 100
                                _33219 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33219] = 26
                                mem[_33219 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34161 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34161] = 26
                                    mem[_34161 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36785 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36785] = 30
                                        mem[_36785 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41105 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41105] = 30
                                        mem[_41105 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51773 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51773] = 30
                                        mem[_51773 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37498 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37498] = 30
                                        mem[_37498 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43180 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43180] = 30
                                        mem[_43180 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53713 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53713] = 30
                                        mem[_53713 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34160 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34160] = 26
                                    mem[_34160 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36784 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36784] = 30
                                        mem[_36784 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41102 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41102] = 30
                                        mem[_41102 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51771 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51771] = 30
                                        mem[_51771 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37497 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37497] = 30
                                        mem[_37497 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43176 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43176] = 30
                                        mem[_43176 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53709 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53709] = 30
                                        mem[_53709 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33678 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33678] = 26
                                        mem[_33678 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36126 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36126] = 30
                                                mem[_36126 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38100 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38100] = 30
                                                mem[_38100 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39521 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39521 + idx + 68] = mem[_38100 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39521 + 68] = mem[_39521 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39521 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47049 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47049] = 30
                                                mem[_47049 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _49558 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49558 + idx + 68] = mem[_47049 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49558 + 68] = mem[_49558 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49558 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36337 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36337] = 30
                                            mem[_36337 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36779 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36779 + idx + 68] = mem[_36337 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36779 + 68] = mem[_36779 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36779 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39520 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39520] = 30
                                            mem[_39520 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41087 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41087 + idx + 68] = mem[_39520 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41087 + 68] = mem[_41087 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41087 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _49557 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49557] = 30
                                            mem[_49557 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51760 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51760 + idx + 68] = mem[_49557 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51760 + 68] = mem[_51760 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51760 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36336 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36336] = 30
                                            mem[_36336 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36776 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36776 + idx + 68] = mem[_36336 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36776 + 68] = mem[_36776 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36776 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39519 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39519] = 30
                                            mem[_39519 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41084 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41084 + idx + 68] = mem[_39519 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41084 + 68] = mem[_41084 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41084 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _49556 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49556] = 30
                                            mem[_49556 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51757 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51757 + idx + 68] = mem[_49556 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51757 + 68] = mem[_51757 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51757 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36775 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36775] = 30
                                        mem[_36775 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37484 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37484 + idx + 68] = mem[_36775 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37484 + 68] = mem[_37484 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37484 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41083 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41083] = 30
                                        mem[_41083 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43154 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43154 + idx + 68] = mem[_41083 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43154 + 68] = mem[_43154 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43154 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _51756 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51756] = 30
                                        mem[_51756 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53693 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53693 + idx + 68] = mem[_51756 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53693 + 68] = mem[_53693 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53693 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33832 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33832] = 30
                                        mem[_33832 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33988 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33988 + idx + 68] = mem[_33832 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33988 + 68] = mem[_33988 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33988 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34778 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34778] = 30
                                        mem[_34778 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35014 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35014 + idx + 68] = mem[_34778 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35014 + 68] = mem[_35014 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35014 + -mem[64] + 100
                                    _33894 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33894] = 26
                                    mem[_33894 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36338 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36338] = 30
                                            mem[_36338 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39528 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39528] = 30
                                            mem[_39528 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41097 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41097 + idx + 68] = mem[_39528 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41097 + 68] = mem[_41097 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41097 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _49565 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49565] = 30
                                            mem[_49565 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51767 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51767 + idx + 68] = mem[_49565 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51767 + 68] = mem[_51767 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51767 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36783 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36783] = 30
                                        mem[_36783 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37494 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37494 + idx + 68] = mem[_36783 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37494 + 68] = mem[_37494 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37494 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41096 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41096] = 30
                                        mem[_41096 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _43170 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43170 + idx + 68] = mem[_41096 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43170 + 68] = mem[_43170 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43170 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _51766 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51766] = 30
                                        mem[_51766 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53705 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53705 + idx + 68] = mem[_51766 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53705 + 68] = mem[_53705 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53705 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36782 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36782] = 30
                                        mem[_36782 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37491 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37491 + idx + 68] = mem[_36782 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37491 + 68] = mem[_37491 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37491 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41095 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41095] = 30
                                        mem[_41095 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43167 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43167 + idx + 68] = mem[_41095 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43167 + 68] = mem[_43167 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43167 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _51765 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51765] = 30
                                        mem[_51765 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53702 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53702 + idx + 68] = mem[_51765 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53702 + 68] = mem[_53702 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53702 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37490 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37490] = 30
                                    mem[_37490 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38579 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38579 + idx + 68] = mem[_37490 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38579 + 68] = mem[_38579 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38579 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43166 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43166] = 30
                                    mem[_43166 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _45486 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45486 + idx + 68] = mem[_43166 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45486 + 68] = mem[_45486 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45486 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _53701 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53701] = 30
                                    mem[_53701 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _55712 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55712 + idx + 68] = mem[_53701 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55712 + 68] = mem[_55712 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55712 + -mem[64] + 100
                                _33214 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33214] = 26
                                mem[_33214 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34159 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34159] = 26
                                    mem[_34159 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36774 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36774] = 30
                                            mem[_36774 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41082 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41082] = 30
                                            mem[_41082 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51755 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51755] = 30
                                            mem[_51755 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37483 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37483] = 30
                                            mem[_37483 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43150 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43150] = 30
                                            mem[_43150 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _53689 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53689] = 30
                                            mem[_53689 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37482 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37482] = 30
                                            mem[_37482 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43149 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43149] = 30
                                            mem[_43149 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _53688 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53688] = 30
                                            mem[_53688 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38567 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38567] = 30
                                            mem[_38567 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45467 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45467] = 30
                                            mem[_45467 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _55695 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55695] = 30
                                            mem[_55695 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34158 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34158] = 26
                                    mem[_34158 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36773 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36773] = 30
                                            mem[_36773 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41077 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41077] = 30
                                            mem[_41077 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51750 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51750] = 30
                                            mem[_51750 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37481 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37481] = 30
                                            mem[_37481 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43143 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43143] = 30
                                            mem[_43143 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _53683 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53683] = 30
                                            mem[_53683 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37480 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37480] = 30
                                            mem[_37480 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43142 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43142] = 30
                                            mem[_43142 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _53682 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53682] = 30
                                            mem[_53682 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38560 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38560] = 30
                                            mem[_38560 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45457 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45457] = 30
                                            mem[_45457 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _55687 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55687] = 30
                                            mem[_55687 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33687 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33687] = 26
                                        mem[_33687 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36129 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36129] = 30
                                            mem[_36129 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38111 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38111] = 30
                                            mem[_38111 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39549 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39549 + idx + 68] = mem[_38111 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39549 + 68] = mem[_39549 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39549 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42265 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42265] = 30
                                            mem[_42265 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _44581 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44581 + idx + 68] = mem[_42265 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44581 + 68] = mem[_44581 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44581 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _55769 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55769] = 30
                                            mem[_55769 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _57829 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57829 + idx + 68] = mem[_55769 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57829 + 68] = mem[_57829 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57829 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36344 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36344] = 30
                                        mem[_36344 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36803 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36803 + idx + 68] = mem[_36344 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36803 + 68] = mem[_36803 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36803 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39548 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39548] = 30
                                        mem[_39548 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41149 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41149 + idx + 68] = mem[_39548 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41149 + 68] = mem[_41149 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41149 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44578 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44578] = 30
                                        mem[_44578 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _47097 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47097 + idx + 68] = mem[_44578 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47097 + 68] = mem[_47097 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47097 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _57828 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57828] = 30
                                        mem[_57828 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59729 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59729 + idx + 68] = mem[_57828 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59729 + 68] = mem[_59729 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59729 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33835 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33835] = 30
                                        mem[_33835 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33997 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33997 + idx + 68] = mem[_33835 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33997 + 68] = mem[_33997 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33997 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34784 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34784] = 30
                                        mem[_34784 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35029 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35029 + idx + 68] = mem[_34784 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35029 + 68] = mem[_35029 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35029 + -mem[64] + 100
                                    _33897 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33897] = 26
                                    mem[_33897 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36345 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36345] = 30
                                        mem[_36345 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39554 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39554] = 30
                                        mem[_39554 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41156 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41156 + idx + 68] = mem[_39554 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41156 + 68] = mem[_41156 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41156 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44584 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44584] = 30
                                        mem[_44584 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _47106 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47106 + idx + 68] = mem[_44584 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47106 + 68] = mem[_47106 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47106 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _57833 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57833] = 30
                                        mem[_57833 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _59734 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59734 + idx + 68] = mem[_57833 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59734 + 68] = mem[_59734 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59734 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36806 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36806] = 30
                                    mem[_36806 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37525 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37525 + idx + 68] = mem[_36806 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37525 + 68] = mem[_37525 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37525 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _41155 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41155] = 30
                                    mem[_41155 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _43242 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43242 + idx + 68] = mem[_41155 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43242 + 68] = mem[_43242 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43242 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _47103 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47103] = 30
                                    mem[_47103 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _49638 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49638 + idx + 68] = mem[_47103 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49638 + 68] = mem[_49638 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49638 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _59733 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59733] = 30
                                    mem[_59733 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _61330 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_61330 + idx + 68] = mem[_59733 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_61330 + 68] = mem[_61330 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _61330 + -mem[64] + 100
                                _33229 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33229] = 26
                                mem[_33229 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34165 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34165] = 26
                                    mem[_34165 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36802 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36802] = 30
                                        mem[_36802 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41148 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41148] = 30
                                        mem[_41148 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47094 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47094] = 30
                                        mem[_47094 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _59728 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59728] = 30
                                        mem[_59728 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37522 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37522] = 30
                                        mem[_37522 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43234 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43234] = 30
                                        mem[_43234 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49626 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49626] = 30
                                        mem[_49626 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _61322 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61322] = 30
                                        mem[_61322 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34164 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34164] = 26
                                    mem[_34164 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36801 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36801] = 30
                                        mem[_36801 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41145 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41145] = 30
                                        mem[_41145 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47091 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47091] = 30
                                        mem[_47091 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _59726 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59726] = 30
                                        mem[_59726 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37521 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37521] = 30
                                        mem[_37521 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43230 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43230] = 30
                                        mem[_43230 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49620 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49620] = 30
                                        mem[_49620 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _61318 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61318] = 30
                                        mem[_61318 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33684 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33684] = 26
                                        mem[_33684 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36128 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36128] = 30
                                                mem[_36128 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38108 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38108] = 30
                                                mem[_38108 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39540 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39540 + idx + 68] = mem[_38108 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39540 + 68] = mem[_39540 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39540 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _42256 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_42256] = 30
                                                mem[_42256 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44572 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44572 + idx + 68] = mem[_42256 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44572 + 68] = mem[_44572 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44572 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _55757 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_55757] = 30
                                                mem[_55757 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _57820 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_57820 + idx + 68] = mem[_55757 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_57820 + 68] = mem[_57820 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _57820 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36342 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36342] = 30
                                            mem[_36342 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36796 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36796 + idx + 68] = mem[_36342 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36796 + 68] = mem[_36796 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36796 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39539 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39539] = 30
                                            mem[_39539 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41130 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41130 + idx + 68] = mem[_39539 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41130 + 68] = mem[_41130 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41130 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44569 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44569] = 30
                                            mem[_44569 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47076 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47076 + idx + 68] = mem[_44569 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47076 + 68] = mem[_47076 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47076 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _57819 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57819] = 30
                                            mem[_57819 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59715 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59715 + idx + 68] = mem[_57819 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59715 + 68] = mem[_59715 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59715 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36341 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36341] = 30
                                            mem[_36341 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36793 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36793 + idx + 68] = mem[_36341 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36793 + 68] = mem[_36793 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36793 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39538 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39538] = 30
                                            mem[_39538 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41127 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41127 + idx + 68] = mem[_39538 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41127 + 68] = mem[_41127 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41127 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44566 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44566] = 30
                                            mem[_44566 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _47073 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47073 + idx + 68] = mem[_44566 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47073 + 68] = mem[_47073 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47073 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _57818 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57818] = 30
                                            mem[_57818 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59712 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59712 + idx + 68] = mem[_57818 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59712 + 68] = mem[_59712 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59712 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36792 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36792] = 30
                                        mem[_36792 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37508 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37508 + idx + 68] = mem[_36792 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37508 + 68] = mem[_37508 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37508 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41126 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41126] = 30
                                        mem[_41126 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43210 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43210 + idx + 68] = mem[_41126 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43210 + 68] = mem[_43210 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43210 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47070 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47070] = 30
                                        mem[_47070 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49596 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49596 + idx + 68] = mem[_47070 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49596 + 68] = mem[_49596 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49596 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _59711 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59711] = 30
                                        mem[_59711 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61302 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61302 + idx + 68] = mem[_59711 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61302 + 68] = mem[_61302 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61302 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33834 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33834] = 30
                                        mem[_33834 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _33994 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33994 + idx + 68] = mem[_33834 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33994 + 68] = mem[_33994 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33994 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34782 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34782] = 30
                                        mem[_34782 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35024 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35024 + idx + 68] = mem[_34782 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35024 + 68] = mem[_35024 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35024 + -mem[64] + 100
                                    _33896 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33896] = 26
                                    mem[_33896 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36343 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36343] = 30
                                            mem[_36343 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39547 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39547] = 30
                                            mem[_39547 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41140 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41140 + idx + 68] = mem[_39547 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41140 + 68] = mem[_41140 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41140 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44575 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44575] = 30
                                            mem[_44575 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47088 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47088 + idx + 68] = mem[_44575 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47088 + 68] = mem[_47088 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47088 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _57825 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57825] = 30
                                            mem[_57825 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59722 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59722 + idx + 68] = mem[_57825 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59722 + 68] = mem[_59722 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59722 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36800 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36800] = 30
                                        mem[_36800 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37518 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37518 + idx + 68] = mem[_36800 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37518 + 68] = mem[_37518 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37518 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41139 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41139] = 30
                                        mem[_41139 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43224 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43224 + idx + 68] = mem[_41139 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43224 + 68] = mem[_43224 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43224 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47085 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47085] = 30
                                        mem[_47085 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _49614 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49614 + idx + 68] = mem[_47085 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49614 + 68] = mem[_49614 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49614 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _59721 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59721] = 30
                                        mem[_59721 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61314 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61314 + idx + 68] = mem[_59721 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61314 + 68] = mem[_61314 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61314 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36799 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36799] = 30
                                        mem[_36799 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37515 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37515 + idx + 68] = mem[_36799 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37515 + 68] = mem[_37515 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37515 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41138 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41138] = 30
                                        mem[_41138 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43221 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43221 + idx + 68] = mem[_41138 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43221 + 68] = mem[_43221 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43221 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47082 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47082] = 30
                                        mem[_47082 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49611 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49611 + idx + 68] = mem[_47082 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49611 + 68] = mem[_49611 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49611 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _59720 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59720] = 30
                                        mem[_59720 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61311 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61311 + idx + 68] = mem[_59720 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61311 + 68] = mem[_61311 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61311 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37514 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37514] = 30
                                    mem[_37514 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38614 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38614 + idx + 68] = mem[_37514 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38614 + 68] = mem[_38614 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38614 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _43220 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43220] = 30
                                    mem[_43220 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _45544 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45544 + idx + 68] = mem[_43220 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45544 + 68] = mem[_45544 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45544 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _49608 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49608] = 30
                                    mem[_49608 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _51815 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51815 + idx + 68] = mem[_49608 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51815 + 68] = mem[_51815 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51815 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _61310 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_61310] = 30
                                    mem[_61310 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _62560 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_62560 + idx + 68] = mem[_61310 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_62560 + 68] = mem[_62560 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _62560 + -mem[64] + 100
                                _33224 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33224] = 26
                                mem[_33224 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34163 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34163] = 26
                                    mem[_34163 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36791 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36791] = 30
                                            mem[_36791 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41125 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41125] = 30
                                            mem[_41125 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47067 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47067] = 30
                                            mem[_47067 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59710 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59710] = 30
                                            mem[_59710 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37507 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37507] = 30
                                            mem[_37507 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43206 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43206] = 30
                                            mem[_43206 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49590 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49590] = 30
                                            mem[_49590 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _61298 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61298] = 30
                                            mem[_61298 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37506 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37506] = 30
                                            mem[_37506 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43205 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43205] = 30
                                            mem[_43205 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49587 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49587] = 30
                                            mem[_49587 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _61297 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61297] = 30
                                            mem[_61297 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38602 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38602] = 30
                                            mem[_38602 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _45529 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45529] = 30
                                            mem[_45529 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _51794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51794] = 30
                                            mem[_51794 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _62543 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_62543] = 30
                                            mem[_62543 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34162 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34162] = 26
                                    mem[_34162 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36790 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36790] = 30
                                            mem[_36790 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41120 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41120] = 30
                                            mem[_41120 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47064 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47064] = 30
                                            mem[_47064 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59707 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59707] = 30
                                            mem[_59707 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37505 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37505] = 30
                                            mem[_37505 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43199 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43199] = 30
                                            mem[_43199 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49581 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49581] = 30
                                            mem[_49581 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _61292 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61292] = 30
                                            mem[_61292 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37504 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37504] = 30
                                            mem[_37504 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43198 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43198] = 30
                                            mem[_43198 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49578 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49578] = 30
                                            mem[_49578 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _61291 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61291] = 30
                                            mem[_61291 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38595 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38595] = 30
                                            mem[_38595 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _45519 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45519] = 30
                                            mem[_45519 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _51782 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51782] = 30
                                            mem[_51782 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _62535 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_62535] = 30
                                            mem[_62535 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33711 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33711] = 26
                                    mem[_33711 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36137 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36137] = 30
                                        mem[_36137 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38143 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38143] = 30
                                        mem[_38143 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39625 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39625 + idx + 68] = mem[_38143 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39625 + 68] = mem[_39625 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39625 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47219 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47219] = 30
                                        mem[_47219 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49804 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49804 + idx + 68] = mem[_47219 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49804 + 68] = mem[_49804 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49804 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36364 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36364] = 30
                                    mem[_36364 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36871 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36871 + idx + 68] = mem[_36364 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36871 + 68] = mem[_36871 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36871 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39624 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39624] = 30
                                    mem[_39624 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _41321 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41321 + idx + 68] = mem[_39624 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41321 + 68] = mem[_41321 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41321 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49803 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49803] = 30
                                    mem[_49803 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _52014 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52014 + idx + 68] = mem[_49803 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52014 + 68] = mem[_52014 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52014 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33843 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33843] = 30
                                    mem[_33843 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _34021 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34021 + idx + 68] = mem[_33843 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34021 + 68] = mem[_34021 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34021 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34800 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34800] = 30
                                    mem[_34800 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35069 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35069 + idx + 68] = mem[_34800 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35069 + 68] = mem[_35069 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35069 + -mem[64] + 100
                                _33905 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33905] = 26
                                mem[_33905 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36365 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36365] = 30
                                    mem[_36365 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39630 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39630] = 30
                                    mem[_39630 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41328 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41328 + idx + 68] = mem[_39630 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41328 + 68] = mem[_41328 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41328 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49808 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49808] = 30
                                    mem[_49808 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _52019 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52019 + idx + 68] = mem[_49808 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52019 + 68] = mem[_52019 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52019 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36874 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36874] = 30
                                mem[_36874 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37621 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37621 + idx + 68] = mem[_36874 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37621 + 68] = mem[_37621 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37621 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41327 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41327] = 30
                                mem[_41327 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _43462 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43462 + idx + 68] = mem[_41327 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43462 + 68] = mem[_43462 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43462 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _52018 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52018] = 30
                                mem[_52018 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _53959 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53959 + idx + 68] = mem[_52018 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53959 + 68] = mem[_53959 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53959 + -mem[64] + 100
                            _33269 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33269] = 26
                            mem[_33269 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34181 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34181] = 26
                                mem[_34181 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36870 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36870] = 30
                                    mem[_36870 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41320 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41320] = 30
                                    mem[_41320 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _52013 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52013] = 30
                                    mem[_52013 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37618] = 30
                                    mem[_37618 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43452 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43452] = 30
                                    mem[_43452 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53951 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53951] = 30
                                    mem[_53951 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34180 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34180] = 26
                                mem[_34180 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _36869 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36869] = 30
                                    mem[_36869 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41317 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41317] = 30
                                    mem[_41317 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _52011 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52011] = 30
                                    mem[_52011 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37617 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37617] = 30
                                    mem[_37617 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43448 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43448] = 30
                                    mem[_43448 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _53947 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53947] = 30
                                    mem[_53947 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33708 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33708] = 26
                                    mem[_33708 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36136 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36136] = 30
                                            mem[_36136 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38140 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38140] = 30
                                            mem[_38140 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39616 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39616 + idx + 68] = mem[_38140 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39616 + 68] = mem[_39616 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39616 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47208] = 30
                                            mem[_47208 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49789 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49789 + idx + 68] = mem[_47208 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49789 + 68] = mem[_49789 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49789 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36362 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36362] = 30
                                        mem[_36362 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _36864 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36864 + idx + 68] = mem[_36362 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36864 + 68] = mem[_36864 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36864 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39615 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39615] = 30
                                        mem[_39615 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41302 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41302 + idx + 68] = mem[_39615 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41302 + 68] = mem[_41302 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41302 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _49788 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49788] = 30
                                        mem[_49788 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52000 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52000 + idx + 68] = mem[_49788 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52000 + 68] = mem[_52000 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52000 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36361 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36361] = 30
                                        mem[_36361 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36861 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36861 + idx + 68] = mem[_36361 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36861 + 68] = mem[_36861 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36861 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39614 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39614] = 30
                                        mem[_39614 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41299 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41299 + idx + 68] = mem[_39614 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41299 + 68] = mem[_41299 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41299 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49787 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49787] = 30
                                        mem[_49787 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51997 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51997 + idx + 68] = mem[_49787 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51997 + 68] = mem[_51997 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51997 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36860 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36860] = 30
                                    mem[_36860 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37604 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37604 + idx + 68] = mem[_36860 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37604 + 68] = mem[_37604 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37604 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41298 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41298] = 30
                                    mem[_41298 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43426 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43426 + idx + 68] = mem[_41298 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43426 + 68] = mem[_43426 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43426 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _51996 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51996] = 30
                                    mem[_51996 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53931 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53931 + idx + 68] = mem[_51996 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53931 + 68] = mem[_53931 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53931 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33842 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33842] = 30
                                    mem[_33842 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _34018 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34018 + idx + 68] = mem[_33842 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34018 + 68] = mem[_34018 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34018 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34798 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34798] = 30
                                    mem[_34798 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35064 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35064 + idx + 68] = mem[_34798 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35064 + 68] = mem[_35064 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35064 + -mem[64] + 100
                                _33904 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33904] = 26
                                mem[_33904 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36363 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36363] = 30
                                        mem[_36363 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39623 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39623] = 30
                                        mem[_39623 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41312 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41312 + idx + 68] = mem[_39623 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41312 + 68] = mem[_41312 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41312 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49796 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49796] = 30
                                        mem[_49796 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52007 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52007 + idx + 68] = mem[_49796 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52007 + 68] = mem[_52007 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52007 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36868 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36868] = 30
                                    mem[_36868 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37614 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37614 + idx + 68] = mem[_36868 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37614 + 68] = mem[_37614 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37614 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41311 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41311] = 30
                                    mem[_41311 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _43442 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43442 + idx + 68] = mem[_41311 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43442 + 68] = mem[_43442 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43442 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _52006 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52006] = 30
                                    mem[_52006 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53943 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53943 + idx + 68] = mem[_52006 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53943 + 68] = mem[_53943 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53943 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36867 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36867] = 30
                                    mem[_36867 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37611 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37611 + idx + 68] = mem[_36867 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37611 + 68] = mem[_37611 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37611 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41310 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41310] = 30
                                    mem[_41310 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43439 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43439 + idx + 68] = mem[_41310 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43439 + 68] = mem[_43439 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43439 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52005 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52005] = 30
                                    mem[_52005 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53940 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53940 + idx + 68] = mem[_52005 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53940 + 68] = mem[_53940 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53940 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37610 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37610] = 30
                                mem[_37610 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _38754 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38754 + idx + 68] = mem[_37610 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38754 + 68] = mem[_38754 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38754 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43438 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43438] = 30
                                mem[_43438 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _45776 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_45776 + idx + 68] = mem[_43438 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_45776 + 68] = mem[_45776 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _45776 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _53939 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53939] = 30
                                mem[_53939 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55930 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55930 + idx + 68] = mem[_53939 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55930 + 68] = mem[_55930 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55930 + -mem[64] + 100
                            _33264 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33264] = 26
                            mem[_33264 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34179 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34179] = 26
                                mem[_34179 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36859 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36859] = 30
                                        mem[_36859 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41297 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41297] = 30
                                        mem[_41297 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51995 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51995] = 30
                                        mem[_51995 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37603 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37603] = 30
                                        mem[_37603 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43422 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43422] = 30
                                        mem[_43422 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _53927 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53927] = 30
                                        mem[_53927 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37602 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37602] = 30
                                        mem[_37602 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43421 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43421] = 30
                                        mem[_43421 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53926 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53926] = 30
                                        mem[_53926 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38742 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38742] = 30
                                        mem[_38742 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45757 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45757] = 30
                                        mem[_45757 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _55913 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55913] = 30
                                        mem[_55913 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34178 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34178] = 26
                                mem[_34178 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36858 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36858] = 30
                                        mem[_36858 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41292 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41292] = 30
                                        mem[_41292 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51990 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51990] = 30
                                        mem[_51990 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37601 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37601] = 30
                                        mem[_37601 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43415 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43415] = 30
                                        mem[_43415 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _53921 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53921] = 30
                                        mem[_53921 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37600 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37600] = 30
                                        mem[_37600 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43414 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43414] = 30
                                        mem[_43414 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53920 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53920] = 30
                                        mem[_53920 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38735 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38735] = 30
                                        mem[_38735 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45747 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45747] = 30
                                        mem[_45747 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _55905 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55905] = 30
                                        mem[_55905 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                    else:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33693 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33693] = 26
                                        mem[_33693 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36131 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36131] = 30
                                            mem[_36131 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38119 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38119] = 30
                                            mem[_38119 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39568 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39568 + idx + 68] = mem[_38119 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39568 + 68] = mem[_39568 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39568 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47128 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47128] = 30
                                            mem[_47128 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49672 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49672 + idx + 68] = mem[_47128 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49672 + 68] = mem[_49672 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49672 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36349 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36349] = 30
                                        mem[_36349 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36820 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36820 + idx + 68] = mem[_36349 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36820 + 68] = mem[_36820 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36820 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39567 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39567] = 30
                                        mem[_39567 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41192 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41192 + idx + 68] = mem[_39567 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41192 + 68] = mem[_41192 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41192 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49671 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49671] = 30
                                        mem[_49671 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51876 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51876 + idx + 68] = mem[_49671 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51876 + 68] = mem[_51876 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51876 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33837 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33837] = 30
                                        mem[_33837 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34003 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34003 + idx + 68] = mem[_33837 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34003 + 68] = mem[_34003 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34003 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34788 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34788] = 30
                                        mem[_34788 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35039 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35039 + idx + 68] = mem[_34788 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35039 + 68] = mem[_35039 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35039 + -mem[64] + 100
                                    _33899 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33899] = 26
                                    mem[_33899 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36350 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36350] = 30
                                        mem[_36350 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39573 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39573] = 30
                                        mem[_39573 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41199 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41199 + idx + 68] = mem[_39573 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41199 + 68] = mem[_41199 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41199 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49676 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49676] = 30
                                        mem[_49676 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _51881 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51881 + idx + 68] = mem[_49676 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51881 + 68] = mem[_51881 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51881 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36823 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36823] = 30
                                    mem[_36823 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37549 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37549 + idx + 68] = mem[_36823 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37549 + 68] = mem[_37549 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37549 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41198 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41198] = 30
                                    mem[_41198 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43298 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43298 + idx + 68] = mem[_41198 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43298 + 68] = mem[_43298 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43298 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _51880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51880] = 30
                                    mem[_51880 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53818 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53818 + idx + 68] = mem[_51880 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53818 + 68] = mem[_53818 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53818 + -mem[64] + 100
                                _33239 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33239] = 26
                                mem[_33239 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34169 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34169] = 26
                                    mem[_34169 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36819 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36819] = 30
                                        mem[_36819 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41191 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41191] = 30
                                        mem[_41191 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51875 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51875] = 30
                                        mem[_51875 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37546 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37546] = 30
                                        mem[_37546 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43288 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43288] = 30
                                        mem[_43288 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53810 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53810] = 30
                                        mem[_53810 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34168 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34168] = 26
                                    mem[_34168 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36818 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36818] = 30
                                        mem[_36818 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41188 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41188] = 30
                                        mem[_41188 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51873 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51873] = 30
                                        mem[_51873 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37545 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37545] = 30
                                        mem[_37545 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43284 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43284] = 30
                                        mem[_43284 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53806 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53806] = 30
                                        mem[_53806 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33690 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33690] = 26
                                        mem[_33690 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36130 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36130] = 30
                                                mem[_36130 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38116 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38116] = 30
                                                mem[_38116 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39559 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39559 + idx + 68] = mem[_38116 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39559 + 68] = mem[_39559 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39559 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47117 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47117] = 30
                                                mem[_47117 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _49657 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49657 + idx + 68] = mem[_47117 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49657 + 68] = mem[_49657 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49657 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36347 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36347] = 30
                                            mem[_36347 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36813 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36813 + idx + 68] = mem[_36347 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36813 + 68] = mem[_36813 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36813 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39558 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39558] = 30
                                            mem[_39558 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41173 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41173 + idx + 68] = mem[_39558 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41173 + 68] = mem[_41173 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41173 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _49656 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49656] = 30
                                            mem[_49656 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51862 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51862 + idx + 68] = mem[_49656 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51862 + 68] = mem[_51862 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51862 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36346 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36346] = 30
                                            mem[_36346 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36810 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36810 + idx + 68] = mem[_36346 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36810 + 68] = mem[_36810 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36810 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39557 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39557] = 30
                                            mem[_39557 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41170 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41170 + idx + 68] = mem[_39557 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41170 + 68] = mem[_41170 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41170 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _49655 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49655] = 30
                                            mem[_49655 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51859 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51859 + idx + 68] = mem[_49655 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51859 + 68] = mem[_51859 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51859 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36809 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36809] = 30
                                        mem[_36809 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37532 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37532 + idx + 68] = mem[_36809 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37532 + 68] = mem[_37532 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37532 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41169 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41169] = 30
                                        mem[_41169 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43262 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43262 + idx + 68] = mem[_41169 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43262 + 68] = mem[_43262 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43262 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _51858 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51858] = 30
                                        mem[_51858 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53790 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53790 + idx + 68] = mem[_51858 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53790 + 68] = mem[_53790 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53790 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33836 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33836] = 30
                                        mem[_33836 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34000 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34000 + idx + 68] = mem[_33836 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34000 + 68] = mem[_34000 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34000 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34786 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34786] = 30
                                        mem[_34786 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35034 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35034 + idx + 68] = mem[_34786 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35034 + 68] = mem[_35034 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35034 + -mem[64] + 100
                                    _33898 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33898] = 26
                                    mem[_33898 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36348 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36348] = 30
                                            mem[_36348 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39566 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39566] = 30
                                            mem[_39566 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41183 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41183 + idx + 68] = mem[_39566 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41183 + 68] = mem[_41183 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41183 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _49664 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49664] = 30
                                            mem[_49664 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51869 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51869 + idx + 68] = mem[_49664 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51869 + 68] = mem[_51869 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51869 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36817 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36817] = 30
                                        mem[_36817 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37542 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37542 + idx + 68] = mem[_36817 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37542 + 68] = mem[_37542 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37542 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41182 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41182] = 30
                                        mem[_41182 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _43278 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43278 + idx + 68] = mem[_41182 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43278 + 68] = mem[_43278 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43278 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _51868 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51868] = 30
                                        mem[_51868 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53802 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53802 + idx + 68] = mem[_51868 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53802 + 68] = mem[_53802 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53802 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36816 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36816] = 30
                                        mem[_36816 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37539 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37539 + idx + 68] = mem[_36816 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37539 + 68] = mem[_37539 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37539 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41181 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41181] = 30
                                        mem[_41181 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43275 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43275 + idx + 68] = mem[_41181 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43275 + 68] = mem[_43275 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43275 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _51867 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51867] = 30
                                        mem[_51867 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53799 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53799 + idx + 68] = mem[_51867 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53799 + 68] = mem[_53799 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53799 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37538 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37538] = 30
                                    mem[_37538 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38649 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38649 + idx + 68] = mem[_37538 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38649 + 68] = mem[_38649 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38649 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43274 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43274] = 30
                                    mem[_43274 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _45600 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45600 + idx + 68] = mem[_43274 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45600 + 68] = mem[_45600 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45600 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _53798 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53798] = 30
                                    mem[_53798 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _55796 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55796 + idx + 68] = mem[_53798 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55796 + 68] = mem[_55796 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55796 + -mem[64] + 100
                                _33234 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33234] = 26
                                mem[_33234 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34167 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34167] = 26
                                    mem[_34167 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36808 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36808] = 30
                                            mem[_36808 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41168 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41168] = 30
                                            mem[_41168 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51857 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51857] = 30
                                            mem[_51857 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37531 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37531] = 30
                                            mem[_37531 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43258 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43258] = 30
                                            mem[_43258 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _53786 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53786] = 30
                                            mem[_53786 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37530 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37530] = 30
                                            mem[_37530 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43257 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43257] = 30
                                            mem[_43257 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _53785 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53785] = 30
                                            mem[_53785 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38637 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38637] = 30
                                            mem[_38637 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45581 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45581] = 30
                                            mem[_45581 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _55779 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55779] = 30
                                            mem[_55779 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34166 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34166] = 26
                                    mem[_34166 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36807 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36807] = 30
                                            mem[_36807 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41163 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41163] = 30
                                            mem[_41163 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51852 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51852] = 30
                                            mem[_51852 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37529 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37529] = 30
                                            mem[_37529 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43251 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43251] = 30
                                            mem[_43251 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _53780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53780] = 30
                                            mem[_53780 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37528 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37528] = 30
                                            mem[_37528 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43250 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43250] = 30
                                            mem[_43250 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _53779 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53779] = 30
                                            mem[_53779 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38630 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38630] = 30
                                            mem[_38630 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45571 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45571] = 30
                                            mem[_45571 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _55771 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55771] = 30
                                            mem[_55771 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not stor4[address(arg1)]:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33699] = 26
                                            mem[_33699 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36133 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36133] = 30
                                                mem[_36133 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38127 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38127] = 30
                                                mem[_38127 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39587 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39587 + idx + 68] = mem[_38127 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39587 + 68] = mem[_39587 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39587 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47151 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47151] = 30
                                                mem[_47151 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _49705 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49705 + idx + 68] = mem[_47151 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49705 + 68] = mem[_49705 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49705 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36354 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36354] = 30
                                            mem[_36354 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36837 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36837 + idx + 68] = mem[_36354 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36837 + 68] = mem[_36837 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36837 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39586 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39586] = 30
                                            mem[_39586 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41235 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41235 + idx + 68] = mem[_39586 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41235 + 68] = mem[_41235 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41235 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _49704 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49704] = 30
                                            mem[_49704 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51912 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51912 + idx + 68] = mem[_49704 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51912 + 68] = mem[_51912 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51912 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33839 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33839] = 30
                                            mem[_33839 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34009 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34009 + idx + 68] = mem[_33839 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34009 + 68] = mem[_34009 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34009 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34792 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34792] = 30
                                            mem[_34792 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35049 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35049 + idx + 68] = mem[_34792 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35049 + 68] = mem[_35049 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35049 + -mem[64] + 100
                                        _33901 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33901] = 26
                                        mem[_33901 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36355 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36355] = 30
                                            mem[_36355 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39592 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39592] = 30
                                            mem[_39592 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41242 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41242 + idx + 68] = mem[_39592 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41242 + 68] = mem[_41242 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41242 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _49709 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49709] = 30
                                            mem[_49709 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _51917 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51917 + idx + 68] = mem[_49709 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51917 + 68] = mem[_51917 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51917 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36840 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36840] = 30
                                        mem[_36840 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37573 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37573 + idx + 68] = mem[_36840 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37573 + 68] = mem[_37573 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37573 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41241 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41241] = 30
                                        mem[_41241 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43354 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43354 + idx + 68] = mem[_41241 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43354 + 68] = mem[_43354 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43354 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _51916 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51916] = 30
                                        mem[_51916 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53862 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53862 + idx + 68] = mem[_51916 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53862 + 68] = mem[_53862 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53862 + -mem[64] + 100
                                    _33249 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33249] = 26
                                    mem[_33249 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34173 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34173] = 26
                                        mem[_34173 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36836 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36836] = 30
                                            mem[_36836 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41234 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41234] = 30
                                            mem[_41234 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51911 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51911] = 30
                                            mem[_51911 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37570 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37570] = 30
                                            mem[_37570 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43344 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43344] = 30
                                            mem[_43344 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _53854 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53854] = 30
                                            mem[_53854 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34172 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34172] = 26
                                        mem[_34172 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _36835 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36835] = 30
                                            mem[_36835 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41231 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41231] = 30
                                            mem[_41231 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _51909 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51909] = 30
                                            mem[_51909 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37569 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37569] = 30
                                            mem[_37569 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43340 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43340] = 30
                                            mem[_43340 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _53850 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53850] = 30
                                            mem[_53850 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33696 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33696] = 26
                                            mem[_33696 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36132 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36132] = 30
                                                    mem[_36132 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38124 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38124] = 30
                                                    mem[_38124 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _39578 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39578 + idx + 68] = mem[_38124 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39578 + 68] = mem[_39578 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39578 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _47140 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47140] = 30
                                                    mem[_47140 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _49690 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49690 + idx + 68] = mem[_47140 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49690 + 68] = mem[_49690 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49690 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36352 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36352] = 30
                                                mem[_36352 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _36830 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36830 + idx + 68] = mem[_36352 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36830 + 68] = mem[_36830 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36830 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39577 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39577] = 30
                                                mem[_39577 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41216 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41216 + idx + 68] = mem[_39577 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41216 + 68] = mem[_41216 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41216 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _49689 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49689] = 30
                                                mem[_49689 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _51898 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51898 + idx + 68] = mem[_49689 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51898 + 68] = mem[_51898 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51898 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36351 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36351] = 30
                                                mem[_36351 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _36827 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36827 + idx + 68] = mem[_36351 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36827 + 68] = mem[_36827 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36827 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39576 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39576] = 30
                                                mem[_39576 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _41213 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41213 + idx + 68] = mem[_39576 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41213 + 68] = mem[_41213 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41213 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _49688 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49688] = 30
                                                mem[_49688 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _51895 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51895 + idx + 68] = mem[_49688 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51895 + 68] = mem[_51895 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51895 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36826 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36826] = 30
                                            mem[_36826 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37556 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37556 + idx + 68] = mem[_36826 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37556 + 68] = mem[_37556 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37556 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41212 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41212] = 30
                                            mem[_41212 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _43318 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43318 + idx + 68] = mem[_41212 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43318 + 68] = mem[_43318 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43318 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _51894 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51894] = 30
                                            mem[_51894 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _53834 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53834 + idx + 68] = mem[_51894 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53834 + 68] = mem[_53834 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53834 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33838 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33838] = 30
                                            mem[_33838 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34006 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34006 + idx + 68] = mem[_33838 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34006 + 68] = mem[_34006 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34006 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34790 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34790] = 30
                                            mem[_34790 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35044 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35044 + idx + 68] = mem[_34790 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35044 + 68] = mem[_35044 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35044 + -mem[64] + 100
                                        _33900 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33900] = 26
                                        mem[_33900 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36353 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36353] = 30
                                                mem[_36353 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39585 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39585] = 30
                                                mem[_39585 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41226 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41226 + idx + 68] = mem[_39585 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41226 + 68] = mem[_41226 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41226 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _49697 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49697] = 30
                                                mem[_49697 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _51905 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51905 + idx + 68] = mem[_49697 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51905 + 68] = mem[_51905 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51905 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36834 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36834] = 30
                                            mem[_36834 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37566 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37566 + idx + 68] = mem[_36834 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37566 + 68] = mem[_37566 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37566 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41225 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41225] = 30
                                            mem[_41225 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _43334 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43334 + idx + 68] = mem[_41225 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43334 + 68] = mem[_43334 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43334 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _51904 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51904] = 30
                                            mem[_51904 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _53846 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53846 + idx + 68] = mem[_51904 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53846 + 68] = mem[_53846 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53846 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36833] = 30
                                            mem[_36833 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37563 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37563 + idx + 68] = mem[_36833 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37563 + 68] = mem[_37563 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37563 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41224 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41224] = 30
                                            mem[_41224 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _43331 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43331 + idx + 68] = mem[_41224 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43331 + 68] = mem[_43331 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43331 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _51903 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51903] = 30
                                            mem[_51903 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _53843 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53843 + idx + 68] = mem[_51903 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53843 + 68] = mem[_53843 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53843 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37562 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37562] = 30
                                        mem[_37562 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _38684 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38684 + idx + 68] = mem[_37562 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38684 + 68] = mem[_38684 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38684 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43330 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43330] = 30
                                        mem[_43330 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _45662 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45662 + idx + 68] = mem[_43330 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45662 + 68] = mem[_45662 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45662 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _53842 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53842] = 30
                                        mem[_53842 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _55846 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_55846 + idx + 68] = mem[_53842 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_55846 + 68] = mem[_55846 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _55846 + -mem[64] + 100
                                    _33244 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33244] = 26
                                    mem[_33244 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34171 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34171] = 26
                                        mem[_34171 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36825 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36825] = 30
                                                mem[_36825 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41211 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41211] = 30
                                                mem[_41211 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _51893 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51893] = 30
                                                mem[_51893 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37555 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37555] = 30
                                                mem[_37555 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43314 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43314] = 30
                                                mem[_43314 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _53830 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53830] = 30
                                                mem[_53830 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37554 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37554] = 30
                                                mem[_37554 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43313 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43313] = 30
                                                mem[_43313 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _53829 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53829] = 30
                                                mem[_53829 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38672 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38672] = 30
                                                mem[_38672 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _45643 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45643] = 30
                                                mem[_45643 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _55829 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_55829] = 30
                                                mem[_55829 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34170 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34170] = 26
                                        mem[_34170 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36824 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36824] = 30
                                                mem[_36824 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41206 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41206] = 30
                                                mem[_41206 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _51888 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51888] = 30
                                                mem[_51888 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37553 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37553] = 30
                                                mem[_37553 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43307 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43307] = 30
                                                mem[_43307 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _53824 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53824] = 30
                                                mem[_53824 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37552 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37552] = 30
                                                mem[_37552 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43306 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43306] = 30
                                                mem[_43306 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _53823 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53823] = 30
                                                mem[_53823 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38665 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38665] = 30
                                                mem[_38665 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _45633 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45633] = 30
                                                mem[_45633 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _55821 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_55821] = 30
                                                mem[_55821 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                            else:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33705 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33705] = 26
                                            mem[_33705 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36135 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36135] = 30
                                                mem[_36135 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38135 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38135] = 30
                                                mem[_38135 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39606 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39606 + idx + 68] = mem[_38135 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39606 + 68] = mem[_39606 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39606 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _42327 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_42327] = 30
                                                mem[_42327 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44638 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44638 + idx + 68] = mem[_42327 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44638 + 68] = mem[_44638 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44638 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _55903 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_55903] = 30
                                                mem[_55903 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _57948 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_57948 + idx + 68] = mem[_55903 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_57948 + 68] = mem[_57948 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _57948 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36359 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36359] = 30
                                            mem[_36359 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36854 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36854 + idx + 68] = mem[_36359 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36854 + 68] = mem[_36854 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36854 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39605 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39605] = 30
                                            mem[_39605 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41278 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41278 + idx + 68] = mem[_39605 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41278 + 68] = mem[_41278 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41278 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44635 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44635] = 30
                                            mem[_44635 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _47188 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47188 + idx + 68] = mem[_44635 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47188 + 68] = mem[_47188 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47188 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _57947 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57947] = 30
                                            mem[_57947 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59839 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59839 + idx + 68] = mem[_57947 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59839 + 68] = mem[_59839 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59839 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33841 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33841] = 30
                                            mem[_33841 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34015 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34015 + idx + 68] = mem[_33841 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34015 + 68] = mem[_34015 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34015 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34796 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34796] = 30
                                            mem[_34796 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35059 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35059 + idx + 68] = mem[_34796 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35059 + 68] = mem[_35059 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35059 + -mem[64] + 100
                                        _33903 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33903] = 26
                                        mem[_33903 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36360 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36360] = 30
                                            mem[_36360 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39611 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39611] = 30
                                            mem[_39611 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41285 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41285 + idx + 68] = mem[_39611 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41285 + 68] = mem[_41285 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41285 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44641 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44641] = 30
                                            mem[_44641 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47197 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47197 + idx + 68] = mem[_44641 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47197 + 68] = mem[_47197 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47197 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _57952 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_57952] = 30
                                            mem[_57952 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59844 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59844 + idx + 68] = mem[_57952 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59844 + 68] = mem[_59844 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59844 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36857 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36857] = 30
                                        mem[_36857 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37597 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37597 + idx + 68] = mem[_36857 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37597 + 68] = mem[_37597 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37597 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41284 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41284] = 30
                                        mem[_41284 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43406 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43406 + idx + 68] = mem[_41284 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43406 + 68] = mem[_43406 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43406 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47194 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47194] = 30
                                        mem[_47194 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49770 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49770 + idx + 68] = mem[_47194 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49770 + 68] = mem[_49770 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49770 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _59843 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59843] = 30
                                        mem[_59843 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61414 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61414 + idx + 68] = mem[_59843 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61414 + 68] = mem[_61414 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61414 + -mem[64] + 100
                                    _33259 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33259] = 26
                                    mem[_33259 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34177 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34177] = 26
                                        mem[_34177 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36853 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36853] = 30
                                            mem[_36853 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41277 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41277] = 30
                                            mem[_41277 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47185 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47185] = 30
                                            mem[_47185 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59838 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59838] = 30
                                            mem[_59838 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37594 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37594] = 30
                                            mem[_37594 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43398 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43398] = 30
                                            mem[_43398 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49758 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49758] = 30
                                            mem[_49758 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _61406 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61406] = 30
                                            mem[_61406 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34176 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34176] = 26
                                        mem[_34176 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _36852 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36852] = 30
                                            mem[_36852 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41274 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41274] = 30
                                            mem[_41274 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47182 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47182] = 30
                                            mem[_47182 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59836 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59836] = 30
                                            mem[_59836 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37593 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37593] = 30
                                            mem[_37593 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43394 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43394] = 30
                                            mem[_43394 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49752 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49752] = 30
                                            mem[_49752 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _61402 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61402] = 30
                                            mem[_61402 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33702 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33702] = 26
                                            mem[_33702 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36134 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36134] = 30
                                                    mem[_36134 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38132 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38132] = 30
                                                    mem[_38132 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _39597 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39597 + idx + 68] = mem[_38132 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39597 + 68] = mem[_39597 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39597 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _42318 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_42318] = 30
                                                    mem[_42318 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _44629 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_44629 + idx + 68] = mem[_42318 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_44629 + 68] = mem[_44629 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _44629 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _55891 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_55891] = 30
                                                    mem[_55891 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _57939 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_57939 + idx + 68] = mem[_55891 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_57939 + 68] = mem[_57939 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _57939 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36357 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36357] = 30
                                                mem[_36357 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _36847 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36847 + idx + 68] = mem[_36357 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36847 + 68] = mem[_36847 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36847 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39596 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39596] = 30
                                                mem[_39596 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41259 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41259 + idx + 68] = mem[_39596 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41259 + 68] = mem[_41259 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41259 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44626 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44626] = 30
                                                mem[_44626 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47167 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47167 + idx + 68] = mem[_44626 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47167 + 68] = mem[_47167 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47167 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _57938 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_57938] = 30
                                                mem[_57938 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _59825 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59825 + idx + 68] = mem[_57938 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59825 + 68] = mem[_59825 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59825 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36356 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36356] = 30
                                                mem[_36356 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _36844 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36844 + idx + 68] = mem[_36356 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36844 + 68] = mem[_36844 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36844 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39595 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39595] = 30
                                                mem[_39595 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41256 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41256 + idx + 68] = mem[_39595 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41256 + 68] = mem[_41256 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41256 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44623 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44623] = 30
                                                mem[_44623 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _47164 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47164 + idx + 68] = mem[_44623 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47164 + 68] = mem[_47164 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47164 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _57937 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_57937] = 30
                                                mem[_57937 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _59822 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59822 + idx + 68] = mem[_57937 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59822 + 68] = mem[_59822 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59822 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36843 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36843] = 30
                                            mem[_36843 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37580 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37580 + idx + 68] = mem[_36843 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37580 + 68] = mem[_37580 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37580 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41255 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41255] = 30
                                            mem[_41255 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _43374 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43374 + idx + 68] = mem[_41255 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43374 + 68] = mem[_43374 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43374 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47161 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47161] = 30
                                            mem[_47161 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _49728 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49728 + idx + 68] = mem[_47161 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49728 + 68] = mem[_49728 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49728 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _59821 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59821] = 30
                                            mem[_59821 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61386 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61386 + idx + 68] = mem[_59821 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61386 + 68] = mem[_61386 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61386 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33840 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33840] = 30
                                            mem[_33840 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34012 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34012 + idx + 68] = mem[_33840 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34012 + 68] = mem[_34012 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34012 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34794] = 30
                                            mem[_34794 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35054 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35054 + idx + 68] = mem[_34794 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35054 + 68] = mem[_35054 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35054 + -mem[64] + 100
                                        _33902 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33902] = 26
                                        mem[_33902 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36358 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36358] = 30
                                                mem[_36358 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39604 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39604] = 30
                                                mem[_39604 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41269 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41269 + idx + 68] = mem[_39604 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41269 + 68] = mem[_41269 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41269 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44632 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44632] = 30
                                                mem[_44632 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47179 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47179 + idx + 68] = mem[_44632 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47179 + 68] = mem[_47179 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47179 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _57944 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_57944] = 30
                                                mem[_57944 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _59832 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59832 + idx + 68] = mem[_57944 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59832 + 68] = mem[_59832 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59832 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36851 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36851] = 30
                                            mem[_36851 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37590 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37590 + idx + 68] = mem[_36851 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37590 + 68] = mem[_37590 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37590 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41268 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41268] = 30
                                            mem[_41268 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _43388 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43388 + idx + 68] = mem[_41268 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43388 + 68] = mem[_43388 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43388 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47176 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47176] = 30
                                            mem[_47176 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _49746 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49746 + idx + 68] = mem[_47176 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49746 + 68] = mem[_49746 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49746 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _59831 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59831] = 30
                                            mem[_59831 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61398 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61398 + idx + 68] = mem[_59831 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61398 + 68] = mem[_61398 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61398 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36850 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36850] = 30
                                            mem[_36850 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37587 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37587 + idx + 68] = mem[_36850 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37587 + 68] = mem[_37587 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37587 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41267 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41267] = 30
                                            mem[_41267 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _43385 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43385 + idx + 68] = mem[_41267 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43385 + 68] = mem[_43385 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43385 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47173 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47173] = 30
                                            mem[_47173 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _49743 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49743 + idx + 68] = mem[_47173 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49743 + 68] = mem[_49743 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49743 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _59830 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59830] = 30
                                            mem[_59830 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61395 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61395 + idx + 68] = mem[_59830 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61395 + 68] = mem[_61395 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61395 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37586 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37586] = 30
                                        mem[_37586 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _38719 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38719 + idx + 68] = mem[_37586 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38719 + 68] = mem[_38719 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38719 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43384 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43384] = 30
                                        mem[_43384 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _45720 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45720 + idx + 68] = mem[_43384 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45720 + 68] = mem[_45720 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45720 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49740 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49740] = 30
                                        mem[_49740 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _51953 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51953 + idx + 68] = mem[_49740 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51953 + 68] = mem[_51953 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51953 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _61394 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61394] = 30
                                        mem[_61394 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _62626 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_62626 + idx + 68] = mem[_61394 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_62626 + 68] = mem[_62626 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _62626 + -mem[64] + 100
                                    _33254 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33254] = 26
                                    mem[_33254 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34175 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34175] = 26
                                        mem[_34175 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36842 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36842] = 30
                                                mem[_36842 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41254 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41254] = 30
                                                mem[_41254 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47158 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47158] = 30
                                                mem[_47158 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _59820 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_59820] = 30
                                                mem[_59820 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37579 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37579] = 30
                                                mem[_37579 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43370 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43370] = 30
                                                mem[_43370 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _49722 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49722] = 30
                                                mem[_49722 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _61382 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61382] = 30
                                                mem[_61382 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37578 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37578] = 30
                                                mem[_37578 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43369 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43369] = 30
                                                mem[_43369 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _49719 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49719] = 30
                                                mem[_49719 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _61381 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61381] = 30
                                                mem[_61381 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38707 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38707] = 30
                                                mem[_38707 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _45705 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45705] = 30
                                                mem[_45705 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _51932 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51932] = 30
                                                mem[_51932 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _62609 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_62609] = 30
                                                mem[_62609 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34174 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34174] = 26
                                        mem[_34174 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36841 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36841] = 30
                                                mem[_36841 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41249 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41249] = 30
                                                mem[_41249 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47155 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47155] = 30
                                                mem[_47155 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _59817 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_59817] = 30
                                                mem[_59817 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37577 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37577] = 30
                                                mem[_37577 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43363 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43363] = 30
                                                mem[_43363 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _49713 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49713] = 30
                                                mem[_49713 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _61376 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61376] = 30
                                                mem[_61376 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37576 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37576] = 30
                                                mem[_37576 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43362 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43362] = 30
                                                mem[_43362 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _49710 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49710] = 30
                                                mem[_49710 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _61375 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61375] = 30
                                                mem[_61375 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38700 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38700] = 30
                                                mem[_38700 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _45695 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45695] = 30
                                                mem[_45695 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _51920 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51920] = 30
                                                mem[_51920 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _62601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_62601] = 30
                                                mem[_62601 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
    else:
        mem[0] = arg1
        mem[32] = 4
        if not stor4[address(arg1)]:
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            if not arg2 / 100:
                mem[64] = 224
                mem[160] = 30
                mem[192] = 'SafeMath: subtraction overflow'
                if 0 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                idx = 0
                s = 10^18
                t = stor6
                while idx < stor5.length:
                    mem[0] = stor5[idx]
                    mem[32] = 1
                    if stor1[stor5[idx]] > t:
                        _33813 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33813] = 26
                        mem[_33813 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _36171 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36171] = 30
                            mem[_36171 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _38279 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38279] = 30
                            mem[_38279 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _39948 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_39948 + idx + 68] = mem[_38279 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_39948 + 68] = mem[_39948 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _39948 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _42697 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42697] = 30
                            mem[_42697 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _44975 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_44975 + idx + 68] = mem[_42697 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_44975 + 68] = mem[_44975 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _44975 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _53307 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53307] = 30
                            mem[_53307 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _55314 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55314 + idx + 68] = mem[_53307 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55314 + 68] = mem[_55314 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55314 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _36449 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_36449] = 30
                        mem[_36449 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 10^18:
                            _37160 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37160 + idx + 68] = mem[_36449 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37160 + 68] = mem[_37160 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37160 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _39947 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_39947] = 30
                        mem[_39947 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _42052 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42052 + idx + 68] = mem[_39947 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42052 + 68] = mem[_42052 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42052 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _44972 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_44972] = 30
                        mem[_44972 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                            _47726 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_47726 + idx + 68] = mem[_44972 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_47726 + 68] = mem[_47726 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _47726 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                        _55313 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55313] = 30
                        mem[_55313 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _57422 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57422 + idx + 68] = mem[_55313 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57422 + 68] = mem[_57422 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57422 + -mem[64] + 100
                    require idx < stor5.length
                    mem[0] = stor5[idx]
                    mem[32] = 2
                    if stor2[stor5[idx]] <= s:
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        _33877 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33877] = 30
                        mem[_33877 + 32] = 'SafeMath: subtraction overflow'
                        if stor1[stor5[idx]] > t:
                            _34123 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_34123 + idx + 68] = mem[_33877 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_34123 + 68] = mem[_34123 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _34123 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        _34868 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34868] = 30
                        mem[_34868 + 32] = 'SafeMath: subtraction overflow'
                        if stor2[stor5[idx]] <= s:
                            idx = idx + 1
                            s = s - stor2[stor5[idx]]
                            t = t - stor1[stor5[idx]]
                            continue 
                        _35239 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_35239 + idx + 68] = mem[_34868 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_35239 + 68] = mem[_35239 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _35239 + -mem[64] + 100
                    _33939 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_33939] = 26
                    mem[_33939 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        _36450 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_36450] = 30
                        mem[_36450 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _39953 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_39953] = 30
                        mem[_39953 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _42059 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42059 + idx + 68] = mem[_39953 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42059 + 68] = mem[_42059 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42059 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _44978 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_44978] = 30
                        mem[_44978 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _47735 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_47735 + idx + 68] = mem[_44978 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_47735 + 68] = mem[_47735 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _47735 + -mem[64] + 100
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        _55318 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55318] = 30
                        mem[_55318 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            if 0 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _57427 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57427 + idx + 68] = mem[_55318 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57427 + 68] = mem[_57427 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57427 + -mem[64] + 100
                    require arg2
                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _37163 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37163] = 30
                    mem[_37163 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > arg2 * stor6 / 10^18:
                        _38029 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_38029 + idx + 68] = mem[_37163 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_38029 + 68] = mem[_38029 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _38029 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 2
                    _42058 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_42058] = 30
                    mem[_42058 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 > stor2[address(msg.sender)]:
                        _44394 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_44394 + idx + 68] = mem[_42058 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_44394 + 68] = mem[_44394 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _44394 + -mem[64] + 100
                    stor2[address(msg.sender)] -= arg2
                    mem[0] = msg.sender
                    mem[32] = 1
                    _47732 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_47732] = 30
                    mem[_47732 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                        _50543 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_50543 + idx + 68] = mem[_47732 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_50543 + 68] = mem[_50543 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _50543 + -mem[64] + 100
                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[0] = arg1
                    mem[32] = 1
                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                    _57426 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_57426] = 30
                    mem[_57426 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                            revert with 0, 
                                        32,
                                        40,
                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                        mem[mem[64] + 108 len 24]
                        return 1
                    _59364 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_59364 + idx + 68] = mem[_57426 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_59364 + 68] = mem[_59364 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _59364 + -mem[64] + 100
                _33439 = mem[64]
                mem[64] = mem[64] + 64
                mem[_33439] = 26
                mem[_33439 + 32] = 'SafeMath: division by zero'
                if t < stor6 / 10^18:
                    _34249 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_34249] = 26
                    mem[_34249 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        _37159 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37159] = 30
                        mem[_37159 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _42051 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42051] = 30
                        mem[_42051 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _47723 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47723] = 30
                        mem[_47723 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        _57421 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_57421] = 30
                        mem[_57421 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        if 0 > _maxTxAmount:
                            revert with 0, 
                                        32,
                                        40,
                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                        mem[mem[64] + 108 len 24]
                    else:
                        require arg2
                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _38026 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_38026] = 30
                        mem[_38026 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 10^18:
                            revert with 0, 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _44386 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_44386] = 30
                        mem[_44386 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _50531 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50531] = 30
                        mem[_50531 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                        _59356 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_59356] = 30
                        mem[_59356 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                            revert with 0, 
                                        32,
                                        40,
                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                        mem[mem[64] + 108 len 24]
                else:
                    _34248 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_34248] = 26
                    mem[_34248 + 32] = 'SafeMath: division by zero'
                    if s <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require s
                    if not arg2:
                        _37158 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37158] = 30
                        mem[_37158 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _42048 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42048] = 30
                        mem[_42048 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _47720 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47720] = 30
                        mem[_47720 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        _57419 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_57419] = 30
                        mem[_57419 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        if 0 > _maxTxAmount:
                            revert with 0, 
                                        32,
                                        40,
                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                        mem[mem[64] + 108 len 24]
                    else:
                        require arg2
                        if arg2 * t / s / arg2 != t / s:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _38025 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_38025] = 30
                        mem[_38025 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * t / s:
                            revert with 0, 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _44382 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_44382] = 30
                        mem[_44382 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _50525 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50525] = 30
                        mem[_50525 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * t / s > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * t / s
                        _59352 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_59352] = 30
                        mem[_59352 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        if arg2 * t / s > _maxTxAmount:
                            revert with 0, 
                                        32,
                                        40,
                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                        mem[mem[64] + 108 len 24]
            else:
                require arg2 / 100
                if 3 * arg2 / 100 / arg2 / 100 != 3:
                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                mem[64] = 224
                mem[160] = 30
                mem[192] = 'SafeMath: subtraction overflow'
                if 3 * arg2 / 100 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                idx = 0
                s = 10^18
                t = stor6
                while idx < stor5.length:
                    mem[0] = stor5[idx]
                    mem[32] = 1
                    if stor1[stor5[idx]] > t:
                        _33810 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33810] = 26
                        mem[_33810 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 3 * arg2 / 100:
                                _36170 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36170] = 30
                                mem[_36170 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 2
                                _38276 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38276] = 30
                                mem[_38276 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _39939 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39939 + idx + 68] = mem[_38276 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39939 + 68] = mem[_39939 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39939 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42688 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42688] = 30
                                mem[_42688 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _44966 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44966 + idx + 68] = mem[_42688 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44966 + 68] = mem[_44966 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44966 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _53296 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53296] = 30
                                mem[_53296 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55299 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55299 + idx + 68] = mem[_53296 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55299 + 68] = mem[_55299 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55299 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36447 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36447] = 30
                            mem[_36447 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                _37153 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37153 + idx + 68] = mem[_36447 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37153 + 68] = mem[_37153 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37153 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            _39938 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39938] = 30
                            mem[_39938 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _42033 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42033 + idx + 68] = mem[_39938 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42033 + 68] = mem[_42033 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42033 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _44963 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44963] = 30
                            mem[_44963 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _47705 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_47705 + idx + 68] = mem[_44963 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_47705 + 68] = mem[_47705 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _47705 + -mem[64] + 100
                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                            _55298 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_55298] = 30
                            mem[_55298 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _57408 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_57408 + idx + 68] = mem[_55298 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_57408 + 68] = mem[_57408 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _57408 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            _36446 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36446] = 30
                            mem[_36446 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                _37150 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37150 + idx + 68] = mem[_36446 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37150 + 68] = mem[_37150 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37150 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            _39937 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39937] = 30
                            mem[_39937 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _42030 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42030 + idx + 68] = mem[_39937 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42030 + 68] = mem[_42030 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42030 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _44960 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44960] = 30
                            mem[_44960 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _47702 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_47702 + idx + 68] = mem[_44960 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_47702 + 68] = mem[_47702 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _47702 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _55297 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_55297] = 30
                            mem[_55297 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _57405 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_57405 + idx + 68] = mem[_55297 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_57405 + 68] = mem[_57405 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _57405 + -mem[64] + 100
                        require 3 * arg2 / 100
                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37149 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37149] = 30
                        mem[_37149 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                            _38012 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_38012 + idx + 68] = mem[_37149 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_38012 + 68] = mem[_38012 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _38012 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _42029 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42029] = 30
                        mem[_42029 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _44362 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_44362 + idx + 68] = mem[_42029 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_44362 + 68] = mem[_44362 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _44362 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _47699 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47699] = 30
                        mem[_47699 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                            _50501 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_50501 + idx + 68] = mem[_47699 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_50501 + 68] = mem[_50501 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _50501 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                        _57404 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_57404] = 30
                        mem[_57404 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _59336 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_59336 + idx + 68] = mem[_57404 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_59336 + 68] = mem[_59336 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _59336 + -mem[64] + 100
                    require idx < stor5.length
                    mem[0] = stor5[idx]
                    mem[32] = 2
                    if stor2[stor5[idx]] <= s:
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        _33876 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33876] = 30
                        mem[_33876 + 32] = 'SafeMath: subtraction overflow'
                        if stor1[stor5[idx]] > t:
                            _34120 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_34120 + idx + 68] = mem[_33876 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_34120 + 68] = mem[_34120 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _34120 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        _34866 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34866] = 30
                        mem[_34866 + 32] = 'SafeMath: subtraction overflow'
                        if stor2[stor5[idx]] <= s:
                            idx = idx + 1
                            s = s - stor2[stor5[idx]]
                            t = t - stor1[stor5[idx]]
                            continue 
                        _35234 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_35234 + idx + 68] = mem[_34866 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_35234 + 68] = mem[_35234 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _35234 + -mem[64] + 100
                    _33938 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_33938] = 26
                    mem[_33938 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if not 3 * arg2 / 100:
                            _36448 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36448] = 30
                            mem[_36448 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _39946 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39946] = 30
                            mem[_39946 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _42043 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42043 + idx + 68] = mem[_39946 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42043 + 68] = mem[_42043 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42043 + -mem[64] + 100
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _44969 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44969] = 30
                            mem[_44969 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _47717 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_47717 + idx + 68] = mem[_44969 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_47717 + 68] = mem[_47717 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _47717 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _55306 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_55306] = 30
                            mem[_55306 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _57415 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_57415 + idx + 68] = mem[_55306 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_57415 + 68] = mem[_57415 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _57415 + -mem[64] + 100
                        require 3 * arg2 / 100
                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37157 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37157] = 30
                        mem[_37157 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                            _38022 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_38022 + idx + 68] = mem[_37157 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_38022 + 68] = mem[_38022 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _38022 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _42042 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42042] = 30
                        mem[_42042 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _44376 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_44376 + idx + 68] = mem[_42042 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_44376 + 68] = mem[_44376 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _44376 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _47714 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47714] = 30
                        mem[_47714 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _50519 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_50519 + idx + 68] = mem[_47714 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_50519 + 68] = mem[_50519 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _50519 + -mem[64] + 100
                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                        _57414 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_57414] = 30
                        mem[_57414 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _59348 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_59348 + idx + 68] = mem[_57414 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_59348 + 68] = mem[_59348 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _59348 + -mem[64] + 100
                    require arg2
                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if not 3 * arg2 / 100:
                        _37156 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37156] = 30
                        mem[_37156 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 10^18:
                            _38019 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_38019 + idx + 68] = mem[_37156 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_38019 + 68] = mem[_38019 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _38019 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        _42041 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42041] = 30
                        mem[_42041 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _44373 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_44373 + idx + 68] = mem[_42041 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_44373 + 68] = mem[_44373 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _44373 + -mem[64] + 100
                        stor2[address(msg.sender)] -= arg2
                        mem[0] = msg.sender
                        mem[32] = 1
                        _47711 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47711] = 30
                        mem[_47711 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                            _50516 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_50516 + idx + 68] = mem[_47711 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_50516 + 68] = mem[_50516 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _50516 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 1
                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                        _57413 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_57413] = 30
                        mem[_57413 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                            return 1
                        _59345 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_59345 + idx + 68] = mem[_57413 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_59345 + 68] = mem[_59345 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _59345 + -mem[64] + 100
                    require 3 * arg2 / 100
                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _38018 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_38018] = 30
                    mem[_38018 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                        _39349 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_39349 + idx + 68] = mem[_38018 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_39349 + 68] = mem[_39349 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _39349 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 2
                    _44372 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_44372] = 30
                    mem[_44372 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 > stor2[address(msg.sender)]:
                        _46786 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_46786 + idx + 68] = mem[_44372 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_46786 + 68] = mem[_46786 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _46786 + -mem[64] + 100
                    stor2[address(msg.sender)] -= arg2
                    mem[0] = msg.sender
                    mem[32] = 1
                    _50513 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50513] = 30
                    mem[_50513 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                        _52747 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_52747 + idx + 68] = mem[_50513 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_52747 + 68] = mem[_52747 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _52747 + -mem[64] + 100
                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[0] = arg1
                    mem[32] = 1
                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                    _59344 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_59344] = 30
                    mem[_59344 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                        if totalFees + (3 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 3 * arg2 / 100
                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                            revert with 0, 
                                        32,
                                        40,
                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                        mem[mem[64] + 108 len 24]
                        return 1
                    _61037 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_61037 + idx + 68] = mem[_59344 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_61037 + 68] = mem[_61037 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _61037 + -mem[64] + 100
                _33434 = mem[64]
                mem[64] = mem[64] + 64
                mem[_33434] = 26
                mem[_33434 + 32] = 'SafeMath: division by zero'
                if t < stor6 / 10^18:
                    _34247 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_34247] = 26
                    mem[_34247 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if not 3 * arg2 / 100:
                            _37148 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37148] = 30
                            mem[_37148 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _42028 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42028] = 30
                            mem[_42028 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _47696 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_47696] = 30
                            mem[_47696 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _57403 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_57403] = 30
                            mem[_57403 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if 0 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _38011 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38011] = 30
                            mem[_38011 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _44358 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44358] = 30
                            mem[_44358 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _50495 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_50495] = 30
                            mem[_50495 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                            _59332 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_59332] = 30
                            mem[_59332 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                    else:
                        require arg2
                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            _38010 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38010] = 30
                            mem[_38010 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _44357 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44357] = 30
                            mem[_44357 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _50492 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_50492] = 30
                            mem[_50492 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _59331 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_59331] = 30
                            mem[_59331 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _39337 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39337] = 30
                            mem[_39337 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _46771 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_46771] = 30
                            mem[_46771 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _52726 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_52726] = 30
                            mem[_52726 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                            _61020 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_61020] = 30
                            mem[_61020 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                else:
                    _34246 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_34246] = 26
                    mem[_34246 + 32] = 'SafeMath: division by zero'
                    if s <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require s
                    if not arg2:
                        if not 3 * arg2 / 100:
                            _37147 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37147] = 30
                            mem[_37147 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _42023 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42023] = 30
                            mem[_42023 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _47693 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_47693] = 30
                            mem[_47693 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            _57398 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_57398] = 30
                            mem[_57398 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if 0 > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _38009 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38009] = 30
                            mem[_38009 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * t / s > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _44351 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44351] = 30
                            mem[_44351 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _50486 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_50486] = 30
                            mem[_50486 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                            _59326 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_59326] = 30
                            mem[_59326 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * t / s > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                    else:
                        require arg2
                        if arg2 * t / s / arg2 != t / s:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            _38008 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38008] = 30
                            mem[_38008 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _44350 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44350] = 30
                            mem[_44350 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _50483 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_50483] = 30
                            mem[_50483 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * t / s
                            _59325 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_59325] = 30
                            mem[_59325 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if arg2 * t / s > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _39330 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39330] = 30
                            mem[_39330 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _46761 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_46761] = 30
                            mem[_46761 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            mem[0] = msg.sender
                            mem[32] = 1
                            _52714 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_52714] = 30
                            mem[_52714 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                            _61012 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_61012] = 30
                            mem[_61012 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * t / s > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                revert with 0, 
                                            32,
                                            40,
                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                            mem[mem[64] + 108 len 24]
        else:
            if stor4[address(msg.sender)]:
                if stor4[address(msg.sender)]:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33723 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33723] = 26
                                    mem[_33723 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36141 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36141] = 30
                                        mem[_36141 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38159 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38159] = 30
                                        mem[_38159 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39663 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39663 + idx + 68] = mem[_38159 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39663 + 68] = mem[_39663 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39663 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47272 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47272] = 30
                                        mem[_47272 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _49877 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49877 + idx + 68] = mem[_47272 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49877 + 68] = mem[_49877 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49877 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36374 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36374] = 30
                                    mem[_36374 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _36905 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36905 + idx + 68] = mem[_36374 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36905 + 68] = mem[_36905 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36905 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39662 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39662] = 30
                                    mem[_39662 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _41407 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41407 + idx + 68] = mem[_39662 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41407 + 68] = mem[_41407 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41407 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _49876 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49876] = 30
                                    mem[_49876 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _52084 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52084 + idx + 68] = mem[_49876 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52084 + 68] = mem[_52084 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52084 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33847 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33847] = 30
                                    mem[_33847 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _34033 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34033 + idx + 68] = mem[_33847 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34033 + 68] = mem[_34033 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34033 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34808 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34808] = 30
                                    mem[_34808 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35089 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35089 + idx + 68] = mem[_34808 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35089 + 68] = mem[_35089 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35089 + -mem[64] + 100
                                _33909 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33909] = 26
                                mem[_33909 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36375 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36375] = 30
                                    mem[_36375 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39668 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39668] = 30
                                    mem[_39668 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41414 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41414 + idx + 68] = mem[_39668 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41414 + 68] = mem[_41414 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41414 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _49881 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49881] = 30
                                    mem[_49881 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _52089 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52089 + idx + 68] = mem[_49881 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52089 + 68] = mem[_52089 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52089 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36908 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36908] = 30
                                mem[_36908 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37669 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37669 + idx + 68] = mem[_36908 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37669 + 68] = mem[_37669 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37669 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41413 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41413] = 30
                                mem[_41413 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _43574 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43574 + idx + 68] = mem[_41413 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43574 + 68] = mem[_43574 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43574 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _52088 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52088] = 30
                                mem[_52088 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _54021 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54021 + idx + 68] = mem[_52088 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54021 + 68] = mem[_54021 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54021 + -mem[64] + 100
                            _33289 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33289] = 26
                            mem[_33289 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34189 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34189] = 26
                                mem[_34189 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36904 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36904] = 30
                                    mem[_36904 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41406 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41406] = 30
                                    mem[_41406 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _52083 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52083] = 30
                                    mem[_52083 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37666 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37666] = 30
                                    mem[_37666 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43564 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43564] = 30
                                    mem[_43564 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _54013 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54013] = 30
                                    mem[_54013 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34188 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34188] = 26
                                mem[_34188 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _36903 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36903] = 30
                                    mem[_36903 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41403 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41403] = 30
                                    mem[_41403 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _52081 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52081] = 30
                                    mem[_52081 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37665 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37665] = 30
                                    mem[_37665 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43560 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43560] = 30
                                    mem[_43560 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _54009 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54009] = 30
                                    mem[_54009 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33720 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33720] = 26
                                    mem[_33720 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36140 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36140] = 30
                                            mem[_36140 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38156 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38156] = 30
                                            mem[_38156 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39654 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39654 + idx + 68] = mem[_38156 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39654 + 68] = mem[_39654 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39654 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47261 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47261] = 30
                                            mem[_47261 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49862 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49862 + idx + 68] = mem[_47261 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49862 + 68] = mem[_49862 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49862 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36372 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36372] = 30
                                        mem[_36372 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _36898 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36898 + idx + 68] = mem[_36372 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36898 + 68] = mem[_36898 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36898 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39653 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39653] = 30
                                        mem[_39653 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41388 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41388 + idx + 68] = mem[_39653 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41388 + 68] = mem[_41388 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41388 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _49861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49861] = 30
                                        mem[_49861 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52070 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52070 + idx + 68] = mem[_49861 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52070 + 68] = mem[_52070 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52070 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36371 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36371] = 30
                                        mem[_36371 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36895 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36895 + idx + 68] = mem[_36371 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36895 + 68] = mem[_36895 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36895 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39652 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39652] = 30
                                        mem[_39652 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41385 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41385 + idx + 68] = mem[_39652 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41385 + 68] = mem[_41385 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41385 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49860 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49860] = 30
                                        mem[_49860 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52067 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52067 + idx + 68] = mem[_49860 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52067 + 68] = mem[_52067 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52067 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36894 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36894] = 30
                                    mem[_36894 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37652 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37652 + idx + 68] = mem[_36894 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37652 + 68] = mem[_37652 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37652 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41384 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41384] = 30
                                    mem[_41384 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43538 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43538 + idx + 68] = mem[_41384 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43538 + 68] = mem[_43538 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43538 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _52066 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52066] = 30
                                    mem[_52066 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53993 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53993 + idx + 68] = mem[_52066 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53993 + 68] = mem[_53993 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53993 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33846 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33846] = 30
                                    mem[_33846 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _34030 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34030 + idx + 68] = mem[_33846 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34030 + 68] = mem[_34030 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34030 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34806 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34806] = 30
                                    mem[_34806 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35084 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35084 + idx + 68] = mem[_34806 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35084 + 68] = mem[_35084 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35084 + -mem[64] + 100
                                _33908 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33908] = 26
                                mem[_33908 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36373 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36373] = 30
                                        mem[_36373 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39661 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39661] = 30
                                        mem[_39661 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41398 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41398 + idx + 68] = mem[_39661 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41398 + 68] = mem[_41398 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41398 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49869 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49869] = 30
                                        mem[_49869 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52077 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52077 + idx + 68] = mem[_49869 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52077 + 68] = mem[_52077 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52077 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36902 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36902] = 30
                                    mem[_36902 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37662 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37662 + idx + 68] = mem[_36902 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37662 + 68] = mem[_37662 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37662 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41397 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41397] = 30
                                    mem[_41397 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _43554 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43554 + idx + 68] = mem[_41397 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43554 + 68] = mem[_43554 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43554 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _52076 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52076] = 30
                                    mem[_52076 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54005 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54005 + idx + 68] = mem[_52076 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54005 + 68] = mem[_54005 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54005 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36901 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36901] = 30
                                    mem[_36901 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37659 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37659 + idx + 68] = mem[_36901 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37659 + 68] = mem[_37659 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37659 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41396 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41396] = 30
                                    mem[_41396 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43551 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43551 + idx + 68] = mem[_41396 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43551 + 68] = mem[_43551 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43551 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52075 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52075] = 30
                                    mem[_52075 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54002 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54002 + idx + 68] = mem[_52075 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54002 + 68] = mem[_54002 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54002 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37658 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37658] = 30
                                mem[_37658 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _38824 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38824 + idx + 68] = mem[_37658 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38824 + 68] = mem[_38824 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38824 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43550 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43550] = 30
                                mem[_43550 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _45900 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_45900 + idx + 68] = mem[_43550 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_45900 + 68] = mem[_45900 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _45900 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _54001 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_54001] = 30
                                mem[_54001 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55988 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55988 + idx + 68] = mem[_54001 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55988 + 68] = mem[_55988 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55988 + -mem[64] + 100
                            _33284 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33284] = 26
                            mem[_33284 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34187 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34187] = 26
                                mem[_34187 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36893 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36893] = 30
                                        mem[_36893 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41383 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41383] = 30
                                        mem[_41383 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52065 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52065] = 30
                                        mem[_52065 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37651 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37651] = 30
                                        mem[_37651 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43534 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43534] = 30
                                        mem[_43534 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _53989 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53989] = 30
                                        mem[_53989 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37650 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37650] = 30
                                        mem[_37650 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43533 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43533] = 30
                                        mem[_43533 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _53988 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53988] = 30
                                        mem[_53988 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38812 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38812] = 30
                                        mem[_38812 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45881 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45881] = 30
                                        mem[_45881 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _55971 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55971] = 30
                                        mem[_55971 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34186 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34186] = 26
                                mem[_34186 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36892 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36892] = 30
                                        mem[_36892 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41378 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41378] = 30
                                        mem[_41378 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52060 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52060] = 30
                                        mem[_52060 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37649 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37649] = 30
                                        mem[_37649 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43527 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43527] = 30
                                        mem[_43527 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _53983 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53983] = 30
                                        mem[_53983 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37648 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37648] = 30
                                        mem[_37648 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43526 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43526] = 30
                                        mem[_43526 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _53982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53982] = 30
                                        mem[_53982 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _38805 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38805] = 30
                                        mem[_38805 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _45871 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45871] = 30
                                        mem[_45871 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _55963 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55963] = 30
                                        mem[_55963 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not stor4[address(arg1)]:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33729 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33729] = 26
                                        mem[_33729 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36143 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36143] = 30
                                            mem[_36143 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38167 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38167] = 30
                                            mem[_38167 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39682 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39682 + idx + 68] = mem[_38167 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39682 + 68] = mem[_39682 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39682 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47295 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47295] = 30
                                            mem[_47295 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _49910 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49910 + idx + 68] = mem[_47295 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49910 + 68] = mem[_49910 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49910 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36379 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36379] = 30
                                        mem[_36379 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36922 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36922 + idx + 68] = mem[_36379 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36922 + 68] = mem[_36922 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36922 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39681 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39681] = 30
                                        mem[_39681 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41450 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41450 + idx + 68] = mem[_39681 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41450 + 68] = mem[_41450 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41450 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _49909 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49909] = 30
                                        mem[_49909 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52120 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52120 + idx + 68] = mem[_49909 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52120 + 68] = mem[_52120 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52120 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33849 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33849] = 30
                                        mem[_33849 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34039 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34039 + idx + 68] = mem[_33849 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34039 + 68] = mem[_34039 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34039 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34812 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34812] = 30
                                        mem[_34812 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35099 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35099 + idx + 68] = mem[_34812 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35099 + 68] = mem[_35099 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35099 + -mem[64] + 100
                                    _33911 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33911] = 26
                                    mem[_33911 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36380 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36380] = 30
                                        mem[_36380 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39687 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39687] = 30
                                        mem[_39687 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41457 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41457 + idx + 68] = mem[_39687 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41457 + 68] = mem[_41457 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41457 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _49914 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49914] = 30
                                        mem[_49914 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52125 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52125 + idx + 68] = mem[_49914 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52125 + 68] = mem[_52125 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52125 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36925 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36925] = 30
                                    mem[_36925 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37693 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37693 + idx + 68] = mem[_36925 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37693 + 68] = mem[_37693 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37693 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41456 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41456] = 30
                                    mem[_41456 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43630 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43630 + idx + 68] = mem[_41456 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43630 + 68] = mem[_43630 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43630 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52124 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52124] = 30
                                    mem[_52124 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54065 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54065 + idx + 68] = mem[_52124 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54065 + 68] = mem[_54065 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54065 + -mem[64] + 100
                                _33299 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33299] = 26
                                mem[_33299 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34193 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34193] = 26
                                    mem[_34193 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36921 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36921] = 30
                                        mem[_36921 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41449 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41449] = 30
                                        mem[_41449 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52119 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52119] = 30
                                        mem[_52119 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37690 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37690] = 30
                                        mem[_37690 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43620 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43620] = 30
                                        mem[_43620 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _54057 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54057] = 30
                                        mem[_54057 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34192 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34192] = 26
                                    mem[_34192 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36920 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36920] = 30
                                        mem[_36920 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41446 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41446] = 30
                                        mem[_41446 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52117 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52117] = 30
                                        mem[_52117 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37689 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37689] = 30
                                        mem[_37689 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43616 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43616] = 30
                                        mem[_43616 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _54053 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54053] = 30
                                        mem[_54053 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33726 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33726] = 26
                                        mem[_33726 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36142 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36142] = 30
                                                mem[_36142 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38164 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38164] = 30
                                                mem[_38164 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39673 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39673 + idx + 68] = mem[_38164 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39673 + 68] = mem[_39673 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39673 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47284 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47284] = 30
                                                mem[_47284 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _49895 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49895 + idx + 68] = mem[_47284 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49895 + 68] = mem[_49895 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49895 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36377 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36377] = 30
                                            mem[_36377 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36915 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36915 + idx + 68] = mem[_36377 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36915 + 68] = mem[_36915 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36915 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39672 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39672] = 30
                                            mem[_39672 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41431 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41431 + idx + 68] = mem[_39672 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41431 + 68] = mem[_41431 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41431 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _49894 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49894] = 30
                                            mem[_49894 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52106 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52106 + idx + 68] = mem[_49894 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52106 + 68] = mem[_52106 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52106 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36376 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36376] = 30
                                            mem[_36376 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36912 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36912 + idx + 68] = mem[_36376 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36912 + 68] = mem[_36912 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36912 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39671 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39671] = 30
                                            mem[_39671 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41428 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41428 + idx + 68] = mem[_39671 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41428 + 68] = mem[_41428 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41428 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _49893 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49893] = 30
                                            mem[_49893 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52103 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52103 + idx + 68] = mem[_49893 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52103 + 68] = mem[_52103 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52103 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36911 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36911] = 30
                                        mem[_36911 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37676 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37676 + idx + 68] = mem[_36911 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37676 + 68] = mem[_37676 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37676 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41427 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41427] = 30
                                        mem[_41427 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43594 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43594 + idx + 68] = mem[_41427 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43594 + 68] = mem[_43594 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43594 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _52102 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52102] = 30
                                        mem[_52102 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54037 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54037 + idx + 68] = mem[_52102 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54037 + 68] = mem[_54037 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54037 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33848 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33848] = 30
                                        mem[_33848 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34036 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34036 + idx + 68] = mem[_33848 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34036 + 68] = mem[_34036 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34036 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34810 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34810] = 30
                                        mem[_34810 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35094 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35094 + idx + 68] = mem[_34810 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35094 + 68] = mem[_35094 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35094 + -mem[64] + 100
                                    _33910 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33910] = 26
                                    mem[_33910 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36378 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36378] = 30
                                            mem[_36378 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39680 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39680] = 30
                                            mem[_39680 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41441 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41441 + idx + 68] = mem[_39680 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41441 + 68] = mem[_41441 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41441 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _49902 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49902] = 30
                                            mem[_49902 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52113 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52113 + idx + 68] = mem[_49902 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52113 + 68] = mem[_52113 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52113 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36919 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36919] = 30
                                        mem[_36919 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37686 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37686 + idx + 68] = mem[_36919 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37686 + 68] = mem[_37686 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37686 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41440 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41440] = 30
                                        mem[_41440 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _43610 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43610 + idx + 68] = mem[_41440 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43610 + 68] = mem[_43610 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43610 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _52112 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52112] = 30
                                        mem[_52112 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54049 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54049 + idx + 68] = mem[_52112 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54049 + 68] = mem[_54049 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54049 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36918 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36918] = 30
                                        mem[_36918 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37683 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37683 + idx + 68] = mem[_36918 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37683 + 68] = mem[_37683 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37683 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41439 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41439] = 30
                                        mem[_41439 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43607 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43607 + idx + 68] = mem[_41439 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43607 + 68] = mem[_43607 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43607 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52111 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52111] = 30
                                        mem[_52111 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54046 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54046 + idx + 68] = mem[_52111 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54046 + 68] = mem[_54046 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54046 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37682 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37682] = 30
                                    mem[_37682 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38859 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38859 + idx + 68] = mem[_37682 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38859 + 68] = mem[_38859 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38859 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43606 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43606] = 30
                                    mem[_43606 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _45962 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45962 + idx + 68] = mem[_43606 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45962 + 68] = mem[_45962 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45962 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _54045 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54045] = 30
                                    mem[_54045 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _56038 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_56038 + idx + 68] = mem[_54045 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_56038 + 68] = mem[_56038 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _56038 + -mem[64] + 100
                                _33294 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33294] = 26
                                mem[_33294 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34191 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34191] = 26
                                    mem[_34191 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36910 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36910] = 30
                                            mem[_36910 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41426 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41426] = 30
                                            mem[_41426 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52101 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52101] = 30
                                            mem[_52101 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37675 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37675] = 30
                                            mem[_37675 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43590 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43590] = 30
                                            mem[_43590 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _54033 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54033] = 30
                                            mem[_54033 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37674 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37674] = 30
                                            mem[_37674 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43589 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43589] = 30
                                            mem[_43589 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54032 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54032] = 30
                                            mem[_54032 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38847 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38847] = 30
                                            mem[_38847 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45943 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45943] = 30
                                            mem[_45943 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _56021 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56021] = 30
                                            mem[_56021 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34190 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34190] = 26
                                    mem[_34190 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36909 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36909] = 30
                                            mem[_36909 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41421 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41421] = 30
                                            mem[_41421 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52096 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52096] = 30
                                            mem[_52096 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37673 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37673] = 30
                                            mem[_37673 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43583 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43583] = 30
                                            mem[_43583 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _54027 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54027] = 30
                                            mem[_54027 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37672 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37672] = 30
                                            mem[_37672 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43582 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43582] = 30
                                            mem[_43582 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54026 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54026] = 30
                                            mem[_54026 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38840 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38840] = 30
                                            mem[_38840 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _45933 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45933] = 30
                                            mem[_45933 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _56013 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56013] = 30
                                            mem[_56013 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33735 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33735] = 26
                                        mem[_33735 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36145 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36145] = 30
                                            mem[_36145 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _38175 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38175] = 30
                                            mem[_38175 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _39701 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39701 + idx + 68] = mem[_38175 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39701 + 68] = mem[_39701 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39701 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42429 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42429] = 30
                                            mem[_42429 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _44729 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44729 + idx + 68] = mem[_42429 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44729 + 68] = mem[_44729 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44729 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _56095 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56095] = 30
                                            mem[_56095 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _58124 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58124 + idx + 68] = mem[_56095 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58124 + 68] = mem[_58124 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58124 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36384 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36384] = 30
                                        mem[_36384 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36939 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36939 + idx + 68] = mem[_36384 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36939 + 68] = mem[_36939 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36939 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39700 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39700] = 30
                                        mem[_39700 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41493 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41493 + idx + 68] = mem[_39700 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41493 + 68] = mem[_41493 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41493 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44726 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44726] = 30
                                        mem[_44726 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _47332 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47332 + idx + 68] = mem[_44726 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47332 + 68] = mem[_47332 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47332 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _58123 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58123] = 30
                                        mem[_58123 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _60008 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60008 + idx + 68] = mem[_58123 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60008 + 68] = mem[_60008 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60008 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33851 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33851] = 30
                                        mem[_33851 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34045 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34045 + idx + 68] = mem[_33851 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34045 + 68] = mem[_34045 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34045 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34816 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34816] = 30
                                        mem[_34816 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35109 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35109 + idx + 68] = mem[_34816 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35109 + 68] = mem[_35109 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35109 + -mem[64] + 100
                                    _33913 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33913] = 26
                                    mem[_33913 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36385 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36385] = 30
                                        mem[_36385 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _39706 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39706] = 30
                                        mem[_39706 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _41500 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41500 + idx + 68] = mem[_39706 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41500 + 68] = mem[_41500 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41500 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44732 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44732] = 30
                                        mem[_44732 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _47341 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47341 + idx + 68] = mem[_44732 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47341 + 68] = mem[_47341 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47341 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _58128 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58128] = 30
                                        mem[_58128 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _60013 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60013 + idx + 68] = mem[_58128 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60013 + 68] = mem[_60013 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60013 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36942 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36942] = 30
                                    mem[_36942 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37717 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37717 + idx + 68] = mem[_36942 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37717 + 68] = mem[_37717 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37717 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _41499 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41499] = 30
                                    mem[_41499 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _43682 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43682 + idx + 68] = mem[_41499 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43682 + 68] = mem[_43682 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43682 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _47338 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47338] = 30
                                    mem[_47338 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _49975 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49975 + idx + 68] = mem[_47338 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49975 + 68] = mem[_49975 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49975 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _60012 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_60012] = 30
                                    mem[_60012 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _61542 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_61542 + idx + 68] = mem[_60012 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_61542 + 68] = mem[_61542 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _61542 + -mem[64] + 100
                                _33309 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33309] = 26
                                mem[_33309 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34197 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34197] = 26
                                    mem[_34197 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36938 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36938] = 30
                                        mem[_36938 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41492 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41492] = 30
                                        mem[_41492 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47329 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47329] = 30
                                        mem[_47329 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _60007 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_60007] = 30
                                        mem[_60007 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37714 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37714] = 30
                                        mem[_37714 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43674 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43674] = 30
                                        mem[_43674 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49963 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49963] = 30
                                        mem[_49963 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _61534 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61534] = 30
                                        mem[_61534 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34196 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34196] = 26
                                    mem[_34196 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36937 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36937] = 30
                                        mem[_36937 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41489 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41489] = 30
                                        mem[_41489 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47326 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47326] = 30
                                        mem[_47326 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _60005 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_60005] = 30
                                        mem[_60005 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37713 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37713] = 30
                                        mem[_37713 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43670 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43670] = 30
                                        mem[_43670 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _49957 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49957] = 30
                                        mem[_49957 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _61530 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61530] = 30
                                        mem[_61530 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33732 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33732] = 26
                                        mem[_33732 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36144 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36144] = 30
                                                mem[_36144 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38172 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38172] = 30
                                                mem[_38172 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39692 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39692 + idx + 68] = mem[_38172 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39692 + 68] = mem[_39692 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39692 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _42420 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_42420] = 30
                                                mem[_42420 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44720 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44720 + idx + 68] = mem[_42420 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44720 + 68] = mem[_44720 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44720 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56083 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56083] = 30
                                                mem[_56083 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _58115 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58115 + idx + 68] = mem[_56083 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58115 + 68] = mem[_58115 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58115 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36382 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36382] = 30
                                            mem[_36382 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36932 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36932 + idx + 68] = mem[_36382 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36932 + 68] = mem[_36932 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36932 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39691 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39691] = 30
                                            mem[_39691 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41474 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41474 + idx + 68] = mem[_39691 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41474 + 68] = mem[_41474 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41474 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44717 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44717] = 30
                                            mem[_44717 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47311 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47311 + idx + 68] = mem[_44717 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47311 + 68] = mem[_47311 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47311 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _58114 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58114] = 30
                                            mem[_58114 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59994 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59994 + idx + 68] = mem[_58114 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59994 + 68] = mem[_59994 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59994 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36381] = 30
                                            mem[_36381 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36929 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36929 + idx + 68] = mem[_36381 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36929 + 68] = mem[_36929 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36929 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39690 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39690] = 30
                                            mem[_39690 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41471 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41471 + idx + 68] = mem[_39690 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41471 + 68] = mem[_41471 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41471 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44714 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44714] = 30
                                            mem[_44714 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _47308 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47308 + idx + 68] = mem[_44714 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47308 + 68] = mem[_47308 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47308 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _58113 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58113] = 30
                                            mem[_58113 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _59991 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59991 + idx + 68] = mem[_58113 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59991 + 68] = mem[_59991 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59991 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36928 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36928] = 30
                                        mem[_36928 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37700 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37700 + idx + 68] = mem[_36928 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37700 + 68] = mem[_37700 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37700 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41470 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41470] = 30
                                        mem[_41470 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43650 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43650 + idx + 68] = mem[_41470 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43650 + 68] = mem[_43650 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43650 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47305 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47305] = 30
                                        mem[_47305 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49933 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49933 + idx + 68] = mem[_47305 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49933 + 68] = mem[_49933 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49933 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _59990 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59990] = 30
                                        mem[_59990 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61514 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61514 + idx + 68] = mem[_59990 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61514 + 68] = mem[_61514 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61514 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33850 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33850] = 30
                                        mem[_33850 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34042 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34042 + idx + 68] = mem[_33850 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34042 + 68] = mem[_34042 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34042 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34814 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34814] = 30
                                        mem[_34814 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35104 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35104 + idx + 68] = mem[_34814 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35104 + 68] = mem[_35104 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35104 + -mem[64] + 100
                                    _33912 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33912] = 26
                                    mem[_33912 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36383 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36383] = 30
                                            mem[_36383 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39699] = 30
                                            mem[_39699 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41484 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41484 + idx + 68] = mem[_39699 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41484 + 68] = mem[_41484 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41484 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44723 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44723] = 30
                                            mem[_44723 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47323 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47323 + idx + 68] = mem[_44723 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47323 + 68] = mem[_47323 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47323 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _58120 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58120] = 30
                                            mem[_58120 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _60001 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60001 + idx + 68] = mem[_58120 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60001 + 68] = mem[_60001 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60001 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36936 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36936] = 30
                                        mem[_36936 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37710 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37710 + idx + 68] = mem[_36936 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37710 + 68] = mem[_37710 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37710 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41483 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41483] = 30
                                        mem[_41483 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43664 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43664 + idx + 68] = mem[_41483 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43664 + 68] = mem[_43664 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43664 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47320 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47320] = 30
                                        mem[_47320 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _49951 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49951 + idx + 68] = mem[_47320 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49951 + 68] = mem[_49951 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49951 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _60000 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_60000] = 30
                                        mem[_60000 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61526 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61526 + idx + 68] = mem[_60000 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61526 + 68] = mem[_61526 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61526 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36935 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36935] = 30
                                        mem[_36935 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37707 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37707 + idx + 68] = mem[_36935 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37707 + 68] = mem[_37707 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37707 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41482 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41482] = 30
                                        mem[_41482 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43661 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43661 + idx + 68] = mem[_41482 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43661 + 68] = mem[_43661 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43661 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47317 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47317] = 30
                                        mem[_47317 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _49948 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49948 + idx + 68] = mem[_47317 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49948 + 68] = mem[_49948 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49948 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _59999 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59999] = 30
                                        mem[_59999 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61523 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61523 + idx + 68] = mem[_59999 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61523 + 68] = mem[_61523 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61523 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37706 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37706] = 30
                                    mem[_37706 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38894 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38894 + idx + 68] = mem[_37706 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38894 + 68] = mem[_38894 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38894 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _43660 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43660] = 30
                                    mem[_43660 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _46020 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_46020 + idx + 68] = mem[_43660 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_46020 + 68] = mem[_46020 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _46020 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _49945 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49945] = 30
                                    mem[_49945 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _52161 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52161 + idx + 68] = mem[_49945 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52161 + 68] = mem[_52161 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52161 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _61522 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_61522] = 30
                                    mem[_61522 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _62716 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_62716 + idx + 68] = mem[_61522 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_62716 + 68] = mem[_62716 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _62716 + -mem[64] + 100
                                _33304 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33304] = 26
                                mem[_33304 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34195 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34195] = 26
                                    mem[_34195 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36927 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36927] = 30
                                            mem[_36927 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41469 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41469] = 30
                                            mem[_41469 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47302 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47302] = 30
                                            mem[_47302 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59989 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59989] = 30
                                            mem[_59989 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37699] = 30
                                            mem[_37699 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43646 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43646] = 30
                                            mem[_43646 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49927 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49927] = 30
                                            mem[_49927 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _61510 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61510] = 30
                                            mem[_61510 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37698 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37698] = 30
                                            mem[_37698 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43645 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43645] = 30
                                            mem[_43645 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49924 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49924] = 30
                                            mem[_49924 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _61509 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61509] = 30
                                            mem[_61509 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38882 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38882] = 30
                                            mem[_38882 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46005 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46005] = 30
                                            mem[_46005 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _52140 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52140] = 30
                                            mem[_52140 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _62699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_62699] = 30
                                            mem[_62699 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34194 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34194] = 26
                                    mem[_34194 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36926 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36926] = 30
                                            mem[_36926 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41464 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41464] = 30
                                            mem[_41464 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47299 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47299] = 30
                                            mem[_47299 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _59986 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59986] = 30
                                            mem[_59986 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37697 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37697] = 30
                                            mem[_37697 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43639 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43639] = 30
                                            mem[_43639 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49918 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49918] = 30
                                            mem[_49918 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _61504 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61504] = 30
                                            mem[_61504 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37696 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37696] = 30
                                            mem[_37696 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43638 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43638] = 30
                                            mem[_43638 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _49915 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49915] = 30
                                            mem[_49915 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _61503 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61503] = 30
                                            mem[_61503 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38875 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38875] = 30
                                            mem[_38875 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _45995 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45995] = 30
                                            mem[_45995 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _52128 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52128] = 30
                                            mem[_52128 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _62691 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_62691] = 30
                                            mem[_62691 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33759 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33759] = 26
                                    mem[_33759 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36153 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36153] = 30
                                        mem[_36153 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38207 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38207] = 30
                                        mem[_38207 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39777 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39777 + idx + 68] = mem[_38207 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39777 + 68] = mem[_39777 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39777 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47454 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47454] = 30
                                        mem[_47454 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _50141 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50141 + idx + 68] = mem[_47454 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50141 + 68] = mem[_50141 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50141 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36404 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36404] = 30
                                    mem[_36404 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37007 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37007 + idx + 68] = mem[_36404 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37007 + 68] = mem[_37007 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37007 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39776 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39776] = 30
                                    mem[_39776 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _41665 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41665 + idx + 68] = mem[_39776 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41665 + 68] = mem[_41665 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41665 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _50140 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50140] = 30
                                    mem[_50140 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _52360 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52360 + idx + 68] = mem[_50140 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52360 + 68] = mem[_52360 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52360 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33859 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33859] = 30
                                    mem[_33859 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _34069 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34069 + idx + 68] = mem[_33859 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34069 + 68] = mem[_34069 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34069 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34832 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34832] = 30
                                    mem[_34832 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35149 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35149 + idx + 68] = mem[_34832 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35149 + 68] = mem[_35149 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35149 + -mem[64] + 100
                                _33921 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33921] = 26
                                mem[_33921 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36405 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36405] = 30
                                    mem[_36405 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39782 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39782] = 30
                                    mem[_39782 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41672 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41672 + idx + 68] = mem[_39782 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41672 + 68] = mem[_41672 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41672 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _50145 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50145] = 30
                                    mem[_50145 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _52365 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52365 + idx + 68] = mem[_50145 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52365 + 68] = mem[_52365 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52365 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37010 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37010] = 30
                                mem[_37010 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37813 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37813 + idx + 68] = mem[_37010 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37813 + 68] = mem[_37813 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37813 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41671 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41671] = 30
                                mem[_41671 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _43902 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43902 + idx + 68] = mem[_41671 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43902 + 68] = mem[_43902 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43902 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _52364 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52364] = 30
                                mem[_52364 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _54303 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54303 + idx + 68] = mem[_52364 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54303 + 68] = mem[_54303 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54303 + -mem[64] + 100
                            _33349 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33349] = 26
                            mem[_33349 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34213 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34213] = 26
                                mem[_34213 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _37006 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37006] = 30
                                    mem[_37006 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41664 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41664] = 30
                                    mem[_41664 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _52359 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52359] = 30
                                    mem[_52359 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37810 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37810] = 30
                                    mem[_37810 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43892 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43892] = 30
                                    mem[_43892 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _54295 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54295] = 30
                                    mem[_54295 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                _34212 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34212] = 26
                                mem[_34212 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    _37005 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37005] = 30
                                    mem[_37005 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41661 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41661] = 30
                                    mem[_41661 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _52357 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52357] = 30
                                    mem[_52357 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37809 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37809] = 30
                                    mem[_37809 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43888 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43888] = 30
                                    mem[_43888 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _54291 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54291] = 30
                                    mem[_54291 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 10^18
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _33756 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33756] = 26
                                    mem[_33756 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36152 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36152] = 30
                                            mem[_36152 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38204 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38204] = 30
                                            mem[_38204 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39768 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39768 + idx + 68] = mem[_38204 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39768 + 68] = mem[_39768 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39768 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47443 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47443] = 30
                                            mem[_47443 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _50126 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50126 + idx + 68] = mem[_47443 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50126 + 68] = mem[_50126 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50126 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36402 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36402] = 30
                                        mem[_36402 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37000 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37000 + idx + 68] = mem[_36402 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37000 + 68] = mem[_37000 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37000 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39767 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39767] = 30
                                        mem[_39767 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41646 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41646 + idx + 68] = mem[_39767 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41646 + 68] = mem[_41646 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41646 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _50125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50125] = 30
                                        mem[_50125 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52346 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52346 + idx + 68] = mem[_50125 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52346 + 68] = mem[_52346 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52346 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36401] = 30
                                        mem[_36401 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36997 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36997 + idx + 68] = mem[_36401 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36997 + 68] = mem[_36997 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36997 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39766 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39766] = 30
                                        mem[_39766 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41643 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41643 + idx + 68] = mem[_39766 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41643 + 68] = mem[_41643 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41643 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _50124 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50124] = 30
                                        mem[_50124 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52343 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52343 + idx + 68] = mem[_50124 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52343 + 68] = mem[_52343 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52343 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36996 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36996] = 30
                                    mem[_36996 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _37796 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37796 + idx + 68] = mem[_36996 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37796 + 68] = mem[_37796 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37796 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41642 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41642] = 30
                                    mem[_41642 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43866 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43866 + idx + 68] = mem[_41642 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43866 + 68] = mem[_43866 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43866 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _52342 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52342] = 30
                                    mem[_52342 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54275 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54275 + idx + 68] = mem[_52342 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54275 + 68] = mem[_54275 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54275 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _33858 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33858] = 30
                                    mem[_33858 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _34066 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_34066 + idx + 68] = mem[_33858 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_34066 + 68] = mem[_34066 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _34066 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _34830 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34830] = 30
                                    mem[_34830 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _35144 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35144 + idx + 68] = mem[_34830 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35144 + 68] = mem[_35144 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35144 + -mem[64] + 100
                                _33920 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33920] = 26
                                mem[_33920 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36403 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36403] = 30
                                        mem[_36403 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39775 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39775] = 30
                                        mem[_39775 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41656 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41656 + idx + 68] = mem[_39775 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41656 + 68] = mem[_41656 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41656 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _50133 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50133] = 30
                                        mem[_50133 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52353 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52353 + idx + 68] = mem[_50133 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52353 + 68] = mem[_52353 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52353 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37004 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37004] = 30
                                    mem[_37004 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37806 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37806 + idx + 68] = mem[_37004 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37806 + 68] = mem[_37806 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37806 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41655 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41655] = 30
                                    mem[_41655 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _43882 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43882 + idx + 68] = mem[_41655 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43882 + 68] = mem[_43882 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43882 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _52352 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52352] = 30
                                    mem[_52352 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54287 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54287 + idx + 68] = mem[_52352 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54287 + 68] = mem[_54287 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54287 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37003 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37003] = 30
                                    mem[_37003 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37803 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37803 + idx + 68] = mem[_37003 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37803 + 68] = mem[_37803 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37803 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41654 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41654] = 30
                                    mem[_41654 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43879 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43879 + idx + 68] = mem[_41654 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43879 + 68] = mem[_43879 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43879 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52351 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52351] = 30
                                    mem[_52351 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54284 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54284 + idx + 68] = mem[_52351 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54284 + 68] = mem[_54284 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54284 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37802 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37802] = 30
                                mem[_37802 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _39034 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39034 + idx + 68] = mem[_37802 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39034 + 68] = mem[_39034 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39034 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _43878 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_43878] = 30
                                mem[_43878 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _46252 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_46252 + idx + 68] = mem[_43878 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_46252 + 68] = mem[_46252 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _46252 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _54283 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_54283] = 30
                                mem[_54283 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _56256 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_56256 + idx + 68] = mem[_54283 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_56256 + 68] = mem[_56256 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _56256 + -mem[64] + 100
                            _33344 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33344] = 26
                            mem[_33344 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 10^18:
                                _34211 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34211] = 26
                                mem[_34211 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36995 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36995] = 30
                                        mem[_36995 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41641 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41641] = 30
                                        mem[_41641 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52341 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52341] = 30
                                        mem[_52341 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37795 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37795] = 30
                                        mem[_37795 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43862 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43862] = 30
                                        mem[_43862 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _54271 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54271] = 30
                                        mem[_54271 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37794 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37794] = 30
                                        mem[_37794 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43861] = 30
                                        mem[_43861 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _54270 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54270] = 30
                                        mem[_54270 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39022 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39022] = 30
                                        mem[_39022 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46233 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46233] = 30
                                        mem[_46233 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _56239 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56239] = 30
                                        mem[_56239 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                _34210 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34210] = 26
                                mem[_34210 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36994 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36994] = 30
                                        mem[_36994 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41636 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41636] = 30
                                        mem[_41636 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52336 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52336] = 30
                                        mem[_52336 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37793 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37793] = 30
                                        mem[_37793 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43855 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43855] = 30
                                        mem[_43855 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        _54265 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54265] = 30
                                        mem[_54265 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37792 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37792] = 30
                                        mem[_37792 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43854 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43854] = 30
                                        mem[_43854 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _54264 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54264] = 30
                                        mem[_54264 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39015 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39015] = 30
                                        mem[_39015 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _46223 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46223] = 30
                                        mem[_46223 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        _56231 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56231] = 30
                                        mem[_56231 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                    else:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33741 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33741] = 26
                                        mem[_33741 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36147 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36147] = 30
                                            mem[_36147 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38183 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38183] = 30
                                            mem[_38183 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39720 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39720 + idx + 68] = mem[_38183 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39720 + 68] = mem[_39720 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39720 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47363 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47363] = 30
                                            mem[_47363 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _50009 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50009 + idx + 68] = mem[_47363 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50009 + 68] = mem[_50009 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50009 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36389 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36389] = 30
                                        mem[_36389 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _36956 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36956 + idx + 68] = mem[_36389 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36956 + 68] = mem[_36956 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36956 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39719 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39719] = 30
                                        mem[_39719 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41536 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41536 + idx + 68] = mem[_39719 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41536 + 68] = mem[_41536 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41536 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _50008 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50008] = 30
                                        mem[_50008 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52222 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52222 + idx + 68] = mem[_50008 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52222 + 68] = mem[_52222 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52222 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33853 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33853] = 30
                                        mem[_33853 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34051 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34051 + idx + 68] = mem[_33853 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34051 + 68] = mem[_34051 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34051 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34820 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34820] = 30
                                        mem[_34820 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35119 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35119 + idx + 68] = mem[_34820 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35119 + 68] = mem[_35119 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35119 + -mem[64] + 100
                                    _33915 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33915] = 26
                                    mem[_33915 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36390 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36390] = 30
                                        mem[_36390 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39725 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39725] = 30
                                        mem[_39725 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41543 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41543 + idx + 68] = mem[_39725 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41543 + 68] = mem[_41543 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41543 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _50013 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50013] = 30
                                        mem[_50013 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52227 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52227 + idx + 68] = mem[_50013 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52227 + 68] = mem[_52227 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52227 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36959 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36959] = 30
                                    mem[_36959 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37741 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37741 + idx + 68] = mem[_36959 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37741 + 68] = mem[_37741 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37741 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41542 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41542] = 30
                                    mem[_41542 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43738 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43738 + idx + 68] = mem[_41542 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43738 + 68] = mem[_43738 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43738 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52226 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52226] = 30
                                    mem[_52226 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54162 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54162 + idx + 68] = mem[_52226 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54162 + 68] = mem[_54162 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54162 + -mem[64] + 100
                                _33319 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33319] = 26
                                mem[_33319 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34201 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34201] = 26
                                    mem[_34201 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36955 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36955] = 30
                                        mem[_36955 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41535 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41535] = 30
                                        mem[_41535 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52221 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52221] = 30
                                        mem[_52221 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37738 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37738] = 30
                                        mem[_37738 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43728 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43728] = 30
                                        mem[_43728 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _54154 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54154] = 30
                                        mem[_54154 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34200 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34200] = 26
                                    mem[_34200 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _36954 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36954] = 30
                                        mem[_36954 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41532 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41532] = 30
                                        mem[_41532 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52219 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52219] = 30
                                        mem[_52219 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37737 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37737] = 30
                                        mem[_37737 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43724 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43724] = 30
                                        mem[_43724 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _54150 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54150] = 30
                                        mem[_54150 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33738 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33738] = 26
                                        mem[_33738 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36146 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36146] = 30
                                                mem[_36146 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38180 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38180] = 30
                                                mem[_38180 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39711 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39711 + idx + 68] = mem[_38180 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39711 + 68] = mem[_39711 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39711 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47352 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47352] = 30
                                                mem[_47352 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _49994 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49994 + idx + 68] = mem[_47352 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49994 + 68] = mem[_49994 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49994 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36387 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36387] = 30
                                            mem[_36387 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _36949 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36949 + idx + 68] = mem[_36387 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36949 + 68] = mem[_36949 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36949 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39710 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39710] = 30
                                            mem[_39710 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41517 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41517 + idx + 68] = mem[_39710 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41517 + 68] = mem[_41517 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41517 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _49993 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49993] = 30
                                            mem[_49993 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52208 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52208 + idx + 68] = mem[_49993 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52208 + 68] = mem[_52208 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52208 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36386 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36386] = 30
                                            mem[_36386 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36946 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36946 + idx + 68] = mem[_36386 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36946 + 68] = mem[_36946 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36946 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39709 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39709] = 30
                                            mem[_39709 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41514 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41514 + idx + 68] = mem[_39709 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41514 + 68] = mem[_41514 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41514 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _49992 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49992] = 30
                                            mem[_49992 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52205 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52205 + idx + 68] = mem[_49992 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52205 + 68] = mem[_52205 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52205 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36945 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36945] = 30
                                        mem[_36945 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37724 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37724 + idx + 68] = mem[_36945 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37724 + 68] = mem[_37724 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37724 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41513 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41513] = 30
                                        mem[_41513 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43702 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43702 + idx + 68] = mem[_41513 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43702 + 68] = mem[_43702 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43702 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _52204 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52204] = 30
                                        mem[_52204 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54134 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54134 + idx + 68] = mem[_52204 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54134 + 68] = mem[_54134 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54134 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33852 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33852] = 30
                                        mem[_33852 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34048 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34048 + idx + 68] = mem[_33852 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34048 + 68] = mem[_34048 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34048 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34818 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34818] = 30
                                        mem[_34818 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35114 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35114 + idx + 68] = mem[_34818 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35114 + 68] = mem[_35114 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35114 + -mem[64] + 100
                                    _33914 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33914] = 26
                                    mem[_33914 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36388 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36388] = 30
                                            mem[_36388 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39718 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39718] = 30
                                            mem[_39718 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41527 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41527 + idx + 68] = mem[_39718 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41527 + 68] = mem[_41527 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41527 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _50001 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50001] = 30
                                            mem[_50001 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52215 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52215 + idx + 68] = mem[_50001 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52215 + 68] = mem[_52215 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52215 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36953 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36953] = 30
                                        mem[_36953 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37734 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37734 + idx + 68] = mem[_36953 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37734 + 68] = mem[_37734 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37734 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41526 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41526] = 30
                                        mem[_41526 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _43718 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43718 + idx + 68] = mem[_41526 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43718 + 68] = mem[_43718 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43718 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _52214 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52214] = 30
                                        mem[_52214 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54146 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54146 + idx + 68] = mem[_52214 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54146 + 68] = mem[_54146 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54146 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _36952 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36952] = 30
                                        mem[_36952 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37731 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37731 + idx + 68] = mem[_36952 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37731 + 68] = mem[_37731 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37731 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41525 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41525] = 30
                                        mem[_41525 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43715 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43715 + idx + 68] = mem[_41525 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43715 + 68] = mem[_43715 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43715 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52213 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52213] = 30
                                        mem[_52213 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54143 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54143 + idx + 68] = mem[_52213 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54143 + 68] = mem[_54143 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54143 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37730 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37730] = 30
                                    mem[_37730 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _38929 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38929 + idx + 68] = mem[_37730 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38929 + 68] = mem[_38929 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38929 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43714 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43714] = 30
                                    mem[_43714 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _46076 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_46076 + idx + 68] = mem[_43714 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_46076 + 68] = mem[_46076 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _46076 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _54142 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54142] = 30
                                    mem[_54142 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _56122 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_56122 + idx + 68] = mem[_54142 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_56122 + 68] = mem[_56122 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _56122 + -mem[64] + 100
                                _33314 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33314] = 26
                                mem[_33314 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34199 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34199] = 26
                                    mem[_34199 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36944 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36944] = 30
                                            mem[_36944 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41512 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41512] = 30
                                            mem[_41512 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52203 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52203] = 30
                                            mem[_52203 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37723 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37723] = 30
                                            mem[_37723 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43698 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43698] = 30
                                            mem[_43698 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _54130 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54130] = 30
                                            mem[_54130 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37722 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37722] = 30
                                            mem[_37722 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43697 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43697] = 30
                                            mem[_43697 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54129 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54129] = 30
                                            mem[_54129 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38917 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38917] = 30
                                            mem[_38917 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46057 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46057] = 30
                                            mem[_46057 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _56105 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56105] = 30
                                            mem[_56105 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34198 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34198] = 26
                                    mem[_34198 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36943 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36943] = 30
                                            mem[_36943 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41507 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41507] = 30
                                            mem[_41507 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52198 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52198] = 30
                                            mem[_52198 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37721 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37721] = 30
                                            mem[_37721 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43691 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43691] = 30
                                            mem[_43691 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _54124 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54124] = 30
                                            mem[_54124 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37720 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37720] = 30
                                            mem[_37720 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43690 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43690] = 30
                                            mem[_43690 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54123 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54123] = 30
                                            mem[_54123 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _38910 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38910] = 30
                                            mem[_38910 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46047 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46047] = 30
                                            mem[_46047 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _56097 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56097] = 30
                                            mem[_56097 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not stor4[address(arg1)]:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33747 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33747] = 26
                                            mem[_33747 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36149 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36149] = 30
                                                mem[_36149 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38191 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38191] = 30
                                                mem[_38191 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39739 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39739 + idx + 68] = mem[_38191 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39739 + 68] = mem[_39739 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39739 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47386 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47386] = 30
                                                mem[_47386 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _50042 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50042 + idx + 68] = mem[_47386 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50042 + 68] = mem[_50042 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50042 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36394 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36394] = 30
                                            mem[_36394 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36973 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36973 + idx + 68] = mem[_36394 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36973 + 68] = mem[_36973 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36973 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39738 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39738] = 30
                                            mem[_39738 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41579 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41579 + idx + 68] = mem[_39738 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41579 + 68] = mem[_41579 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41579 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _50041 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50041] = 30
                                            mem[_50041 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52258 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52258 + idx + 68] = mem[_50041 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52258 + 68] = mem[_52258 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52258 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33855 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33855] = 30
                                            mem[_33855 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34057 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34057 + idx + 68] = mem[_33855 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34057 + 68] = mem[_34057 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34057 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34824 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34824] = 30
                                            mem[_34824 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35129 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35129 + idx + 68] = mem[_34824 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35129 + 68] = mem[_35129 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35129 + -mem[64] + 100
                                        _33917 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33917] = 26
                                        mem[_33917 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36395 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36395] = 30
                                            mem[_36395 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39744 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39744] = 30
                                            mem[_39744 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41586 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41586 + idx + 68] = mem[_39744 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41586 + 68] = mem[_41586 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41586 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _50046 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50046] = 30
                                            mem[_50046 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52263 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52263 + idx + 68] = mem[_50046 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52263 + 68] = mem[_52263 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52263 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36976 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36976] = 30
                                        mem[_36976 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37765 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37765 + idx + 68] = mem[_36976 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37765 + 68] = mem[_37765 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37765 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41585 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41585] = 30
                                        mem[_41585 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43794 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43794 + idx + 68] = mem[_41585 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43794 + 68] = mem[_43794 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43794 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52262 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52262] = 30
                                        mem[_52262 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54206 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54206 + idx + 68] = mem[_52262 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54206 + 68] = mem[_54206 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54206 + -mem[64] + 100
                                    _33329 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33329] = 26
                                    mem[_33329 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34205 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34205] = 26
                                        mem[_34205 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36972 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36972] = 30
                                            mem[_36972 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41578 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41578] = 30
                                            mem[_41578 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52257 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52257] = 30
                                            mem[_52257 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37762 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37762] = 30
                                            mem[_37762 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43784 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43784] = 30
                                            mem[_43784 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54198 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54198] = 30
                                            mem[_54198 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34204 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34204] = 26
                                        mem[_34204 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _36971 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36971] = 30
                                            mem[_36971 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41575 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41575] = 30
                                            mem[_41575 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52255 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52255] = 30
                                            mem[_52255 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37761 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37761] = 30
                                            mem[_37761 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43780] = 30
                                            mem[_43780 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54194 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54194] = 30
                                            mem[_54194 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33744 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33744] = 26
                                            mem[_33744 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36148 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36148] = 30
                                                    mem[_36148 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38188 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38188] = 30
                                                    mem[_38188 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _39730 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39730 + idx + 68] = mem[_38188 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39730 + 68] = mem[_39730 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39730 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _47375 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47375] = 30
                                                    mem[_47375 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _50027 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50027 + idx + 68] = mem[_47375 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50027 + 68] = mem[_50027 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50027 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36392 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36392] = 30
                                                mem[_36392 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _36966 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36966 + idx + 68] = mem[_36392 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36966 + 68] = mem[_36966 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36966 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39729 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39729] = 30
                                                mem[_39729 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41560 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41560 + idx + 68] = mem[_39729 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41560 + 68] = mem[_41560 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41560 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _50026 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50026] = 30
                                                mem[_50026 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52244 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52244 + idx + 68] = mem[_50026 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52244 + 68] = mem[_52244 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52244 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36391 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36391] = 30
                                                mem[_36391 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _36963 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36963 + idx + 68] = mem[_36391 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36963 + 68] = mem[_36963 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36963 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39728 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39728] = 30
                                                mem[_39728 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _41557 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41557 + idx + 68] = mem[_39728 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41557 + 68] = mem[_41557 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41557 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _50025 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50025] = 30
                                                mem[_50025 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52241 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52241 + idx + 68] = mem[_50025 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52241 + 68] = mem[_52241 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52241 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36962 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36962] = 30
                                            mem[_36962 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37748 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37748 + idx + 68] = mem[_36962 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37748 + 68] = mem[_37748 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37748 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41556 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41556] = 30
                                            mem[_41556 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _43758 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43758 + idx + 68] = mem[_41556 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43758 + 68] = mem[_43758 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43758 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _52240 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52240] = 30
                                            mem[_52240 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54178 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54178 + idx + 68] = mem[_52240 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54178 + 68] = mem[_54178 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54178 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33854 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33854] = 30
                                            mem[_33854 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34054 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34054 + idx + 68] = mem[_33854 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34054 + 68] = mem[_34054 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34054 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34822 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34822] = 30
                                            mem[_34822 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35124 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35124 + idx + 68] = mem[_34822 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35124 + 68] = mem[_35124 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35124 + -mem[64] + 100
                                        _33916 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33916] = 26
                                        mem[_33916 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36393 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36393] = 30
                                                mem[_36393 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39737 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39737] = 30
                                                mem[_39737 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41570 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41570 + idx + 68] = mem[_39737 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41570 + 68] = mem[_41570 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41570 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _50034 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50034] = 30
                                                mem[_50034 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52251 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52251 + idx + 68] = mem[_50034 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52251 + 68] = mem[_52251 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52251 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36970 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36970] = 30
                                            mem[_36970 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37758 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37758 + idx + 68] = mem[_36970 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37758 + 68] = mem[_37758 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37758 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41569 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41569] = 30
                                            mem[_41569 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _43774 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43774 + idx + 68] = mem[_41569 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43774 + 68] = mem[_43774 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43774 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _52250 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52250] = 30
                                            mem[_52250 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54190 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54190 + idx + 68] = mem[_52250 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54190 + 68] = mem[_54190 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54190 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36969 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36969] = 30
                                            mem[_36969 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37755 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37755 + idx + 68] = mem[_36969 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37755 + 68] = mem[_37755 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37755 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41568 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41568] = 30
                                            mem[_41568 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _43771 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43771 + idx + 68] = mem[_41568 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43771 + 68] = mem[_43771 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43771 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _52249 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52249] = 30
                                            mem[_52249 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54187 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54187 + idx + 68] = mem[_52249 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54187 + 68] = mem[_54187 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54187 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37754 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37754] = 30
                                        mem[_37754 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _38964 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38964 + idx + 68] = mem[_37754 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38964 + 68] = mem[_38964 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38964 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43770 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43770] = 30
                                        mem[_43770 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _46138 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46138 + idx + 68] = mem[_43770 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46138 + 68] = mem[_46138 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46138 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _54186 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54186] = 30
                                        mem[_54186 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _56172 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_56172 + idx + 68] = mem[_54186 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_56172 + 68] = mem[_56172 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _56172 + -mem[64] + 100
                                    _33324 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33324] = 26
                                    mem[_33324 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34203 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34203] = 26
                                        mem[_34203 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36961 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36961] = 30
                                                mem[_36961 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41555 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41555] = 30
                                                mem[_41555 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52239 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52239] = 30
                                                mem[_52239 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37747 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37747] = 30
                                                mem[_37747 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43754 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43754] = 30
                                                mem[_43754 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _54174 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54174] = 30
                                                mem[_54174 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37746 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37746] = 30
                                                mem[_37746 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43753 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43753] = 30
                                                mem[_43753 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _54173 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54173] = 30
                                                mem[_54173 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38952 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38952] = 30
                                                mem[_38952 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46119 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46119] = 30
                                                mem[_46119 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _56155 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56155] = 30
                                                mem[_56155 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34202 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34202] = 26
                                        mem[_34202 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36960 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36960] = 30
                                                mem[_36960 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41550 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41550] = 30
                                                mem[_41550 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52234 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52234] = 30
                                                mem[_52234 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37745 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37745] = 30
                                                mem[_37745 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43747 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43747] = 30
                                                mem[_43747 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _54168 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54168] = 30
                                                mem[_54168 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37744 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37744] = 30
                                                mem[_37744 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43746 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43746] = 30
                                                mem[_43746 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _54167 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54167] = 30
                                                mem[_54167 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38945 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38945] = 30
                                                mem[_38945 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46109 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46109] = 30
                                                mem[_46109 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _56147 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56147] = 30
                                                mem[_56147 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                            else:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33753 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33753] = 26
                                            mem[_33753 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36151 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36151] = 30
                                                mem[_36151 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38199 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38199] = 30
                                                mem[_38199 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39758 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39758 + idx + 68] = mem[_38199 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39758 + 68] = mem[_39758 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39758 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _42491 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_42491] = 30
                                                mem[_42491 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44786 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44786 + idx + 68] = mem[_42491 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44786 + 68] = mem[_44786 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44786 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56229 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56229] = 30
                                                mem[_56229 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _58243 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58243 + idx + 68] = mem[_56229 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58243 + 68] = mem[_58243 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58243 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36399 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36399] = 30
                                            mem[_36399 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _36990 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36990 + idx + 68] = mem[_36399 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36990 + 68] = mem[_36990 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36990 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39757 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39757] = 30
                                            mem[_39757 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41622 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41622 + idx + 68] = mem[_39757 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41622 + 68] = mem[_41622 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41622 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44783 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44783] = 30
                                            mem[_44783 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _47423 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47423 + idx + 68] = mem[_44783 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47423 + 68] = mem[_47423 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47423 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _58242 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58242] = 30
                                            mem[_58242 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _60118 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60118 + idx + 68] = mem[_58242 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60118 + 68] = mem[_60118 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60118 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33857 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33857] = 30
                                            mem[_33857 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34063 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34063 + idx + 68] = mem[_33857 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34063 + 68] = mem[_34063 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34063 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34828 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34828] = 30
                                            mem[_34828 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35139 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35139 + idx + 68] = mem[_34828 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35139 + 68] = mem[_35139 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35139 + -mem[64] + 100
                                        _33919 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33919] = 26
                                        mem[_33919 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36400 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36400] = 30
                                            mem[_36400 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39763 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39763] = 30
                                            mem[_39763 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41629 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41629 + idx + 68] = mem[_39763 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41629 + 68] = mem[_41629 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41629 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44789 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44789] = 30
                                            mem[_44789 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47432 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47432 + idx + 68] = mem[_44789 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47432 + 68] = mem[_47432 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47432 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _58247 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58247] = 30
                                            mem[_58247 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _60123 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60123 + idx + 68] = mem[_58247 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60123 + 68] = mem[_60123 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60123 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36993 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36993] = 30
                                        mem[_36993 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37789 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37789 + idx + 68] = mem[_36993 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37789 + 68] = mem[_37789 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37789 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41628 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41628] = 30
                                        mem[_41628 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _43846 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43846 + idx + 68] = mem[_41628 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43846 + 68] = mem[_43846 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43846 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47429 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47429] = 30
                                        mem[_47429 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _50107 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50107 + idx + 68] = mem[_47429 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50107 + 68] = mem[_50107 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50107 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _60122 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_60122] = 30
                                        mem[_60122 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61626 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61626 + idx + 68] = mem[_60122 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61626 + 68] = mem[_61626 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61626 + -mem[64] + 100
                                    _33339 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33339] = 26
                                    mem[_33339 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34209 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34209] = 26
                                        mem[_34209 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36989 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36989] = 30
                                            mem[_36989 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41621 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41621] = 30
                                            mem[_41621 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47420 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47420] = 30
                                            mem[_47420 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _60117 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60117] = 30
                                            mem[_60117 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37786 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37786] = 30
                                            mem[_37786 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43838 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43838] = 30
                                            mem[_43838 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _50095 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50095] = 30
                                            mem[_50095 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _61618 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61618] = 30
                                            mem[_61618 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34208 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34208] = 26
                                        mem[_34208 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _36988 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36988] = 30
                                            mem[_36988 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41618 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41618] = 30
                                            mem[_41618 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47417 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47417] = 30
                                            mem[_47417 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _60115 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60115] = 30
                                            mem[_60115 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37785 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37785] = 30
                                            mem[_37785 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43834 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43834] = 30
                                            mem[_43834 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _50089 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50089] = 30
                                            mem[_50089 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _61614 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61614] = 30
                                            mem[_61614 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33750 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33750] = 26
                                            mem[_33750 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36150 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36150] = 30
                                                    mem[_36150 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38196 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38196] = 30
                                                    mem[_38196 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _39749 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39749 + idx + 68] = mem[_38196 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39749 + 68] = mem[_39749 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39749 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _42482 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_42482] = 30
                                                    mem[_42482 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _44777 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_44777 + idx + 68] = mem[_42482 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_44777 + 68] = mem[_44777 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _44777 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _56217 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56217] = 30
                                                    mem[_56217 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _58234 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58234 + idx + 68] = mem[_56217 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58234 + 68] = mem[_58234 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58234 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36397 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36397] = 30
                                                mem[_36397 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _36983 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36983 + idx + 68] = mem[_36397 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36983 + 68] = mem[_36983 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36983 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39748 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39748] = 30
                                                mem[_39748 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41603 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41603 + idx + 68] = mem[_39748 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41603 + 68] = mem[_41603 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41603 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44774 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44774] = 30
                                                mem[_44774 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47402 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47402 + idx + 68] = mem[_44774 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47402 + 68] = mem[_47402 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47402 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _58233 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58233] = 30
                                                mem[_58233 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60104 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60104 + idx + 68] = mem[_58233 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60104 + 68] = mem[_60104 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60104 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36396 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36396] = 30
                                                mem[_36396 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _36980 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36980 + idx + 68] = mem[_36396 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36980 + 68] = mem[_36980 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36980 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39747 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39747] = 30
                                                mem[_39747 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41600 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41600 + idx + 68] = mem[_39747 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41600 + 68] = mem[_41600 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41600 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44771 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44771] = 30
                                                mem[_44771 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _47399 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47399 + idx + 68] = mem[_44771 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47399 + 68] = mem[_47399 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47399 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _58232 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58232] = 30
                                                mem[_58232 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60101 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60101 + idx + 68] = mem[_58232 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60101 + 68] = mem[_60101 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60101 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36979 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36979] = 30
                                            mem[_36979 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37772 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37772 + idx + 68] = mem[_36979 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37772 + 68] = mem[_37772 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37772 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41599 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41599] = 30
                                            mem[_41599 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _43814 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43814 + idx + 68] = mem[_41599 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43814 + 68] = mem[_43814 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43814 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47396 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47396] = 30
                                            mem[_47396 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _50065 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50065 + idx + 68] = mem[_47396 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50065 + 68] = mem[_50065 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50065 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _60100 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60100] = 30
                                            mem[_60100 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61598 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61598 + idx + 68] = mem[_60100 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61598 + 68] = mem[_61598 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61598 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33856 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33856] = 30
                                            mem[_33856 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34060 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34060 + idx + 68] = mem[_33856 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34060 + 68] = mem[_34060 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34060 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34826 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34826] = 30
                                            mem[_34826 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35134 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35134 + idx + 68] = mem[_34826 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35134 + 68] = mem[_35134 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35134 + -mem[64] + 100
                                        _33918 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33918] = 26
                                        mem[_33918 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36398 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36398] = 30
                                                mem[_36398 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39756 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39756] = 30
                                                mem[_39756 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41613 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41613 + idx + 68] = mem[_39756 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41613 + 68] = mem[_41613 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41613 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44780 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44780] = 30
                                                mem[_44780 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47414 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47414 + idx + 68] = mem[_44780 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47414 + 68] = mem[_47414 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47414 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _58239 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58239] = 30
                                                mem[_58239 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60111 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60111 + idx + 68] = mem[_58239 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60111 + 68] = mem[_60111 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60111 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36987 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36987] = 30
                                            mem[_36987 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37782 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37782 + idx + 68] = mem[_36987 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37782 + 68] = mem[_37782 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37782 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41612 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41612] = 30
                                            mem[_41612 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _43828 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43828 + idx + 68] = mem[_41612 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43828 + 68] = mem[_43828 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43828 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47411 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47411] = 30
                                            mem[_47411 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _50083 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50083 + idx + 68] = mem[_47411 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50083 + 68] = mem[_50083 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50083 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _60110 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60110] = 30
                                            mem[_60110 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61610 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61610 + idx + 68] = mem[_60110 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61610 + 68] = mem[_61610 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61610 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36986 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36986] = 30
                                            mem[_36986 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37779 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37779 + idx + 68] = mem[_36986 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37779 + 68] = mem[_37779 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37779 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41611 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41611] = 30
                                            mem[_41611 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _43825 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43825 + idx + 68] = mem[_41611 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43825 + 68] = mem[_43825 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43825 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47408] = 30
                                            mem[_47408 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _50080 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50080 + idx + 68] = mem[_47408 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50080 + 68] = mem[_50080 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50080 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _60109 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60109] = 30
                                            mem[_60109 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61607 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61607 + idx + 68] = mem[_60109 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61607 + 68] = mem[_61607 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61607 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37778 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37778] = 30
                                        mem[_37778 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _38999 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38999 + idx + 68] = mem[_37778 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38999 + 68] = mem[_38999 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38999 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43824 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43824] = 30
                                        mem[_43824 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _46196 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46196 + idx + 68] = mem[_43824 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46196 + 68] = mem[_46196 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46196 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _50077 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50077] = 30
                                        mem[_50077 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _52299 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52299 + idx + 68] = mem[_50077 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52299 + 68] = mem[_52299 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52299 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _61606 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61606] = 30
                                        mem[_61606 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _62782 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_62782 + idx + 68] = mem[_61606 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_62782 + 68] = mem[_62782 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _62782 + -mem[64] + 100
                                    _33334 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33334] = 26
                                    mem[_33334 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34207 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34207] = 26
                                        mem[_34207 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36978 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36978] = 30
                                                mem[_36978 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41598 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41598] = 30
                                                mem[_41598 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47393 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47393] = 30
                                                mem[_47393 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _60099 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60099] = 30
                                                mem[_60099 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37771 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37771] = 30
                                                mem[_37771 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43810 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43810] = 30
                                                mem[_43810 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50059 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50059] = 30
                                                mem[_50059 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _61594 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61594] = 30
                                                mem[_61594 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37770 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37770] = 30
                                                mem[_37770 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43809 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43809] = 30
                                                mem[_43809 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50056 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50056] = 30
                                                mem[_50056 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _61593 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61593] = 30
                                                mem[_61593 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38987 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38987] = 30
                                                mem[_38987 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46181 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46181] = 30
                                                mem[_46181 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _52278 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52278] = 30
                                                mem[_52278 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _62765 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_62765] = 30
                                                mem[_62765 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34206 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34206] = 26
                                        mem[_34206 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36977 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36977] = 30
                                                mem[_36977 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41593 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41593] = 30
                                                mem[_41593 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47390 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47390] = 30
                                                mem[_47390 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _60096 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60096] = 30
                                                mem[_60096 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37769 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37769] = 30
                                                mem[_37769 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43803 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43803] = 30
                                                mem[_43803 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50050 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50050] = 30
                                                mem[_50050 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _61588 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61588] = 30
                                                mem[_61588 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37768 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37768] = 30
                                                mem[_37768 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43802 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43802] = 30
                                                mem[_43802 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50047 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50047] = 30
                                                mem[_50047 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _61587 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61587] = 30
                                                mem[_61587 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _38980 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38980] = 30
                                                mem[_38980 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46171 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46171] = 30
                                                mem[_46171 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _52266 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52266] = 30
                                                mem[_52266 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _62757 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_62757] = 30
                                                mem[_62757 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
            else:
                mem[0] = arg1
                mem[32] = 4
                if stor4[address(arg1)]:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not arg2 / 100:
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _33807 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33807] = 26
                                mem[_33807 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _36169 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36169] = 30
                                    mem[_36169 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38271 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38271] = 30
                                    mem[_38271 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39929 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39929 + idx + 68] = mem[_38271 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39929 + 68] = mem[_39929 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39929 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _51371 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51371] = 30
                                    mem[_51371 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _53281 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53281 + idx + 68] = mem[_51371 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53281 + 68] = mem[_53281 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53281 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36444 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36444] = 30
                                mem[_36444 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37143 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37143 + idx + 68] = mem[_36444 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37143 + 68] = mem[_37143 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37143 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39928 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39928] = 30
                                mem[_39928 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _42009 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42009 + idx + 68] = mem[_39928 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42009 + 68] = mem[_42009 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42009 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _53280 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53280] = 30
                                mem[_53280 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55278 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55278 + idx + 68] = mem[_53280 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55278 + 68] = mem[_55278 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55278 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _33875 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33875] = 30
                                mem[_33875 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _34117 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34117 + idx + 68] = mem[_33875 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34117 + 68] = mem[_34117 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34117 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _34864 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34864] = 30
                                mem[_34864 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _35229 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35229 + idx + 68] = mem[_34864 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35229 + 68] = mem[_35229 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35229 + -mem[64] + 100
                            _33937 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33937] = 26
                            mem[_33937 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _36445 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36445] = 30
                                mem[_36445 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39934 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39934] = 30
                                mem[_39934 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _42016 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42016 + idx + 68] = mem[_39934 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42016 + 68] = mem[_42016 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42016 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _53285 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53285] = 30
                                mem[_53285 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _55283 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55283 + idx + 68] = mem[_53285 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55283 + 68] = mem[_55283 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55283 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37146 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37146] = 30
                            mem[_37146 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 10^18:
                                _38005 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_38005 + idx + 68] = mem[_37146 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_38005 + 68] = mem[_38005 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _38005 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _42015 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42015] = 30
                            mem[_42015 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _44342 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_44342 + idx + 68] = mem[_42015 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_44342 + 68] = mem[_44342 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _44342 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                            _55282 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_55282] = 30
                            mem[_55282 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _57390 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_57390 + idx + 68] = mem[_55282 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_57390 + 68] = mem[_57390 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _57390 + -mem[64] + 100
                        _33429 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33429] = 26
                        mem[_33429 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 10^18:
                            _34245 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34245] = 26
                            mem[_34245 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _37142 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37142] = 30
                                mem[_37142 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42008 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42008] = 30
                                mem[_42008 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _55277 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_55277] = 30
                                mem[_55277 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _38002 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38002] = 30
                                mem[_38002 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _44332 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_44332] = 30
                                mem[_44332 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _57382 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_57382] = 30
                                mem[_57382 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                        else:
                            _34244 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34244] = 26
                            mem[_34244 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                _37141 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37141] = 30
                                mem[_37141 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42005 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42005] = 30
                                mem[_42005 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _55275 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_55275] = 30
                                mem[_55275 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if 0 > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _38001 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38001] = 30
                                mem[_38001 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _44328 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_44328] = 30
                                mem[_44328 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * t / s
                                _57378 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_57378] = 30
                                mem[_57378 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                if arg2 * t / s > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                    else:
                        require arg2 / 100
                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 10^18
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _33804 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33804] = 26
                                mem[_33804 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _36168 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36168] = 30
                                        mem[_36168 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38268 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38268] = 30
                                        mem[_38268 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39920 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39920 + idx + 68] = mem[_38268 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39920 + 68] = mem[_39920 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39920 + -mem[64] + 100
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _51359 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51359] = 30
                                        mem[_51359 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _53272 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53272 + idx + 68] = mem[_51359 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53272 + 68] = mem[_53272 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53272 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36442 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36442] = 30
                                    mem[_36442 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        _37136 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37136 + idx + 68] = mem[_36442 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37136 + 68] = mem[_37136 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37136 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39919 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39919] = 30
                                    mem[_39919 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41990 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41990 + idx + 68] = mem[_39919 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41990 + 68] = mem[_41990 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41990 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _53271 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53271] = 30
                                    mem[_53271 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _55264 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55264 + idx + 68] = mem[_53271 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55264 + 68] = mem[_55264 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55264 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _36441 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36441] = 30
                                    mem[_36441 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37133 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37133 + idx + 68] = mem[_36441 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37133 + 68] = mem[_37133 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37133 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39918 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39918] = 30
                                    mem[_39918 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _41987 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41987 + idx + 68] = mem[_39918 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41987 + 68] = mem[_41987 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41987 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _53270 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53270] = 30
                                    mem[_53270 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _55261 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55261 + idx + 68] = mem[_53270 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55261 + 68] = mem[_55261 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55261 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37132 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37132] = 30
                                mem[_37132 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                    _37988 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37988 + idx + 68] = mem[_37132 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37988 + 68] = mem[_37988 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37988 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41986 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41986] = 30
                                mem[_41986 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _44306 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44306 + idx + 68] = mem[_41986 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44306 + 68] = mem[_44306 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44306 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                _55260 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_55260] = 30
                                mem[_55260 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _57362 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_57362 + idx + 68] = mem[_55260 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_57362 + 68] = mem[_57362 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _57362 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _33874 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33874] = 30
                                mem[_33874 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _34114 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_34114 + idx + 68] = mem[_33874 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_34114 + 68] = mem[_34114 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _34114 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _34862 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34862] = 30
                                mem[_34862 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _35224 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35224 + idx + 68] = mem[_34862 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35224 + 68] = mem[_35224 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35224 + -mem[64] + 100
                            _33936 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33936] = 26
                            mem[_33936 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _36443 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36443] = 30
                                    mem[_36443 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39927 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39927] = 30
                                    mem[_39927 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42000 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42000 + idx + 68] = mem[_39927 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42000 + 68] = mem[_42000 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42000 + -mem[64] + 100
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _53277 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_53277] = 30
                                    mem[_53277 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _55271 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_55271 + idx + 68] = mem[_53277 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_55271 + 68] = mem[_55271 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _55271 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _37140 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37140] = 30
                                mem[_37140 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                    _37998 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37998 + idx + 68] = mem[_37140 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37998 + 68] = mem[_37998 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37998 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41999 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41999] = 30
                                mem[_41999 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _44322 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44322 + idx + 68] = mem[_41999 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44322 + 68] = mem[_44322 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44322 + -mem[64] + 100
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                _55270 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_55270] = 30
                                mem[_55270 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _57374 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_57374 + idx + 68] = mem[_55270 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_57374 + 68] = mem[_57374 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _57374 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _37139 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37139] = 30
                                mem[_37139 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 10^18:
                                    _37995 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37995 + idx + 68] = mem[_37139 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37995 + 68] = mem[_37995 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37995 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41998 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41998] = 30
                                mem[_41998 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                    _44319 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44319 + idx + 68] = mem[_41998 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44319 + 68] = mem[_44319 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44319 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                _55269 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_55269] = 30
                                mem[_55269 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                    return 1
                                _57371 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_57371 + idx + 68] = mem[_55269 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_57371 + 68] = mem[_57371 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _57371 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37994 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37994] = 30
                            mem[_37994 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                _39314 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_39314 + idx + 68] = mem[_37994 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_39314 + 68] = mem[_39314 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _39314 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _44318 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_44318] = 30
                            mem[_44318 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                _46728 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_46728 + idx + 68] = mem[_44318 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_46728 + 68] = mem[_46728 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _46728 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                            _57370 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_57370] = 30
                            mem[_57370 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                mem[mem[64] + 108 len 24]
                                return 1
                            _59299 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_59299 + idx + 68] = mem[_57370 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_59299 + 68] = mem[_59299 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _59299 + -mem[64] + 100
                        _33424 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33424] = 26
                        mem[_33424 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 10^18:
                            _34243 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34243] = 26
                            mem[_34243 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _37131 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37131] = 30
                                    mem[_37131 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41985 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41985] = 30
                                    mem[_41985 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _55259 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55259] = 30
                                    mem[_55259 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37987 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37987] = 30
                                    mem[_37987 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44302 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44302] = 30
                                    mem[_44302 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                    _57358 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57358] = 30
                                    mem[_57358 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37986 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37986] = 30
                                    mem[_37986 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44301 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44301] = 30
                                    mem[_44301 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _57357 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57357] = 30
                                    mem[_57357 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _39302 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39302] = 30
                                    mem[_39302 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46709 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46709] = 30
                                    mem[_46709 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _59282 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59282] = 30
                                    mem[_59282 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                        else:
                            _34242 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34242] = 26
                            mem[_34242 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _37130 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37130] = 30
                                    mem[_37130 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41980 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41980] = 30
                                    mem[_41980 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _55256 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55256] = 30
                                    mem[_55256 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if 0 > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37985 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37985] = 30
                                    mem[_37985 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44295 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44295] = 30
                                    mem[_44295 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                    _57352 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57352] = 30
                                    mem[_57352 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _37984 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37984] = 30
                                    mem[_37984 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44294 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44294] = 30
                                    mem[_44294 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * t / s
                                    _57351 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57351] = 30
                                    mem[_57351 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if arg2 * t / s > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _39295 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39295] = 30
                                    mem[_39295 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _46699 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46699] = 30
                                    mem[_46699 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                    _59274 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59274] = 30
                                    mem[_59274 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                    mem[mem[64] + 108 len 24]
                else:
                    if stor4[address(msg.sender)]:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33765 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33765] = 26
                                        mem[_33765 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36155 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36155] = 30
                                            mem[_36155 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38215 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38215] = 30
                                            mem[_38215 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39796 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39796 + idx + 68] = mem[_38215 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39796 + 68] = mem[_39796 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39796 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47477 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47477] = 30
                                            mem[_47477 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _50174 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50174 + idx + 68] = mem[_47477 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50174 + 68] = mem[_50174 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50174 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36409 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36409] = 30
                                        mem[_36409 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37024 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37024 + idx + 68] = mem[_36409 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37024 + 68] = mem[_37024 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37024 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39795 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39795] = 30
                                        mem[_39795 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41708 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41708 + idx + 68] = mem[_39795 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41708 + 68] = mem[_41708 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41708 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _50173 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50173] = 30
                                        mem[_50173 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52396 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52396 + idx + 68] = mem[_50173 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52396 + 68] = mem[_52396 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52396 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33861] = 30
                                        mem[_33861 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34075 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34075 + idx + 68] = mem[_33861 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34075 + 68] = mem[_34075 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34075 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34836 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34836] = 30
                                        mem[_34836 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35159 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35159 + idx + 68] = mem[_34836 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35159 + 68] = mem[_35159 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35159 + -mem[64] + 100
                                    _33923 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33923] = 26
                                    mem[_33923 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36410 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36410] = 30
                                        mem[_36410 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39801 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39801] = 30
                                        mem[_39801 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41715 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41715 + idx + 68] = mem[_39801 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41715 + 68] = mem[_41715 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41715 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _50178 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50178] = 30
                                        mem[_50178 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52401 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52401 + idx + 68] = mem[_50178 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52401 + 68] = mem[_52401 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52401 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37027 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37027] = 30
                                    mem[_37027 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37837 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37837 + idx + 68] = mem[_37027 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37837 + 68] = mem[_37837 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37837 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41714 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41714] = 30
                                    mem[_41714 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _43958 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43958 + idx + 68] = mem[_41714 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43958 + 68] = mem[_43958 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43958 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52400 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52400] = 30
                                    mem[_52400 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54347 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54347 + idx + 68] = mem[_52400 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54347 + 68] = mem[_54347 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54347 + -mem[64] + 100
                                _33359 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33359] = 26
                                mem[_33359 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34217 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34217] = 26
                                    mem[_34217 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _37023 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37023] = 30
                                        mem[_37023 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41707 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41707] = 30
                                        mem[_41707 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52395 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52395] = 30
                                        mem[_52395 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37834 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37834] = 30
                                        mem[_37834 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43948 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43948] = 30
                                        mem[_43948 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _54339 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54339] = 30
                                        mem[_54339 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34216 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34216] = 26
                                    mem[_34216 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _37022 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37022] = 30
                                        mem[_37022 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41704 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41704] = 30
                                        mem[_41704 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52393 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52393] = 30
                                        mem[_52393 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37833 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37833] = 30
                                        mem[_37833 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43944 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43944] = 30
                                        mem[_43944 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _54335 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54335] = 30
                                        mem[_54335 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33762 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33762] = 26
                                        mem[_33762 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36154 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36154] = 30
                                                mem[_36154 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38212 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38212] = 30
                                                mem[_38212 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39787 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39787 + idx + 68] = mem[_38212 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39787 + 68] = mem[_39787 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39787 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47466 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47466] = 30
                                                mem[_47466 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _50159 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50159 + idx + 68] = mem[_47466 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50159 + 68] = mem[_50159 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50159 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36407 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36407] = 30
                                            mem[_36407 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37017 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37017 + idx + 68] = mem[_36407 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37017 + 68] = mem[_37017 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37017 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39786 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39786] = 30
                                            mem[_39786 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41689 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41689 + idx + 68] = mem[_39786 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41689 + 68] = mem[_41689 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41689 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _50158 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50158] = 30
                                            mem[_50158 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52382 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52382 + idx + 68] = mem[_50158 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52382 + 68] = mem[_52382 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52382 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36406 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36406] = 30
                                            mem[_36406 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37014 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37014 + idx + 68] = mem[_36406 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37014 + 68] = mem[_37014 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37014 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39785 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39785] = 30
                                            mem[_39785 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41686 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41686 + idx + 68] = mem[_39785 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41686 + 68] = mem[_41686 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41686 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _50157 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50157] = 30
                                            mem[_50157 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52379 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52379 + idx + 68] = mem[_50157 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52379 + 68] = mem[_52379 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52379 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37013 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37013] = 30
                                        mem[_37013 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37820 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37820 + idx + 68] = mem[_37013 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37820 + 68] = mem[_37820 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37820 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41685 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41685] = 30
                                        mem[_41685 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43922 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43922 + idx + 68] = mem[_41685 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43922 + 68] = mem[_43922 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43922 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _52378 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52378] = 30
                                        mem[_52378 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54319 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54319 + idx + 68] = mem[_52378 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54319 + 68] = mem[_54319 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54319 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33860 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33860] = 30
                                        mem[_33860 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34072 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34072 + idx + 68] = mem[_33860 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34072 + 68] = mem[_34072 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34072 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34834 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34834] = 30
                                        mem[_34834 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35154 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35154 + idx + 68] = mem[_34834 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35154 + 68] = mem[_35154 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35154 + -mem[64] + 100
                                    _33922 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33922] = 26
                                    mem[_33922 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36408] = 30
                                            mem[_36408 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39794] = 30
                                            mem[_39794 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41699 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41699 + idx + 68] = mem[_39794 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41699 + 68] = mem[_41699 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41699 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _50166 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50166] = 30
                                            mem[_50166 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52389 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52389 + idx + 68] = mem[_50166 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52389 + 68] = mem[_52389 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52389 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37021 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37021] = 30
                                        mem[_37021 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37830 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37830 + idx + 68] = mem[_37021 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37830 + 68] = mem[_37830 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37830 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41698 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41698] = 30
                                        mem[_41698 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _43938 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43938 + idx + 68] = mem[_41698 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43938 + 68] = mem[_43938 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43938 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _52388 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52388] = 30
                                        mem[_52388 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54331 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54331 + idx + 68] = mem[_52388 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54331 + 68] = mem[_54331 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54331 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37020 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37020] = 30
                                        mem[_37020 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37827 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37827 + idx + 68] = mem[_37020 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37827 + 68] = mem[_37827 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37827 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41697 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41697] = 30
                                        mem[_41697 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _43935 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_43935 + idx + 68] = mem[_41697 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_43935 + 68] = mem[_43935 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _43935 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52387 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52387] = 30
                                        mem[_52387 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54328 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54328 + idx + 68] = mem[_52387 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54328 + 68] = mem[_54328 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54328 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37826 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37826] = 30
                                    mem[_37826 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _39069 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39069 + idx + 68] = mem[_37826 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39069 + 68] = mem[_39069 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39069 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _43934 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43934] = 30
                                    mem[_43934 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _46314 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_46314 + idx + 68] = mem[_43934 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_46314 + 68] = mem[_46314 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _46314 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _54327 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54327] = 30
                                    mem[_54327 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _56306 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_56306 + idx + 68] = mem[_54327 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_56306 + 68] = mem[_56306 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _56306 + -mem[64] + 100
                                _33354 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33354] = 26
                                mem[_33354 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34215 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34215] = 26
                                    mem[_34215 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _37012 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37012] = 30
                                            mem[_37012 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41684 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41684] = 30
                                            mem[_41684 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52377 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52377] = 30
                                            mem[_52377 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37819 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37819] = 30
                                            mem[_37819 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43918 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43918] = 30
                                            mem[_43918 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _54315 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54315] = 30
                                            mem[_54315 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37818 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37818] = 30
                                            mem[_37818 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43917 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43917] = 30
                                            mem[_43917 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54314 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54314] = 30
                                            mem[_54314 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39057 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39057] = 30
                                            mem[_39057 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46295 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46295] = 30
                                            mem[_46295 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _56289 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56289] = 30
                                            mem[_56289 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34214 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34214] = 26
                                    mem[_34214 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _37011 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37011] = 30
                                            mem[_37011 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41679 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41679] = 30
                                            mem[_41679 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52372 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52372] = 30
                                            mem[_52372 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37817 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37817] = 30
                                            mem[_37817 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43911 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43911] = 30
                                            mem[_43911 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _54309 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54309] = 30
                                            mem[_54309 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37816 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37816] = 30
                                            mem[_37816 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _43910 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43910] = 30
                                            mem[_43910 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54308 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54308] = 30
                                            mem[_54308 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39050 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39050] = 30
                                            mem[_39050 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46285 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46285] = 30
                                            mem[_46285 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _56281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56281] = 30
                                            mem[_56281 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not stor4[address(arg1)]:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33771 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33771] = 26
                                            mem[_33771 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36157 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36157] = 30
                                                mem[_36157 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38223 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38223] = 30
                                                mem[_38223 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39815 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39815 + idx + 68] = mem[_38223 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39815 + 68] = mem[_39815 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39815 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47500 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47500] = 30
                                                mem[_47500 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _50207 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50207 + idx + 68] = mem[_47500 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50207 + 68] = mem[_50207 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50207 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36414 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36414] = 30
                                            mem[_36414 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37041 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37041 + idx + 68] = mem[_36414 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37041 + 68] = mem[_37041 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37041 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39814 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39814] = 30
                                            mem[_39814 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41751 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41751 + idx + 68] = mem[_39814 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41751 + 68] = mem[_41751 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41751 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _50206 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50206] = 30
                                            mem[_50206 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52432 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52432 + idx + 68] = mem[_50206 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52432 + 68] = mem[_52432 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52432 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33863 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33863] = 30
                                            mem[_33863 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34081 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34081 + idx + 68] = mem[_33863 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34081 + 68] = mem[_34081 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34081 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34840 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34840] = 30
                                            mem[_34840 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35169 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35169 + idx + 68] = mem[_34840 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35169 + 68] = mem[_35169 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35169 + -mem[64] + 100
                                        _33925 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33925] = 26
                                        mem[_33925 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36415 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36415] = 30
                                            mem[_36415 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39820 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39820] = 30
                                            mem[_39820 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41758 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41758 + idx + 68] = mem[_39820 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41758 + 68] = mem[_41758 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41758 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _50211 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50211] = 30
                                            mem[_50211 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52437 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52437 + idx + 68] = mem[_50211 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52437 + 68] = mem[_52437 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52437 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37044 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37044] = 30
                                        mem[_37044 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37861 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37861 + idx + 68] = mem[_37044 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37861 + 68] = mem[_37861 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37861 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41757 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41757] = 30
                                        mem[_41757 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _44014 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44014 + idx + 68] = mem[_41757 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44014 + 68] = mem[_44014 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44014 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52436 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52436] = 30
                                        mem[_52436 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54391 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54391 + idx + 68] = mem[_52436 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54391 + 68] = mem[_54391 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54391 + -mem[64] + 100
                                    _33369 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33369] = 26
                                    mem[_33369 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34221 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34221] = 26
                                        mem[_34221 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _37040 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37040] = 30
                                            mem[_37040 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41750 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41750] = 30
                                            mem[_41750 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52431 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52431] = 30
                                            mem[_52431 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37858 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37858] = 30
                                            mem[_37858 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44004 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44004] = 30
                                            mem[_44004 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54383 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54383] = 30
                                            mem[_54383 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34220 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34220] = 26
                                        mem[_34220 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _37039 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37039] = 30
                                            mem[_37039 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41747 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41747] = 30
                                            mem[_41747 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52429 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52429] = 30
                                            mem[_52429 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37857 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37857] = 30
                                            mem[_37857 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44000 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44000] = 30
                                            mem[_44000 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54379 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54379] = 30
                                            mem[_54379 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33768 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33768] = 26
                                            mem[_33768 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36156 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36156] = 30
                                                    mem[_36156 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38220 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38220] = 30
                                                    mem[_38220 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _39806 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39806 + idx + 68] = mem[_38220 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39806 + 68] = mem[_39806 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39806 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _47489 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47489] = 30
                                                    mem[_47489 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _50192 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50192 + idx + 68] = mem[_47489 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50192 + 68] = mem[_50192 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50192 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36412 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36412] = 30
                                                mem[_36412 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _37034 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37034 + idx + 68] = mem[_36412 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37034 + 68] = mem[_37034 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37034 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39805 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39805] = 30
                                                mem[_39805 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41732 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41732 + idx + 68] = mem[_39805 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41732 + 68] = mem[_41732 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41732 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _50191 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50191] = 30
                                                mem[_50191 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52418 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52418 + idx + 68] = mem[_50191 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52418 + 68] = mem[_52418 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52418 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36411 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36411] = 30
                                                mem[_36411 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37031 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37031 + idx + 68] = mem[_36411 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37031 + 68] = mem[_37031 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37031 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39804 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39804] = 30
                                                mem[_39804 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _41729 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41729 + idx + 68] = mem[_39804 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41729 + 68] = mem[_41729 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41729 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _50190 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50190] = 30
                                                mem[_50190 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52415 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52415 + idx + 68] = mem[_50190 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52415 + 68] = mem[_52415 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52415 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37030 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37030] = 30
                                            mem[_37030 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37844 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37844 + idx + 68] = mem[_37030 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37844 + 68] = mem[_37844 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37844 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41728 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41728] = 30
                                            mem[_41728 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _43978 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43978 + idx + 68] = mem[_41728 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43978 + 68] = mem[_43978 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43978 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _52414 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52414] = 30
                                            mem[_52414 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54363 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54363 + idx + 68] = mem[_52414 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54363 + 68] = mem[_54363 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54363 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33862 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33862] = 30
                                            mem[_33862 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34078 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34078 + idx + 68] = mem[_33862 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34078 + 68] = mem[_34078 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34078 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34838 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34838] = 30
                                            mem[_34838 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35164 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35164 + idx + 68] = mem[_34838 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35164 + 68] = mem[_35164 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35164 + -mem[64] + 100
                                        _33924 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33924] = 26
                                        mem[_33924 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36413 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36413] = 30
                                                mem[_36413 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39813 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39813] = 30
                                                mem[_39813 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41742 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41742 + idx + 68] = mem[_39813 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41742 + 68] = mem[_41742 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41742 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _50199 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50199] = 30
                                                mem[_50199 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52425 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52425 + idx + 68] = mem[_50199 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52425 + 68] = mem[_52425 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52425 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37038 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37038] = 30
                                            mem[_37038 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37854 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37854 + idx + 68] = mem[_37038 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37854 + 68] = mem[_37854 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37854 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41741 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41741] = 30
                                            mem[_41741 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _43994 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43994 + idx + 68] = mem[_41741 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43994 + 68] = mem[_43994 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43994 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _52424 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52424] = 30
                                            mem[_52424 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54375 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54375 + idx + 68] = mem[_52424 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54375 + 68] = mem[_54375 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54375 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37037 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37037] = 30
                                            mem[_37037 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37851 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37851 + idx + 68] = mem[_37037 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37851 + 68] = mem[_37851 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37851 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41740 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41740] = 30
                                            mem[_41740 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _43991 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_43991 + idx + 68] = mem[_41740 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_43991 + 68] = mem[_43991 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _43991 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _52423 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52423] = 30
                                            mem[_52423 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54372 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54372 + idx + 68] = mem[_52423 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54372 + 68] = mem[_54372 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54372 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37850 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37850] = 30
                                        mem[_37850 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _39104 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39104 + idx + 68] = mem[_37850 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39104 + 68] = mem[_39104 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39104 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _43990 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43990] = 30
                                        mem[_43990 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _46376 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46376 + idx + 68] = mem[_43990 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46376 + 68] = mem[_46376 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46376 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _54371 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54371] = 30
                                        mem[_54371 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _56356 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_56356 + idx + 68] = mem[_54371 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_56356 + 68] = mem[_56356 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _56356 + -mem[64] + 100
                                    _33364 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33364] = 26
                                    mem[_33364 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34219 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34219] = 26
                                        mem[_34219 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _37029 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37029] = 30
                                                mem[_37029 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41727 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41727] = 30
                                                mem[_41727 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52413 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52413] = 30
                                                mem[_52413 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37843 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37843] = 30
                                                mem[_37843 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43974 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43974] = 30
                                                mem[_43974 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _54359 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54359] = 30
                                                mem[_54359 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37842 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37842] = 30
                                                mem[_37842 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43973 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43973] = 30
                                                mem[_43973 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _54358 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54358] = 30
                                                mem[_54358 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _39092 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39092] = 30
                                                mem[_39092 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46357 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46357] = 30
                                                mem[_46357 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _56339 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56339] = 30
                                                mem[_56339 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34218 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34218] = 26
                                        mem[_34218 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _37028 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37028] = 30
                                                mem[_37028 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41722 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41722] = 30
                                                mem[_41722 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52408 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52408] = 30
                                                mem[_52408 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37841 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37841] = 30
                                                mem[_37841 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43967 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43967] = 30
                                                mem[_43967 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _54353 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54353] = 30
                                                mem[_54353 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37840 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37840] = 30
                                                mem[_37840 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _43966 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43966] = 30
                                                mem[_43966 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _54352 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54352] = 30
                                                mem[_54352 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _39085 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39085] = 30
                                                mem[_39085 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46347 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46347] = 30
                                                mem[_46347 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _56331 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56331] = 30
                                                mem[_56331 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                            else:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33777 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33777] = 26
                                            mem[_33777 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36159 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36159] = 30
                                                mem[_36159 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _38231 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38231] = 30
                                                mem[_38231 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _39834 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39834 + idx + 68] = mem[_38231 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39834 + 68] = mem[_39834 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39834 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _42573 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_42573] = 30
                                                mem[_42573 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44859 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44859 + idx + 68] = mem[_42573 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44859 + 68] = mem[_44859 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44859 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _56413 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56413] = 30
                                                mem[_56413 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _58409 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58409 + idx + 68] = mem[_56413 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58409 + 68] = mem[_58409 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58409 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36419 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36419] = 30
                                            mem[_36419 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37058 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37058 + idx + 68] = mem[_36419 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37058 + 68] = mem[_37058 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37058 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39833] = 30
                                            mem[_39833 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41794 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41794 + idx + 68] = mem[_39833 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41794 + 68] = mem[_41794 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41794 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44856 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44856] = 30
                                            mem[_44856 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _47537 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47537 + idx + 68] = mem[_44856 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47537 + 68] = mem[_47537 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47537 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _58408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58408] = 30
                                            mem[_58408 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _60267 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60267 + idx + 68] = mem[_58408 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60267 + 68] = mem[_60267 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60267 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33865 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33865] = 30
                                            mem[_33865 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34087 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34087 + idx + 68] = mem[_33865 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34087 + 68] = mem[_34087 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34087 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34844 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34844] = 30
                                            mem[_34844 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35179 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35179 + idx + 68] = mem[_34844 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35179 + 68] = mem[_35179 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35179 + -mem[64] + 100
                                        _33927 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33927] = 26
                                        mem[_33927 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36420 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36420] = 30
                                            mem[_36420 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _39839 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39839] = 30
                                            mem[_39839 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _41801 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41801 + idx + 68] = mem[_39839 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41801 + 68] = mem[_41801 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41801 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44862 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44862] = 30
                                            mem[_44862 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _47546 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47546 + idx + 68] = mem[_44862 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47546 + 68] = mem[_47546 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47546 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _58413 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58413] = 30
                                            mem[_58413 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _60272 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60272 + idx + 68] = mem[_58413 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60272 + 68] = mem[_60272 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60272 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37061 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37061] = 30
                                        mem[_37061 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37885 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37885 + idx + 68] = mem[_37061 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37885 + 68] = mem[_37885 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37885 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _41800 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41800] = 30
                                        mem[_41800 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _44066 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44066 + idx + 68] = mem[_41800 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44066 + 68] = mem[_44066 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44066 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _47543 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47543] = 30
                                        mem[_47543 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _50272 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50272 + idx + 68] = mem[_47543 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50272 + 68] = mem[_50272 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50272 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _60271 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_60271] = 30
                                        mem[_60271 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _61730 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_61730 + idx + 68] = mem[_60271 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_61730 + 68] = mem[_61730 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _61730 + -mem[64] + 100
                                    _33379 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33379] = 26
                                    mem[_33379 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34225 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34225] = 26
                                        mem[_34225 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _37057 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37057] = 30
                                            mem[_37057 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41793 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41793] = 30
                                            mem[_41793 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47534 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47534] = 30
                                            mem[_47534 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _60266 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60266] = 30
                                            mem[_60266 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37882 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37882] = 30
                                            mem[_37882 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _44058 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44058] = 30
                                            mem[_44058 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _50260 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50260] = 30
                                            mem[_50260 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _61722 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61722] = 30
                                            mem[_61722 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34224 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34224] = 26
                                        mem[_34224 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _37056 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37056] = 30
                                            mem[_37056 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41790 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41790] = 30
                                            mem[_41790 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47531 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47531] = 30
                                            mem[_47531 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _60264 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60264] = 30
                                            mem[_60264 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37881 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37881] = 30
                                            mem[_37881 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _44054 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44054] = 30
                                            mem[_44054 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _50254 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50254] = 30
                                            mem[_50254 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _61718 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61718] = 30
                                            mem[_61718 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33774 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33774] = 26
                                            mem[_33774 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36158 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36158] = 30
                                                    mem[_36158 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38228 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38228] = 30
                                                    mem[_38228 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _39825 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39825 + idx + 68] = mem[_38228 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39825 + 68] = mem[_39825 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39825 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _42564 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_42564] = 30
                                                    mem[_42564 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _44850 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_44850 + idx + 68] = mem[_42564 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_44850 + 68] = mem[_44850 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _44850 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _56401 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56401] = 30
                                                    mem[_56401 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _58400 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58400 + idx + 68] = mem[_56401 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58400 + 68] = mem[_58400 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58400 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36417 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36417] = 30
                                                mem[_36417 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _37051 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37051 + idx + 68] = mem[_36417 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37051 + 68] = mem[_37051 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37051 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39824 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39824] = 30
                                                mem[_39824 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41775 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41775 + idx + 68] = mem[_39824 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41775 + 68] = mem[_41775 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41775 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44847 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44847] = 30
                                                mem[_44847 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47516 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47516 + idx + 68] = mem[_44847 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47516 + 68] = mem[_47516 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47516 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _58399 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58399] = 30
                                                mem[_58399 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60253 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60253 + idx + 68] = mem[_58399 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60253 + 68] = mem[_60253 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60253 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36416 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36416] = 30
                                                mem[_36416 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37048 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37048 + idx + 68] = mem[_36416 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37048 + 68] = mem[_37048 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37048 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39823 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39823] = 30
                                                mem[_39823 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41772 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41772 + idx + 68] = mem[_39823 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41772 + 68] = mem[_41772 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41772 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44844 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44844] = 30
                                                mem[_44844 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _47513 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47513 + idx + 68] = mem[_44844 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47513 + 68] = mem[_47513 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47513 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _58398 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58398] = 30
                                                mem[_58398 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60250 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60250 + idx + 68] = mem[_58398 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60250 + 68] = mem[_60250 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60250 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37047 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37047] = 30
                                            mem[_37047 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37868 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37868 + idx + 68] = mem[_37047 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37868 + 68] = mem[_37868 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37868 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41771 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41771] = 30
                                            mem[_41771 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _44034 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44034 + idx + 68] = mem[_41771 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44034 + 68] = mem[_44034 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44034 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47510 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47510] = 30
                                            mem[_47510 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _50230 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50230 + idx + 68] = mem[_47510 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50230 + 68] = mem[_50230 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50230 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _60249 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60249] = 30
                                            mem[_60249 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61702 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61702 + idx + 68] = mem[_60249 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61702 + 68] = mem[_61702 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61702 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33864 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33864] = 30
                                            mem[_33864 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34084 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34084 + idx + 68] = mem[_33864 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34084 + 68] = mem[_34084 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34084 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34842 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34842] = 30
                                            mem[_34842 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35174 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35174 + idx + 68] = mem[_34842 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35174 + 68] = mem[_35174 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35174 + -mem[64] + 100
                                        _33926 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33926] = 26
                                        mem[_33926 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36418 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36418] = 30
                                                mem[_36418 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39832 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39832] = 30
                                                mem[_39832 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41785 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41785 + idx + 68] = mem[_39832 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41785 + 68] = mem[_41785 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41785 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44853 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44853] = 30
                                                mem[_44853 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47528 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47528 + idx + 68] = mem[_44853 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47528 + 68] = mem[_47528 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47528 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _58405 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58405] = 30
                                                mem[_58405 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60260 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60260 + idx + 68] = mem[_58405 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60260 + 68] = mem[_60260 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60260 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37055 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37055] = 30
                                            mem[_37055 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37878 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37878 + idx + 68] = mem[_37055 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37878 + 68] = mem[_37878 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37878 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41784 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41784] = 30
                                            mem[_41784 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _44048 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44048 + idx + 68] = mem[_41784 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44048 + 68] = mem[_44048 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44048 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47525 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47525] = 30
                                            mem[_47525 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _50248 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50248 + idx + 68] = mem[_47525 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50248 + 68] = mem[_50248 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50248 + -mem[64] + 100
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _60259 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60259] = 30
                                            mem[_60259 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61714 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61714 + idx + 68] = mem[_60259 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61714 + 68] = mem[_61714 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61714 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37054 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37054] = 30
                                            mem[_37054 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37875 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37875 + idx + 68] = mem[_37054 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37875 + 68] = mem[_37875 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37875 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41783 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41783] = 30
                                            mem[_41783 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _44045 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44045 + idx + 68] = mem[_41783 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44045 + 68] = mem[_44045 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44045 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47522 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47522] = 30
                                            mem[_47522 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _50245 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50245 + idx + 68] = mem[_47522 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50245 + 68] = mem[_50245 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50245 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _60258 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60258] = 30
                                            mem[_60258 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61711 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61711 + idx + 68] = mem[_60258 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61711 + 68] = mem[_61711 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61711 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37874 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37874] = 30
                                        mem[_37874 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _39139 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39139 + idx + 68] = mem[_37874 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39139 + 68] = mem[_39139 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39139 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _44044 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44044] = 30
                                        mem[_44044 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _46434 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46434 + idx + 68] = mem[_44044 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46434 + 68] = mem[_46434 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46434 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _50242 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50242] = 30
                                        mem[_50242 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _52473 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52473 + idx + 68] = mem[_50242 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52473 + 68] = mem[_52473 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52473 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _61710 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_61710] = 30
                                        mem[_61710 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _62852 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_62852 + idx + 68] = mem[_61710 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_62852 + 68] = mem[_62852 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _62852 + -mem[64] + 100
                                    _33374 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33374] = 26
                                    mem[_33374 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34223 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34223] = 26
                                        mem[_34223 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _37046 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37046] = 30
                                                mem[_37046 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41770 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41770] = 30
                                                mem[_41770 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47507 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47507] = 30
                                                mem[_47507 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _60248 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60248] = 30
                                                mem[_60248 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37867 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37867] = 30
                                                mem[_37867 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44030 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44030] = 30
                                                mem[_44030 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50224 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50224] = 30
                                                mem[_50224 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _61698 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61698] = 30
                                                mem[_61698 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37866 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37866] = 30
                                                mem[_37866 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44029 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44029] = 30
                                                mem[_44029 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50221 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50221] = 30
                                                mem[_50221 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _61697 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61697] = 30
                                                mem[_61697 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _39127 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39127] = 30
                                                mem[_39127 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46419 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46419] = 30
                                                mem[_46419 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _52452 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52452] = 30
                                                mem[_52452 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _62835 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_62835] = 30
                                                mem[_62835 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34222 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34222] = 26
                                        mem[_34222 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _37045 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37045] = 30
                                                mem[_37045 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41765 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41765] = 30
                                                mem[_41765 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47504 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47504] = 30
                                                mem[_47504 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _60245 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60245] = 30
                                                mem[_60245 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37865 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37865] = 30
                                                mem[_37865 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44023 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44023] = 30
                                                mem[_44023 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50215 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50215] = 30
                                                mem[_50215 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _61692 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61692] = 30
                                                mem[_61692 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37864 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37864] = 30
                                                mem[_37864 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44022 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44022] = 30
                                                mem[_44022 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50212 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50212] = 30
                                                mem[_50212 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _61691 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61691] = 30
                                                mem[_61691 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _39120 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39120] = 30
                                                mem[_39120 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46409 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46409] = 30
                                                mem[_46409 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _52440 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52440] = 30
                                                mem[_52440 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _62827 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_62827] = 30
                                                mem[_62827 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        if not stor4[address(arg1)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33801 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33801] = 26
                                        mem[_33801 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36167 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36167] = 30
                                            mem[_36167 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38263 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38263] = 30
                                            mem[_38263 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39910 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39910 + idx + 68] = mem[_38263 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39910 + 68] = mem[_39910 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39910 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47659 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47659] = 30
                                            mem[_47659 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _50438 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50438 + idx + 68] = mem[_47659 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50438 + 68] = mem[_50438 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50438 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36439 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36439] = 30
                                        mem[_36439 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37126 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37126 + idx + 68] = mem[_36439 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37126 + 68] = mem[_37126 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37126 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39909 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39909] = 30
                                        mem[_39909 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _41966 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41966 + idx + 68] = mem[_39909 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41966 + 68] = mem[_41966 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41966 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _50437 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50437] = 30
                                        mem[_50437 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52672 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52672 + idx + 68] = mem[_50437 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52672 + 68] = mem[_52672 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52672 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33873 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33873] = 30
                                        mem[_33873 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34111 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34111 + idx + 68] = mem[_33873 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34111 + 68] = mem[_34111 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34111 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34860 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34860] = 30
                                        mem[_34860 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35219 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35219 + idx + 68] = mem[_34860 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35219 + 68] = mem[_35219 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35219 + -mem[64] + 100
                                    _33935 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33935] = 26
                                    mem[_33935 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _36440 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36440] = 30
                                        mem[_36440 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39915] = 30
                                        mem[_39915 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41973 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41973 + idx + 68] = mem[_39915 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41973 + 68] = mem[_41973 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41973 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _50442 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50442] = 30
                                        mem[_50442 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _52677 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52677 + idx + 68] = mem[_50442 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52677 + 68] = mem[_52677 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52677 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37129 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37129] = 30
                                    mem[_37129 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 10^18:
                                        _37981 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37981 + idx + 68] = mem[_37129 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37981 + 68] = mem[_37981 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37981 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41972 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41972] = 30
                                    mem[_41972 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _44286 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44286 + idx + 68] = mem[_41972 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44286 + 68] = mem[_44286 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44286 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                    _52676 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52676] = 30
                                    mem[_52676 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _54629 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54629 + idx + 68] = mem[_52676 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54629 + 68] = mem[_54629 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54629 + -mem[64] + 100
                                _33419 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33419] = 26
                                mem[_33419 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34241 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34241] = 26
                                    mem[_34241 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _37125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37125] = 30
                                        mem[_37125 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41965 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41965] = 30
                                        mem[_41965 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52671 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52671] = 30
                                        mem[_52671 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37978 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37978] = 30
                                        mem[_37978 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44276 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44276] = 30
                                        mem[_44276 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _54621 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54621] = 30
                                        mem[_54621 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                else:
                                    _34240 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34240] = 26
                                    mem[_34240 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        _37124 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37124] = 30
                                        mem[_37124 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41962 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41962] = 30
                                        mem[_41962 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _52669 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52669] = 30
                                        mem[_52669 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if 0 > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37977 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37977] = 30
                                        mem[_37977 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44272 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44272] = 30
                                        mem[_44272 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * t / s
                                        _54617 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54617] = 30
                                        mem[_54617 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        if arg2 * t / s > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 10^18
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _33798 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33798] = 26
                                        mem[_33798 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36166 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36166] = 30
                                                mem[_36166 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38260 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38260] = 30
                                                mem[_38260 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39901 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39901 + idx + 68] = mem[_38260 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39901 + 68] = mem[_39901 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39901 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47648 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47648] = 30
                                                mem[_47648 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _50423 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50423 + idx + 68] = mem[_47648 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50423 + 68] = mem[_50423 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50423 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36437 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36437] = 30
                                            mem[_36437 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37119 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37119 + idx + 68] = mem[_36437 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37119 + 68] = mem[_37119 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37119 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39900 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39900] = 30
                                            mem[_39900 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41947 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41947 + idx + 68] = mem[_39900 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41947 + 68] = mem[_41947 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41947 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _50422 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50422] = 30
                                            mem[_50422 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52658 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52658 + idx + 68] = mem[_50422 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52658 + 68] = mem[_52658 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52658 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _36436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36436] = 30
                                            mem[_36436 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37116 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37116 + idx + 68] = mem[_36436 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37116 + 68] = mem[_37116 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37116 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39899 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39899] = 30
                                            mem[_39899 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41944 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41944 + idx + 68] = mem[_39899 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41944 + 68] = mem[_41944 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41944 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _50421 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50421] = 30
                                            mem[_50421 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52655 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52655 + idx + 68] = mem[_50421 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52655 + 68] = mem[_52655 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52655 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37115 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37115] = 30
                                        mem[_37115 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _37964 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37964 + idx + 68] = mem[_37115 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37964 + 68] = mem[_37964 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37964 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41943 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41943] = 30
                                        mem[_41943 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _44250 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44250 + idx + 68] = mem[_41943 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44250 + 68] = mem[_44250 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44250 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _52654 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52654] = 30
                                        mem[_52654 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54601 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54601 + idx + 68] = mem[_52654 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54601 + 68] = mem[_54601 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54601 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _33872 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33872] = 30
                                        mem[_33872 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _34108 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_34108 + idx + 68] = mem[_33872 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_34108 + 68] = mem[_34108 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _34108 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _34858 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34858] = 30
                                        mem[_34858 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _35214 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35214 + idx + 68] = mem[_34858 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35214 + 68] = mem[_35214 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35214 + -mem[64] + 100
                                    _33934 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33934] = 26
                                    mem[_33934 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _36438 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36438] = 30
                                            mem[_36438 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39908 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39908] = 30
                                            mem[_39908 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41957 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41957 + idx + 68] = mem[_39908 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41957 + 68] = mem[_41957 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41957 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _50430 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50430] = 30
                                            mem[_50430 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52665 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52665 + idx + 68] = mem[_50430 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52665 + 68] = mem[_52665 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52665 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37123 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37123] = 30
                                        mem[_37123 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                            _37974 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37974 + idx + 68] = mem[_37123 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37974 + 68] = mem[_37974 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37974 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41956 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41956] = 30
                                        mem[_41956 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _44266 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44266 + idx + 68] = mem[_41956 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44266 + 68] = mem[_44266 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44266 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                        _52664 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52664] = 30
                                        mem[_52664 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54613 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54613 + idx + 68] = mem[_52664 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54613 + 68] = mem[_54613 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54613 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _37122 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37122] = 30
                                        mem[_37122 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37971 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37971 + idx + 68] = mem[_37122 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37971 + 68] = mem[_37971 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37971 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41955 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41955] = 30
                                        mem[_41955 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _44263 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44263 + idx + 68] = mem[_41955 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44263 + 68] = mem[_44263 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44263 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52663 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52663] = 30
                                        mem[_52663 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54610 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54610 + idx + 68] = mem[_52663 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54610 + 68] = mem[_54610 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54610 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _37970 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37970] = 30
                                    mem[_37970 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                        _39279 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39279 + idx + 68] = mem[_37970 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39279 + 68] = mem[_39279 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39279 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _44262 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_44262] = 30
                                    mem[_44262 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                        _46666 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_46666 + idx + 68] = mem[_44262 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_46666 + 68] = mem[_46666 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _46666 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                    _54609 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_54609] = 30
                                    mem[_54609 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                        mem[mem[64] + 108 len 24]
                                        return 1
                                    _56574 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_56574 + idx + 68] = mem[_54609 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_56574 + 68] = mem[_56574 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _56574 + -mem[64] + 100
                                _33414 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33414] = 26
                                mem[_33414 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 10^18:
                                    _34239 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34239] = 26
                                    mem[_34239 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _37114 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37114] = 30
                                            mem[_37114 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41942 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41942] = 30
                                            mem[_41942 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52653 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52653] = 30
                                            mem[_52653 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37963 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37963] = 30
                                            mem[_37963 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44246 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44246] = 30
                                            mem[_44246 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _54597 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54597] = 30
                                            mem[_54597 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37962 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37962] = 30
                                            mem[_37962 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44245 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44245] = 30
                                            mem[_44245 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54596 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54596] = 30
                                            mem[_54596 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39267 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39267] = 30
                                            mem[_39267 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46647 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46647] = 30
                                            mem[_46647 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _56557 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56557] = 30
                                            mem[_56557 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    _34238 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34238] = 26
                                    mem[_34238 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _37113 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37113] = 30
                                            mem[_37113 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41937] = 30
                                            mem[_41937 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52648 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52648] = 30
                                            mem[_52648 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37961 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37961] = 30
                                            mem[_37961 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44239 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44239] = 30
                                            mem[_44239 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            _54591 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54591] = 30
                                            mem[_54591 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37960 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37960] = 30
                                            mem[_37960 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44238 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44238] = 30
                                            mem[_44238 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54590 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54590] = 30
                                            mem[_54590 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39260 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39260] = 30
                                            mem[_39260 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _46637 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46637] = 30
                                            mem[_46637 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            _56549 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56549] = 30
                                            mem[_56549 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                        else:
                            mem[0] = msg.sender
                            mem[32] = 4
                            if not stor4[address(msg.sender)]:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33783 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33783] = 26
                                            mem[_33783 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36161 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36161] = 30
                                                mem[_36161 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38239 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38239] = 30
                                                mem[_38239 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39853 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39853 + idx + 68] = mem[_38239 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39853 + 68] = mem[_39853 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39853 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _47568 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47568] = 30
                                                mem[_47568 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _50306 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50306 + idx + 68] = mem[_47568 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50306 + 68] = mem[_50306 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50306 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36424 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36424] = 30
                                            mem[_36424 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37075 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37075 + idx + 68] = mem[_36424 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37075 + 68] = mem[_37075 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37075 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39852 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39852] = 30
                                            mem[_39852 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _41837 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41837 + idx + 68] = mem[_39852 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41837 + 68] = mem[_41837 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41837 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _50305 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50305] = 30
                                            mem[_50305 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52534 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52534 + idx + 68] = mem[_50305 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52534 + 68] = mem[_52534 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52534 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33867 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33867] = 30
                                            mem[_33867 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34093 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34093 + idx + 68] = mem[_33867 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34093 + 68] = mem[_34093 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34093 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34848] = 30
                                            mem[_34848 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35189 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35189 + idx + 68] = mem[_34848 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35189 + 68] = mem[_35189 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35189 + -mem[64] + 100
                                        _33929 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33929] = 26
                                        mem[_33929 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _36425 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36425] = 30
                                            mem[_36425 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39858 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39858] = 30
                                            mem[_39858 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41844 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41844 + idx + 68] = mem[_39858 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41844 + 68] = mem[_41844 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41844 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _50310 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50310] = 30
                                            mem[_50310 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _52539 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52539 + idx + 68] = mem[_50310 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52539 + 68] = mem[_52539 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52539 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37078 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37078] = 30
                                        mem[_37078 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 10^18:
                                            _37909 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37909 + idx + 68] = mem[_37078 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37909 + 68] = mem[_37909 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37909 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41843 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41843] = 30
                                        mem[_41843 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _44122 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44122 + idx + 68] = mem[_41843 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44122 + 68] = mem[_44122 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44122 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 10^18
                                        _52538 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52538] = 30
                                        mem[_52538 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _54488 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54488 + idx + 68] = mem[_52538 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54488 + 68] = mem[_54488 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54488 + -mem[64] + 100
                                    _33389 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33389] = 26
                                    mem[_33389 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34229 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34229] = 26
                                        mem[_34229 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _37074 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37074] = 30
                                            mem[_37074 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41836 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41836] = 30
                                            mem[_41836 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52533 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52533] = 30
                                            mem[_52533 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37906 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37906] = 30
                                            mem[_37906 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44112] = 30
                                            mem[_44112 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _54480 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54480] = 30
                                            mem[_54480 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                    else:
                                        _34228 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34228] = 26
                                        mem[_34228 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            _37073 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37073] = 30
                                            mem[_37073 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41833] = 30
                                            mem[_41833 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _52531 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52531] = 30
                                            mem[_52531 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if 0 > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37905 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37905] = 30
                                            mem[_37905 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44108 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44108] = 30
                                            mem[_44108 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * t / s
                                            _54476 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54476] = 30
                                            mem[_54476 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            if arg2 * t / s > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 10^18
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _33780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33780] = 26
                                            mem[_33780 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36160 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36160] = 30
                                                    mem[_36160 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38236 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38236] = 30
                                                    mem[_38236 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _39844 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39844 + idx + 68] = mem[_38236 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39844 + 68] = mem[_39844 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39844 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _47557 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47557] = 30
                                                    mem[_47557 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _50291 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50291 + idx + 68] = mem[_47557 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50291 + 68] = mem[_50291 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50291 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36422 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36422] = 30
                                                mem[_36422 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _37068 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37068 + idx + 68] = mem[_36422 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37068 + 68] = mem[_37068 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37068 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39843 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39843] = 30
                                                mem[_39843 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41818 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41818 + idx + 68] = mem[_39843 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41818 + 68] = mem[_41818 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41818 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _50290 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50290] = 30
                                                mem[_50290 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52520 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52520 + idx + 68] = mem[_50290 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52520 + 68] = mem[_52520 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52520 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _36421 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36421] = 30
                                                mem[_36421 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37065 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37065 + idx + 68] = mem[_36421 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37065 + 68] = mem[_37065 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37065 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39842 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39842] = 30
                                                mem[_39842 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _41815 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41815 + idx + 68] = mem[_39842 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41815 + 68] = mem[_41815 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41815 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _50289 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50289] = 30
                                                mem[_50289 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52517 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52517 + idx + 68] = mem[_50289 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52517 + 68] = mem[_52517 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52517 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37064 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37064] = 30
                                            mem[_37064 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _37892 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37892 + idx + 68] = mem[_37064 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37892 + 68] = mem[_37892 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37892 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41814 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41814] = 30
                                            mem[_41814 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _44086 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44086 + idx + 68] = mem[_41814 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44086 + 68] = mem[_44086 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44086 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _52516 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52516] = 30
                                            mem[_52516 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54460 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54460 + idx + 68] = mem[_52516 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54460 + 68] = mem[_54460 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54460 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _33866 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33866] = 30
                                            mem[_33866 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _34090 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_34090 + idx + 68] = mem[_33866 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_34090 + 68] = mem[_34090 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _34090 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _34846 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34846] = 30
                                            mem[_34846 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _35184 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35184 + idx + 68] = mem[_34846 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35184 + 68] = mem[_35184 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35184 + -mem[64] + 100
                                        _33928 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33928] = 26
                                        mem[_33928 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _36423 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36423] = 30
                                                mem[_36423 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39851 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39851] = 30
                                                mem[_39851 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41828 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41828 + idx + 68] = mem[_39851 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41828 + 68] = mem[_41828 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41828 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _50298 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50298] = 30
                                                mem[_50298 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52527 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52527 + idx + 68] = mem[_50298 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52527 + 68] = mem[_52527 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52527 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37072 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37072] = 30
                                            mem[_37072 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                _37902 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37902 + idx + 68] = mem[_37072 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37902 + 68] = mem[_37902 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37902 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41827 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41827] = 30
                                            mem[_41827 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _44102 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44102 + idx + 68] = mem[_41827 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44102 + 68] = mem[_44102 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44102 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                            _52526 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52526] = 30
                                            mem[_52526 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54472 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54472 + idx + 68] = mem[_52526 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54472 + 68] = mem[_54472 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54472 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _37071 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37071] = 30
                                            mem[_37071 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37899 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37899 + idx + 68] = mem[_37071 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37899 + 68] = mem[_37899 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37899 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41826 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41826] = 30
                                            mem[_41826 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _44099 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44099 + idx + 68] = mem[_41826 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44099 + 68] = mem[_44099 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44099 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _52525 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52525] = 30
                                            mem[_52525 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54469 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54469 + idx + 68] = mem[_52525 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54469 + 68] = mem[_54469 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54469 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _37898 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37898] = 30
                                        mem[_37898 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                            _39174 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39174 + idx + 68] = mem[_37898 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39174 + 68] = mem[_39174 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39174 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _44098 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44098] = 30
                                        mem[_44098 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                            _46490 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46490 + idx + 68] = mem[_44098 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46490 + 68] = mem[_46490 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46490 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                        if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                        _54468 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_54468] = 30
                                        mem[_54468 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                            mem[mem[64] + 108 len 24]
                                            return 1
                                        _56440 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_56440 + idx + 68] = mem[_54468 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_56440 + 68] = mem[_56440 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _56440 + -mem[64] + 100
                                    _33384 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33384] = 26
                                    mem[_33384 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 10^18:
                                        _34227 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34227] = 26
                                        mem[_34227 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _37063 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37063] = 30
                                                mem[_37063 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41813 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41813] = 30
                                                mem[_41813 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52515 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52515] = 30
                                                mem[_52515 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37891 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37891] = 30
                                                mem[_37891 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44082 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44082] = 30
                                                mem[_44082 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _54456 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54456] = 30
                                                mem[_54456 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37890 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37890] = 30
                                                mem[_37890 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44081 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44081] = 30
                                                mem[_44081 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _54455 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54455] = 30
                                                mem[_54455 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _39162 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39162] = 30
                                                mem[_39162 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46471 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46471] = 30
                                                mem[_46471 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _56423 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56423] = 30
                                                mem[_56423 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        _34226 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34226] = 26
                                        mem[_34226 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _37062 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37062] = 30
                                                mem[_37062 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41808 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41808] = 30
                                                mem[_41808 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52510 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52510] = 30
                                                mem[_52510 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37889 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37889] = 30
                                                mem[_37889 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44075 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44075] = 30
                                                mem[_44075 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                _54450 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54450] = 30
                                                mem[_54450 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37888 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37888] = 30
                                                mem[_37888 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44074 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44074] = 30
                                                mem[_44074 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _54449 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54449] = 30
                                                mem[_54449 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _39155 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39155] = 30
                                                mem[_39155 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _46461 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46461] = 30
                                                mem[_46461 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                _56415 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56415] = 30
                                                mem[_56415 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                            else:
                                mem[0] = arg1
                                mem[32] = 4
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                if not stor4[address(arg1)]:
                                    if not arg2 / 100:
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _33789 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33789] = 26
                                                mem[_33789 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    _36163 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36163] = 30
                                                    mem[_36163 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38247 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38247] = 30
                                                    mem[_38247 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _39872 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39872 + idx + 68] = mem[_38247 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39872 + 68] = mem[_39872 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39872 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _47591 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47591] = 30
                                                    mem[_47591 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _50339 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50339 + idx + 68] = mem[_47591 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50339 + 68] = mem[_50339 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50339 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36429 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36429] = 30
                                                mem[_36429 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37092 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37092 + idx + 68] = mem[_36429 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37092 + 68] = mem[_37092 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37092 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39871 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39871] = 30
                                                mem[_39871 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _41880 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41880 + idx + 68] = mem[_39871 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41880 + 68] = mem[_41880 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41880 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _50338 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50338] = 30
                                                mem[_50338 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52570 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52570 + idx + 68] = mem[_50338 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52570 + 68] = mem[_52570 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52570 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _33869 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33869] = 30
                                                mem[_33869 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _34099 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_34099 + idx + 68] = mem[_33869 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_34099 + 68] = mem[_34099 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _34099 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _34852 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34852] = 30
                                                mem[_34852 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _35199 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35199 + idx + 68] = mem[_34852 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35199 + 68] = mem[_35199 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35199 + -mem[64] + 100
                                            _33931 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33931] = 26
                                            mem[_33931 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36430 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36430] = 30
                                                mem[_36430 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _39877 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39877] = 30
                                                mem[_39877 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _41887 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41887 + idx + 68] = mem[_39877 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41887 + 68] = mem[_41887 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41887 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _50343 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50343] = 30
                                                mem[_50343 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _52575 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52575 + idx + 68] = mem[_50343 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52575 + 68] = mem[_52575 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52575 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37095 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37095] = 30
                                            mem[_37095 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37933 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37933 + idx + 68] = mem[_37095 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37933 + 68] = mem[_37933 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37933 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _41886 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41886] = 30
                                            mem[_41886 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _44178 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44178 + idx + 68] = mem[_41886 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44178 + 68] = mem[_44178 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44178 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _52574 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52574] = 30
                                            mem[_52574 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _54532 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54532 + idx + 68] = mem[_52574 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54532 + 68] = mem[_54532 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54532 + -mem[64] + 100
                                        _33399 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33399] = 26
                                        mem[_33399 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 10^18:
                                            _34233 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34233] = 26
                                            mem[_34233 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _37091 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37091] = 30
                                                mem[_37091 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41879 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41879] = 30
                                                mem[_41879 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52569 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52569] = 30
                                                mem[_52569 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37930 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37930] = 30
                                                mem[_37930 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44168 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44168] = 30
                                                mem[_44168 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _54524 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54524] = 30
                                                mem[_54524 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            _34232 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34232] = 26
                                            mem[_34232 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                _37090 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37090] = 30
                                                mem[_37090 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41876 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41876] = 30
                                                mem[_41876 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _52567 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52567] = 30
                                                mem[_52567 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37929 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37929] = 30
                                                mem[_37929 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44164 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44164] = 30
                                                mem[_44164 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _54520 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54520] = 30
                                                mem[_54520 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2 / 100
                                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _33786 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33786] = 26
                                                mem[_33786 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    if not 3 * arg2 / 100:
                                                        _36162 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_36162] = 30
                                                        mem[_36162 + 32] = 'SafeMath: subtraction overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 1
                                                        _38244 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_38244] = 30
                                                        mem[_38244 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > stor1[address(msg.sender)]:
                                                            _39863 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_39863 + idx + 68] = mem[_38244 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_39863 + 68] = mem[_39863 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _39863 + -mem[64] + 100
                                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = arg1
                                                        mem[32] = 1
                                                        _47580 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_47580] = 30
                                                        mem[_47580 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 <= stor6:
                                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalFees += 3 * arg2 / 100
                                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                            if 0 > _maxTxAmount:
                                                                revert with 0, 
                                                                            32,
                                                                            40,
                                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                            mem[mem[64] + 108 len 24]
                                                            return 1
                                                        _50324 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_50324 + idx + 68] = mem[_47580 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_50324 + 68] = mem[_50324 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _50324 + -mem[64] + 100
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _36427 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36427] = 30
                                                    mem[_36427 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                        _37085 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_37085 + idx + 68] = mem[_36427 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_37085 + 68] = mem[_37085 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _37085 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _39862 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39862] = 30
                                                    mem[_39862 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _41861 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_41861 + idx + 68] = mem[_39862 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_41861 + 68] = mem[_41861 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _41861 + -mem[64] + 100
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                    _50323 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50323] = 30
                                                    mem[_50323 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _52556 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_52556 + idx + 68] = mem[_50323 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_52556 + 68] = mem[_52556 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _52556 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _36426 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36426] = 30
                                                    mem[_36426 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 10^18:
                                                        _37082 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_37082 + idx + 68] = mem[_36426 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_37082 + 68] = mem[_37082 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _37082 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _39861 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39861] = 30
                                                    mem[_39861 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                        _41858 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_41858 + idx + 68] = mem[_39861 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_41858 + 68] = mem[_41858 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _41858 + -mem[64] + 100
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                    _50322 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50322] = 30
                                                    mem[_50322 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _52553 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_52553 + idx + 68] = mem[_50322 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_52553 + 68] = mem[_52553 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _52553 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37081 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37081] = 30
                                                mem[_37081 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    _37916 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37916 + idx + 68] = mem[_37081 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37916 + 68] = mem[_37916 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37916 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41857 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41857] = 30
                                                mem[_41857 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _44142 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44142 + idx + 68] = mem[_41857 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44142 + 68] = mem[_44142 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44142 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _52552 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52552] = 30
                                                mem[_52552 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _54504 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_54504 + idx + 68] = mem[_52552 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_54504 + 68] = mem[_54504 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _54504 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _33868 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33868] = 30
                                                mem[_33868 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _34096 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_34096 + idx + 68] = mem[_33868 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_34096 + 68] = mem[_34096 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _34096 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _34850 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34850] = 30
                                                mem[_34850 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _35194 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35194 + idx + 68] = mem[_34850 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35194 + 68] = mem[_35194 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35194 + -mem[64] + 100
                                            _33930 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33930] = 26
                                            mem[_33930 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36428 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36428] = 30
                                                    mem[_36428 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _39870 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39870] = 30
                                                    mem[_39870 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _41871 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_41871 + idx + 68] = mem[_39870 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_41871 + 68] = mem[_41871 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _41871 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _50331 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50331] = 30
                                                    mem[_50331 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _52563 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_52563 + idx + 68] = mem[_50331 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_52563 + 68] = mem[_52563 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _52563 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37089 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37089] = 30
                                                mem[_37089 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _37926 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37926 + idx + 68] = mem[_37089 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37926 + 68] = mem[_37926 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37926 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41870 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41870] = 30
                                                mem[_41870 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _44158 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44158 + idx + 68] = mem[_41870 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44158 + 68] = mem[_44158 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44158 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _52562 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52562] = 30
                                                mem[_52562 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _54516 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_54516 + idx + 68] = mem[_52562 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_54516 + 68] = mem[_54516 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _54516 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37088 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37088] = 30
                                                mem[_37088 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37923 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37923 + idx + 68] = mem[_37088 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37923 + 68] = mem[_37923 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37923 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _41869 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41869] = 30
                                                mem[_41869 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _44155 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44155 + idx + 68] = mem[_41869 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44155 + 68] = mem[_44155 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44155 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _52561 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52561] = 30
                                                mem[_52561 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _54513 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_54513 + idx + 68] = mem[_52561 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_54513 + 68] = mem[_54513 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _54513 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37922 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37922] = 30
                                            mem[_37922 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _39209 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39209 + idx + 68] = mem[_37922 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39209 + 68] = mem[_39209 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39209 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _44154 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44154] = 30
                                            mem[_44154 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _46552 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46552 + idx + 68] = mem[_44154 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46552 + 68] = mem[_46552 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46552 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _54512 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54512] = 30
                                            mem[_54512 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _56490 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_56490 + idx + 68] = mem[_54512 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_56490 + 68] = mem[_56490 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _56490 + -mem[64] + 100
                                        _33394 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33394] = 26
                                        mem[_33394 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 10^18:
                                            _34231 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34231] = 26
                                            mem[_34231 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _37080 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37080] = 30
                                                    mem[_37080 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _41856 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41856] = 30
                                                    mem[_41856 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _52551 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52551] = 30
                                                    mem[_52551 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _37915 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37915] = 30
                                                    mem[_37915 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44138 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44138] = 30
                                                    mem[_44138 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                    _54500 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54500] = 30
                                                    mem[_54500 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _37914 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37914] = 30
                                                    mem[_37914 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44137 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44137] = 30
                                                    mem[_44137 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                    _54499 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54499] = 30
                                                    mem[_54499 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _39197 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39197] = 30
                                                    mem[_39197 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _46533 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46533] = 30
                                                    mem[_46533 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                    _56473 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56473] = 30
                                                    mem[_56473 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                        else:
                                            _34230 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34230] = 26
                                            mem[_34230 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _37079 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37079] = 30
                                                    mem[_37079 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _41851 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41851] = 30
                                                    mem[_41851 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _52546 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52546] = 30
                                                    mem[_52546 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _37913 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37913] = 30
                                                    mem[_37913 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44131 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44131] = 30
                                                    mem[_44131 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                    _54494 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54494] = 30
                                                    mem[_54494 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _37912 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37912] = 30
                                                    mem[_37912 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44130 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44130] = 30
                                                    mem[_44130 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * t / s
                                                    _54493 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54493] = 30
                                                    mem[_54493 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * t / s > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _39190 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39190] = 30
                                                    mem[_39190 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _46523 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46523] = 30
                                                    mem[_46523 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                    _56465 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56465] = 30
                                                    mem[_56465 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                else:
                                    if not arg2 / 100:
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _33795 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33795] = 26
                                                mem[_33795 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    _36165 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36165] = 30
                                                    mem[_36165 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _38255 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38255] = 30
                                                    mem[_38255 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _39891 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_39891 + idx + 68] = mem[_38255 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_39891 + 68] = mem[_39891 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _39891 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _42635 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_42635] = 30
                                                    mem[_42635 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _44916 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_44916 + idx + 68] = mem[_42635 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_44916 + 68] = mem[_44916 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _44916 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] += arg2
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _56547 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56547] = 30
                                                    mem[_56547 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _58528 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58528 + idx + 68] = mem[_56547 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58528 + 68] = mem[_58528 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58528 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _36434 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36434] = 30
                                                mem[_36434 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37109 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37109 + idx + 68] = mem[_36434 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37109 + 68] = mem[_37109 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37109 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39890 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39890] = 30
                                                mem[_39890 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41923 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41923 + idx + 68] = mem[_39890 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41923 + 68] = mem[_41923 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41923 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44913 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44913] = 30
                                                mem[_44913 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _47628 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47628 + idx + 68] = mem[_44913 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47628 + 68] = mem[_47628 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47628 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _58527 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58527] = 30
                                                mem[_58527 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60377 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60377 + idx + 68] = mem[_58527 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60377 + 68] = mem[_60377 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60377 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _33871 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33871] = 30
                                                mem[_33871 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _34105 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_34105 + idx + 68] = mem[_33871 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_34105 + 68] = mem[_34105 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _34105 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _34856 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34856] = 30
                                                mem[_34856 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _35209 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35209 + idx + 68] = mem[_34856 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35209 + 68] = mem[_35209 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35209 + -mem[64] + 100
                                            _33933 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33933] = 26
                                            mem[_33933 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _36435 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36435] = 30
                                                mem[_36435 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _39896 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_39896] = 30
                                                mem[_39896 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _41930 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_41930 + idx + 68] = mem[_39896 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_41930 + 68] = mem[_41930 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _41930 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _44919 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44919] = 30
                                                mem[_44919 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _47637 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47637 + idx + 68] = mem[_44919 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47637 + 68] = mem[_47637 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47637 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _58532 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58532] = 30
                                                mem[_58532 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _60382 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_60382 + idx + 68] = mem[_58532 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_60382 + 68] = mem[_60382 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _60382 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37112 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37112] = 30
                                            mem[_37112 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 10^18:
                                                _37957 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37957 + idx + 68] = mem[_37112 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37957 + 68] = mem[_37957 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37957 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _41929 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41929] = 30
                                            mem[_41929 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _44230 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_44230 + idx + 68] = mem[_41929 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_44230 + 68] = mem[_44230 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _44230 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _47634 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47634] = 30
                                            mem[_47634 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _50404 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50404 + idx + 68] = mem[_47634 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50404 + 68] = mem[_50404 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50404 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] += arg2
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 10^18
                                            _60381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_60381] = 30
                                            mem[_60381 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _61814 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_61814 + idx + 68] = mem[_60381 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_61814 + 68] = mem[_61814 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _61814 + -mem[64] + 100
                                        _33409 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33409] = 26
                                        mem[_33409 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 10^18:
                                            _34237 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34237] = 26
                                            mem[_34237 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _37108 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37108] = 30
                                                mem[_37108 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41922 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41922] = 30
                                                mem[_41922 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47625 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47625] = 30
                                                mem[_47625 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _60376 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60376] = 30
                                                mem[_60376 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37954 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37954] = 30
                                                mem[_37954 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44222 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44222] = 30
                                                mem[_44222 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50392 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50392] = 30
                                                mem[_50392 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _61806 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61806] = 30
                                                mem[_61806 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                        else:
                                            _34236 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34236] = 26
                                            mem[_34236 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                _37107 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37107] = 30
                                                mem[_37107 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41919 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41919] = 30
                                                mem[_41919 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47622 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47622] = 30
                                                mem[_47622 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _60374 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60374] = 30
                                                mem[_60374 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if 0 > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37953 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37953] = 30
                                                mem[_37953 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44218 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44218] = 30
                                                mem[_44218 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _50386 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50386] = 30
                                                mem[_50386 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] += arg2
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * t / s
                                                _61802 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_61802] = 30
                                                mem[_61802 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                if arg2 * t / s > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                    else:
                                        require arg2 / 100
                                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                                            revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 10^18
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _33792 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33792] = 26
                                                mem[_33792 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    if not 3 * arg2 / 100:
                                                        _36164 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_36164] = 30
                                                        mem[_36164 + 32] = 'SafeMath: subtraction overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 2
                                                        _38252 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_38252] = 30
                                                        mem[_38252 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 > stor2[address(msg.sender)]:
                                                            _39882 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_39882 + idx + 68] = mem[_38252 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_39882 + 68] = mem[_39882 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _39882 + -mem[64] + 100
                                                        stor2[address(msg.sender)] -= arg2
                                                        mem[0] = msg.sender
                                                        mem[32] = 1
                                                        _42626 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_42626] = 30
                                                        mem[_42626 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > stor1[address(msg.sender)]:
                                                            _44907 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_44907 + idx + 68] = mem[_42626 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_44907 + 68] = mem[_44907 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _44907 + -mem[64] + 100
                                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = arg1
                                                        mem[32] = 1
                                                        _56535 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_56535] = 30
                                                        mem[_56535 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 <= stor6:
                                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalFees += 3 * arg2 / 100
                                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                            if 0 > _maxTxAmount:
                                                                revert with 0, 
                                                                            32,
                                                                            40,
                                                                            0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                            mem[mem[64] + 108 len 24]
                                                            return 1
                                                        _58519 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_58519 + idx + 68] = mem[_56535 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_58519 + 68] = mem[_58519 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _58519 + -mem[64] + 100
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _36432 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36432] = 30
                                                    mem[_36432 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                        _37102 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_37102 + idx + 68] = mem[_36432 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_37102 + 68] = mem[_37102 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _37102 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _39881 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39881] = 30
                                                    mem[_39881 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _41904 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_41904 + idx + 68] = mem[_39881 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_41904 + 68] = mem[_41904 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _41904 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44904 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44904] = 30
                                                    mem[_44904 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _47607 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_47607 + idx + 68] = mem[_44904 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_47607 + 68] = mem[_47607 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _47607 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                    _58518 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_58518] = 30
                                                    mem[_58518 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                        stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _60363 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_60363 + idx + 68] = mem[_58518 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_60363 + 68] = mem[_60363 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _60363 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _36431 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36431] = 30
                                                    mem[_36431 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 10^18:
                                                        _37099 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_37099 + idx + 68] = mem[_36431 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_37099 + 68] = mem[_37099 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _37099 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _39880 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39880] = 30
                                                    mem[_39880 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _41901 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_41901 + idx + 68] = mem[_39880 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_41901 + 68] = mem[_41901 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _41901 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44901 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44901] = 30
                                                    mem[_44901 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                        _47604 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_47604 + idx + 68] = mem[_44901 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_47604 + 68] = mem[_47604 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _47604 + -mem[64] + 100
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                    _58517 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_58517] = 30
                                                    mem[_58517 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _60360 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_60360 + idx + 68] = mem[_58517 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_60360 + 68] = mem[_60360 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _60360 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37098 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37098] = 30
                                                mem[_37098 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                    _37940 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37940 + idx + 68] = mem[_37098 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37940 + 68] = mem[_37940 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37940 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41900 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41900] = 30
                                                mem[_41900 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _44198 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44198 + idx + 68] = mem[_41900 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44198 + 68] = mem[_44198 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44198 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47601] = 30
                                                mem[_47601 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _50362 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50362 + idx + 68] = mem[_47601 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50362 + 68] = mem[_50362 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50362 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                _60359 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60359] = 30
                                                mem[_60359 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _61786 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_61786 + idx + 68] = mem[_60359 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_61786 + 68] = mem[_61786 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _61786 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _33870 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33870] = 30
                                                mem[_33870 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _34102 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_34102 + idx + 68] = mem[_33870 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_34102 + 68] = mem[_34102 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _34102 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _34854 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34854] = 30
                                                mem[_34854 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _35204 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35204 + idx + 68] = mem[_34854 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35204 + 68] = mem[_35204 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35204 + -mem[64] + 100
                                            _33932 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33932] = 26
                                            mem[_33932 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _36433 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36433] = 30
                                                    mem[_36433 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _39889 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39889] = 30
                                                    mem[_39889 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _41914 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_41914 + idx + 68] = mem[_39889 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_41914 + 68] = mem[_41914 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _41914 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _44910 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44910] = 30
                                                    mem[_44910 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _47619 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_47619 + idx + 68] = mem[_44910 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_47619 + 68] = mem[_47619 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _47619 + -mem[64] + 100
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _58524 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_58524] = 30
                                                    mem[_58524 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        if 0 > _maxTxAmount:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                        mem[mem[64] + 108 len 24]
                                                        return 1
                                                    _60370 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_60370 + idx + 68] = mem[_58524 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_60370 + 68] = mem[_60370 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _60370 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _37106 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37106] = 30
                                                mem[_37106 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                    _37950 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37950 + idx + 68] = mem[_37106 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37950 + 68] = mem[_37950 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37950 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41913 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41913] = 30
                                                mem[_41913 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _44212 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44212 + idx + 68] = mem[_41913 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44212 + 68] = mem[_44212 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44212 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47616 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47616] = 30
                                                mem[_47616 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _50380 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50380 + idx + 68] = mem[_47616 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50380 + 68] = mem[_50380 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50380 + -mem[64] + 100
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                _60369 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60369] = 30
                                                mem[_60369 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _61798 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_61798 + idx + 68] = mem[_60369 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_61798 + 68] = mem[_61798 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _61798 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _37105 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_37105] = 30
                                                mem[_37105 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 10^18:
                                                    _37947 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37947 + idx + 68] = mem[_37105 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37947 + 68] = mem[_37947 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37947 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _41912 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_41912] = 30
                                                mem[_41912 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _44209 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_44209 + idx + 68] = mem[_41912 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_44209 + 68] = mem[_44209 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _44209 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _47613 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47613] = 30
                                                mem[_47613 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                    _50377 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50377 + idx + 68] = mem[_47613 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50377 + 68] = mem[_50377 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50377 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                _60368 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_60368] = 30
                                                mem[_60368 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                    return 1
                                                _61795 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_61795 + idx + 68] = mem[_60368 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_61795 + 68] = mem[_61795 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _61795 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _37946 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37946] = 30
                                            mem[_37946 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                _39244 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39244 + idx + 68] = mem[_37946 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39244 + 68] = mem[_39244 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39244 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _44208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44208] = 30
                                            mem[_44208 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _46610 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46610 + idx + 68] = mem[_44208 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46610 + 68] = mem[_46610 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46610 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _50374 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50374] = 30
                                            mem[_50374 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                _52611 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52611 + idx + 68] = mem[_50374 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52611 + 68] = mem[_52611 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52611 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                            _61794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_61794] = 30
                                            mem[_61794 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 10^18 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                mem[mem[64] + 108 len 24]
                                                return 1
                                            _62918 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_62918 + idx + 68] = mem[_61794 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_62918 + 68] = mem[_62918 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _62918 + -mem[64] + 100
                                        _33404 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33404] = 26
                                        mem[_33404 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 10^18:
                                            _34235 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34235] = 26
                                            mem[_34235 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _37097 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37097] = 30
                                                    mem[_37097 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _41899 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41899] = 30
                                                    mem[_41899 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _47598 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47598] = 30
                                                    mem[_47598 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _60358 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_60358] = 30
                                                    mem[_60358 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _37939 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37939] = 30
                                                    mem[_37939 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44194 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44194] = 30
                                                    mem[_44194 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _50356 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50356] = 30
                                                    mem[_50356 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 10^18
                                                    _61782 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_61782] = 30
                                                    mem[_61782 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 10^18 / arg2 != stor6 / 10^18:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _37938 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37938] = 30
                                                    mem[_37938 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44193 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44193] = 30
                                                    mem[_44193 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _50353 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50353] = 30
                                                    mem[_50353 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 10^18
                                                    _61781 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_61781] = 30
                                                    mem[_61781 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * stor6 / 10^18 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 10^18 / 3 * arg2 / 100 != stor6 / 10^18:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _39232 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39232] = 30
                                                    mem[_39232 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > arg2 * stor6 / 10^18:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _46595 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46595] = 30
                                                    mem[_46595 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _52590 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52590] = 30
                                                    mem[_52590 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 10^18 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 10^18
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18)
                                                    _62901 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_62901] = 30
                                                    mem[_62901 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 10^18 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 10^18
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if (arg2 * stor6 / 10^18) - (3 * arg2 / 100 * stor6 / 10^18) > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                        else:
                                            _34234 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34234] = 26
                                            mem[_34234 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _37096 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37096] = 30
                                                    mem[_37096 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _41894 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_41894] = 30
                                                    mem[_41894 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _47595 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47595] = 30
                                                    mem[_47595 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _60355 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_60355] = 30
                                                    mem[_60355 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if 0 > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _37937 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37937] = 30
                                                    mem[_37937 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44187 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44187] = 30
                                                    mem[_44187 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _50347 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50347] = 30
                                                    mem[_50347 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                    _61776 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_61776] = 30
                                                    mem[_61776 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if -3 * arg2 / 100 * t / s > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _37936 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_37936] = 30
                                                    mem[_37936 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44186 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44186] = 30
                                                    mem[_44186 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _50344 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50344] = 30
                                                    mem[_50344 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * t / s
                                                    _61775 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_61775] = 30
                                                    mem[_61775 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if arg2 * t / s > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _39225 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_39225] = 30
                                                    mem[_39225 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _46585 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46585] = 30
                                                    mem[_46585 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _52578 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52578] = 30
                                                    mem[_52578 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                    _62893 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_62893] = 30
                                                    mem[_62893 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    if (arg2 * t / s) - (3 * arg2 / 100 * t / s) > _maxTxAmount:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e74,
                                                                    mem[mem[64] + 108 len 24]
    return 1
}



}
