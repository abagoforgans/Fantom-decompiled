contract main {




// =====================  Runtime code  =====================


#
#  - uniswapV2Call(address arg1, uint256 arg2, uint256 arg3, bytes arg4)
#
address sushiRouterAddress;
address uniRouterAddress;
address token0Address;
address token1Address;
address pairaddr;
uint256 sub_a26d24e3;
uint256 sub_d524b0ff;
array of struct path;
array of address path1;
array of struct sub_03bdd72e;
array of struct sub_e7492977;
uint8 sub_bf85c715;
address stor11; offset 8
address stor12;

function sub_03bdd72e(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_03bdd72e.length
    return sub_03bdd72e[arg1].field_0
}

function token0() payable {
    return token0Address
}

function path1(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < path1.length
    return path1[arg1]
}

function pairaddr() payable {
    return pairaddr
}

function sushiRouter() payable {
    return sushiRouterAddress
}

function uniRouter() payable {
    return uniRouterAddress
}

function sub_a26d24e3(?) payable {
    return sub_a26d24e3
}

function path(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < path.length
    return path[arg1].field_0
}

function sub_bf85c715(?) payable {
    return bool(sub_bf85c715)
}

function token1() payable {
    return token1Address
}

function sub_d524b0ff(?) payable {
    return sub_d524b0ff
}

function sub_e7492977(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_e7492977.length
    return sub_e7492977[arg1].field_0
}

function _fallback() payable {
    revert
}

function test2(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
}

function pureTransfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if 0x5d2238753f3ca5e649f9250c303d5c196a069f24 != msg.sender:
        if 0x9d3592092e23606e899fb8f05692ed1a3b323f4e != msg.sender:
            if 0x220c54f34d68b4d43fdc42d30e6ac5e6efe56b13 != msg.sender:
                if 0x2dac8c52e54056656da31f0b1d0a1e923d13fc96 != msg.sender:
                    require msg.sender == 0x55aec00dc22bfca3f2acf092148bddf218e1ac7
    call arg1 with:
       value arg2 wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function takerWithdraw() payable {
    if 0x5d2238753f3ca5e649f9250c303d5c196a069f24 != msg.sender:
        if 0x9d3592092e23606e899fb8f05692ed1a3b323f4e != msg.sender:
            if 0x220c54f34d68b4d43fdc42d30e6ac5e6efe56b13 != msg.sender:
                if 0x2dac8c52e54056656da31f0b1d0a1e923d13fc96 != msg.sender:
                    require msg.sender == 0x55aec00dc22bfca3f2acf092148bddf218e1ac7
    require ext_code.size(0x7373c42502874c88954bdd6d50b53061f018422e)
    call 0x7373c42502874c88954bdd6d50b53061f018422e.0xb872dd0e with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function wethWithdraw(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if 0x5d2238753f3ca5e649f9250c303d5c196a069f24 != msg.sender:
        if 0x9d3592092e23606e899fb8f05692ed1a3b323f4e != msg.sender:
            if 0x220c54f34d68b4d43fdc42d30e6ac5e6efe56b13 != msg.sender:
                if 0x2dac8c52e54056656da31f0b1d0a1e923d13fc96 != msg.sender:
                    require msg.sender == 0x55aec00dc22bfca3f2acf092148bddf218e1ac7
    stor11 = arg1
    require ext_code.size(stor11)
    call stor11.withdraw(uint256 rg1) with:
         gas gas_remaining wei
        args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function pureTokenTransfer(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if 0x5d2238753f3ca5e649f9250c303d5c196a069f24 != msg.sender:
        if 0x9d3592092e23606e899fb8f05692ed1a3b323f4e != msg.sender:
            if 0x220c54f34d68b4d43fdc42d30e6ac5e6efe56b13 != msg.sender:
                if 0x2dac8c52e54056656da31f0b1d0a1e923d13fc96 != msg.sender:
                    require msg.sender == 0x55aec00dc22bfca3f2acf092148bddf218e1ac7
    stor11 = arg1
    require ext_code.size(stor11)
    call stor11.0xa9059cbb with:
         gas gas_remaining wei
        args address(arg2), arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function sub_e5546f37(?) payable {
    require calldata.size - 4 >= 256
    require arg8 <= 4294967296
    require arg8 + 36 <= calldata.size
    require arg8.length <= 4294967296 and arg8 + arg8.length + 36 <= calldata.size
    stor12 = arg7
    uniRouterAddress = arg5
    sushiRouterAddress = arg6
    require ext_code.size(arg4)
    staticcall arg4.getPair(address rg1, address rg2) with:
            gas gas_remaining wei
           args address(arg2), arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[260 len arg8.length] = arg8[all]
    mem[arg8.length + 260] = 0
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).swap(uint256 rg1, uint256 rg2, address rg3, bytes rg4) with:
         gas gas_remaining wei
        args 0, arg1, 0, address(this.address), 128, arg8.length, arg8[all], mem[arg8.length + 260 len ceil32(arg8.length) - arg8.length]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_e7ef73ac(?) payable {
    require calldata.size - 4 >= 64
    require arg2 <= 4294967296
    require arg2 + 36 <= calldata.size
    require arg2.length <= 4294967296 and arg2 + arg2.length + 36 <= calldata.size
    mem[96] = arg2.length
    mem[128 len arg2.length] = arg2[all]
    mem[arg2.length + 128] = 0
    if msg.sender == 0x5d2238753f3ca5e649f9250c303d5c196a069f24:
        mem[ceil32(arg2.length) + 128] = 4
        mem[64] = ceil32(arg2.length) + 164
        mem[ceil32(arg2.length) + 164 len floor32(arg2.length)] = call.data[arg2 + 36 len floor32(arg2.length)]
        mem[ceil32(arg2.length) + floor32(arg2.length) + -(arg2.length % 32) + 196 len arg2.length % 32] = mem[floor32(arg2.length) + -(arg2.length % 32) + 160 len arg2.length % 32]
        mem[ceil32(arg2.length) + 160 len 4] = Mask(32, 224, sha3(call.data[arg2 + 36 len floor32(arg2.length)], mem[ceil32(arg2.length) + floor32(arg2.length) + 164 len arg2.length % 32])) >> 224
        _93 = Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]
        mem[ceil32(arg2.length) + 164 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])] = mem[ceil32(arg2.length) + 160 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])]
        mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164] = mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 192 len Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32] or Mask(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32, -(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32) + 256, mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164])
        delegate arg1.mem[ceil32(arg2.length) + 164 len 4] with:
             gas gas_remaining wei
            args mem[ceil32(arg2.length) + 168 len _93 - 4]
    else:
        if msg.sender == 0x9d3592092e23606e899fb8f05692ed1a3b323f4e:
            mem[ceil32(arg2.length) + 128] = 4
            mem[64] = ceil32(arg2.length) + 164
            mem[ceil32(arg2.length) + 164 len floor32(arg2.length)] = call.data[arg2 + 36 len floor32(arg2.length)]
            mem[ceil32(arg2.length) + floor32(arg2.length) + -(arg2.length % 32) + 196 len arg2.length % 32] = mem[floor32(arg2.length) + -(arg2.length % 32) + 160 len arg2.length % 32]
            mem[ceil32(arg2.length) + 160 len 4] = Mask(32, 224, sha3(call.data[arg2 + 36 len floor32(arg2.length)], mem[ceil32(arg2.length) + floor32(arg2.length) + 164 len arg2.length % 32])) >> 224
            _101 = Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]
            mem[ceil32(arg2.length) + 164 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])] = mem[ceil32(arg2.length) + 160 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])]
            mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164] = mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 192 len Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32] or Mask(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32, -(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32) + 256, mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164])
            delegate arg1.mem[ceil32(arg2.length) + 164 len 4] with:
                 gas gas_remaining wei
                args mem[ceil32(arg2.length) + 168 len _101 - 4]
        else:
            if msg.sender == 0x220c54f34d68b4d43fdc42d30e6ac5e6efe56b13:
                mem[ceil32(arg2.length) + 128] = 4
                mem[64] = ceil32(arg2.length) + 164
                mem[ceil32(arg2.length) + 164 len floor32(arg2.length)] = call.data[arg2 + 36 len floor32(arg2.length)]
                mem[ceil32(arg2.length) + floor32(arg2.length) + -(arg2.length % 32) + 196 len arg2.length % 32] = mem[floor32(arg2.length) + -(arg2.length % 32) + 160 len arg2.length % 32]
                mem[ceil32(arg2.length) + 160 len 4] = Mask(32, 224, sha3(call.data[arg2 + 36 len floor32(arg2.length)], mem[ceil32(arg2.length) + floor32(arg2.length) + 164 len arg2.length % 32])) >> 224
                _109 = Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]
                mem[ceil32(arg2.length) + 164 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])] = mem[ceil32(arg2.length) + 160 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])]
                mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164] = mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 192 len Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32] or Mask(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32, -(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32) + 256, mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164])
                delegate arg1.mem[ceil32(arg2.length) + 164 len 4] with:
                     gas gas_remaining wei
                    args mem[ceil32(arg2.length) + 168 len _109 - 4]
            else:
                if msg.sender == 0x2dac8c52e54056656da31f0b1d0a1e923d13fc96:
                    mem[ceil32(arg2.length) + 128] = 4
                    mem[64] = ceil32(arg2.length) + 164
                    mem[ceil32(arg2.length) + 164 len floor32(arg2.length)] = call.data[arg2 + 36 len floor32(arg2.length)]
                    mem[ceil32(arg2.length) + floor32(arg2.length) + -(arg2.length % 32) + 196 len arg2.length % 32] = mem[floor32(arg2.length) + -(arg2.length % 32) + 160 len arg2.length % 32]
                    mem[ceil32(arg2.length) + 160 len 4] = Mask(32, 224, sha3(call.data[arg2 + 36 len floor32(arg2.length)], mem[ceil32(arg2.length) + floor32(arg2.length) + 164 len arg2.length % 32])) >> 224
                    _117 = Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]
                    mem[ceil32(arg2.length) + 164 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])] = mem[ceil32(arg2.length) + 160 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])]
                    mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164] = mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 192 len Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32] or Mask(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32, -(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32) + 256, mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164])
                    delegate arg1.mem[ceil32(arg2.length) + 164 len 4] with:
                         gas gas_remaining wei
                        args mem[ceil32(arg2.length) + 168 len _117 - 4]
                else:
                    require msg.sender == 0x55aec00dc22bfca3f2acf092148bddf218e1ac7
                    mem[ceil32(arg2.length) + 128] = 4
                    mem[64] = ceil32(arg2.length) + 164
                    mem[ceil32(arg2.length) + 164 len floor32(arg2.length)] = call.data[arg2 + 36 len floor32(arg2.length)]
                    mem[ceil32(arg2.length) + floor32(arg2.length) + -(arg2.length % 32) + 196 len arg2.length % 32] = mem[floor32(arg2.length) + -(arg2.length % 32) + 160 len arg2.length % 32]
                    mem[ceil32(arg2.length) + 160 len 4] = Mask(32, 224, sha3(call.data[arg2 + 36 len floor32(arg2.length)], mem[ceil32(arg2.length) + floor32(arg2.length) + 164 len arg2.length % 32])) >> 224
                    _125 = Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]
                    mem[ceil32(arg2.length) + 164 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])] = mem[ceil32(arg2.length) + 160 len floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)])]
                    mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164] = mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 192 len Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32] or Mask(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32, -(8 * -(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)] % 32) + 32) + 256, mem[ceil32(arg2.length) + floor32(Mask(8 * -ceil32(arg2.length) + arg2.length + 32, 0, 0), mem[arg2.length + 160 len -arg2.length + ceil32(arg2.length)]) + 164])
                    delegate arg1.mem[ceil32(arg2.length) + 164 len 4] with:
                         gas gas_remaining wei
                        args mem[ceil32(arg2.length) + 168 len _125 - 4]
}

function hswapV2Call(address arg1, uint256 arg2, uint256 arg3, bytes arg4) payable {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if arg2 > 0:
        if not arg3:
            require arg4.length >= 96
            require cd[(arg4 + 68)] <= 4294967296
            require cd[(arg4 + 68)] + 68 <= arg4.length + 36
            require cd[(arg4 + cd[(arg4 + 68)] + 36)] <= 4294967296 and cd[(arg4 + 68)] + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 68 <= arg4.length + 36
            mem[96] = cd[(arg4 + cd[(arg4 + 68)] + 36)]
            mem[128 len 32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]] = call.data[arg4 + cd[(arg4 + 68)] + 68 len 32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]]
            require cd[(arg4 + 100)] <= 4294967296
            require cd[(arg4 + 100)] + 68 <= arg4.length + 36
            require cd[(arg4 + cd[(arg4 + 100)] + 36)] <= 4294967296 and cd[(arg4 + 100)] + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 68 <= arg4.length + 36
            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 128] = cd[(arg4 + cd[(arg4 + 100)] + 36)]
            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 160 len 32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]] = call.data[arg4 + cd[(arg4 + 100)] + 68 len 32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]]
            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0
            sub_e7492977.length = cd[(arg4 + cd[(arg4 + 100)] + 36)]
            if not cd[(arg4 + cd[(arg4 + 100)] + 36)]:
                idx = 0
                while sub_e7492977.length > idx:
                    sub_e7492977[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                sub_03bdd72e.length = cd[(arg4 + cd[(arg4 + 68)] + 36)]
                if not cd[(arg4 + cd[(arg4 + 68)] + 36)]:
                    idx = 0
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _1709 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _1729 = mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _2500 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _2500
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _2554 = mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _2571 = mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _3311 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _3311
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3311, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _3480 = mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 <= 4294967296
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var88001 = floor32(mem[_3480 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3311, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5438 = mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 <= 4294967296
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_5438 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4236 = mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4321 = mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5401 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5401
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5401, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5854 = mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 <= 4294967296
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_5854 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5401, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8114 = mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 <= 4294967296
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_8114 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _2500
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _2500
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3325 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3366 = mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4210 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4210
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4474 = mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4565 = mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5403 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5403
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5403, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5858 = mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 <= 4294967296
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_5858 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5403, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8120 = mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 <= 4294967296
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_8120 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6844 = mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7011 = mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8063 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8063
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8063, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8626 = mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 <= 4294967296
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_8626 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8063, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 <= 4294967296
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4210
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4210
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _1719 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _1734 = mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _2501 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _2501
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _2556 = mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var72001 = floor32(mem[_2556 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _2558 = mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _2573 = mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var72001 = floor32(_2573)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _3314 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _3314
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3314, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _3484 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var89001 = floor32(mem[_3484 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3314, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5452 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_5452 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _3529 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_3529 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5454 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5454 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        require sub_e7492977.length - 1 < mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4244 = mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4331 = mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5407 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5407
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5407, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5864 = mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_5864 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5407, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8127 = mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_8127 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5967 = mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5967 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _2501
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _2501
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3332 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3371 = mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4215 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4215
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4478 = mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4567 = mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5409 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5409
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5409, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5868 = mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_5868 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5409, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8133 = mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_8133 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5970 = mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5970 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6860 = mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7031 = mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8069 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8069
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8069, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8634 = mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 <= 4294967296
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_8634 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8069, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 <= 4294967296
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4215
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4215
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                else:
                    s = 0
                    idx = 128
                    while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 128 > idx:
                        sub_03bdd72e[s].field_0 = mem[idx + 12 len 20]
                        s = s + 1
                        idx = idx + 32
                        continue 
                    idx = Mask(251, 0, (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 31) >> 5
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2621 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2654 = mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3316 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3316
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3465 = mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3513 = mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4217 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4217
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4217, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4524 = mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 <= 4294967296
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_4524 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4217, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6864 = mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 <= 4294967296
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_6864 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5470 = mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5591 = mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6799 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6799
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6799, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7330 = mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 <= 4294967296
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7330 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6799, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 <= 4294967296
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3316
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3316
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4251 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4338 = mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5414 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5414
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5822 = mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5937 = mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6801 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6801
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6801, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7334 = mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 <= 4294967296
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7334 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6801, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 <= 4294967296
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8154 = mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8323 = mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9193 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9193
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9193, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9193, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 <= 4294967296
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5414
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5414
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2634 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2667 = mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3317 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3317
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3469 = mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3515 = mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4220 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4220
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4220, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4528 = mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_4528 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4220, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6878 = mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_6878 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4612 = mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_4612 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5478 = mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5601 = mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6805 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6805
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6805, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7340 = mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 <= 4294967296
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7340 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6805, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 <= 4294967296
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3317
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3317
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4258 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4343 = mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                var64001 = floor32(_4343)
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5419 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5419
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8164 = mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var84001 = floor32(mem[_8164 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    require sub_e7492977.length - 1 < mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5826 = mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5939 = mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6807 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6807
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6807, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7344 = mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 <= 4294967296
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7344 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6807, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 <= 4294967296
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8170 = mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8343 = mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var84001 = floor32(_8343)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9199 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9199
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9199, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9199, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 <= 4294967296
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5419
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5419
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
            else:
                s = 0
                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 160
                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 > idx:
                    sub_e7492977[s].field_0 = mem[idx + 12 len 20]
                    s = s + 1
                    idx = idx + 32
                    continue 
                idx = Mask(251, 0, (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 31) >> 5
                while sub_e7492977.length > idx:
                    sub_e7492977[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                sub_03bdd72e.length = cd[(arg4 + cd[(arg4 + 68)] + 36)]
                if not cd[(arg4 + cd[(arg4 + 68)] + 36)]:
                    idx = 0
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2624 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2656 = mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3318 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3318
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3473 = mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3517 = mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4223 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4223
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4223, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4532 = mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 <= 4294967296
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_4532 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4223, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6892 = mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 <= 4294967296
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_6892 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5486 = mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5611 = mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6811 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6811
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6811, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7350 = mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 <= 4294967296
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7350 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6811, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9278 = mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 <= 4294967296
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_9278 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3318
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3318
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4265 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4348 = mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5424 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5424
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5830 = mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5941 = mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6813 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6813
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6813, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7354 = mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 <= 4294967296
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7354 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6813, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9284 = mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 <= 4294967296
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_9284 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8186 = mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8363 = mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9205 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9205
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9205, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9710 = mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 <= 4294967296
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_9710 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9205, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 <= 4294967296
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5424
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5424
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2636 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2668 = mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3319 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3319
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3475 = mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var76001 = floor32(mem[_3475 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3477 = mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3519 = mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var76001 = floor32(_3519)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4226 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4226
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4226, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4536 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_4536 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4226, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6906 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_6906 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4626 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_4626 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6908 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_6908 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        require sub_e7492977.length - 1 < mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5494 = mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5621 = mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6817 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6817
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6817, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7360 = mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7360 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6817, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9291 = mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_9291 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7471 = mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_7471 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3319
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3319
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4272 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4353 = mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5429 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5429
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5834 = mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5943 = mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6819 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6819
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6819, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7364 = mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7364 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6819, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9297 = mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_9297 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7474 = mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_7474 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8202 = mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8383 = mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9211 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9211
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9211, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9718 = mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 <= 4294967296
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_9718 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9211, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 <= 4294967296
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5429
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5429
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                else:
                    s = 0
                    idx = 128
                    while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 128 > idx:
                        sub_03bdd72e[s].field_0 = mem[idx + 12 len 20]
                        s = s + 1
                        idx = idx + 32
                        continue 
                    idx = Mask(251, 0, (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 31) >> 5
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3615 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3671 = mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4228 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4228
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4514 = mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4593 = mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5431 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5431
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5431, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5880 = mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 <= 4294967296
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5880 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5431, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8206 = mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 <= 4294967296
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_8206 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6924 = mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7079 = mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8105 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8105
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8105, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8648 = mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 <= 4294967296
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_8648 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8105, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 <= 4294967296
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4228
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4228
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _5501 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _5628 = mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _6824 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _6824
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _7318 = mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7433 = mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8107 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8107
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8107, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8652 = mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 <= 4294967296
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_8652 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8107, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 <= 4294967296
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _9318 = mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _9475 = mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _10119 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _10119
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10119, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10119, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 <= 4294967296
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _6824
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _6824
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3634 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3697 = mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4229 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4229
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4518 = mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4595 = mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5434 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5434
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5434, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5884 = mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_5884 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5434, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8220 = mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_8220 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5996 = mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_5996 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6932 = mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7089 = mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8111 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8111
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8111, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8658 = mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 <= 4294967296
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_8658 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8111, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 <= 4294967296
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4229
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4229
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _5508 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _5633 = mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                var68001 = floor32(_5633)
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _6829 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _6829
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _9328 = mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var88001 = floor32(mem[_9328 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    require sub_e7492977.length - 1 < mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _7322 = mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7435 = mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8113 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8113
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8113, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8662 = mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 <= 4294967296
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_8662 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8113, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 <= 4294967296
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _9334 = mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _9495 = mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var88001 = floor32(_9495)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _10125 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _10125
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10125, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10125, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 <= 4294967296
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _6829
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _6829
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
}

function pancakeCall(address arg1, uint256 arg2, uint256 arg3, bytes arg4) payable {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if arg2 > 0:
        if not arg3:
            require arg4.length >= 96
            require cd[(arg4 + 68)] <= 4294967296
            require cd[(arg4 + 68)] + 68 <= arg4.length + 36
            require cd[(arg4 + cd[(arg4 + 68)] + 36)] <= 4294967296 and cd[(arg4 + 68)] + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 68 <= arg4.length + 36
            mem[96] = cd[(arg4 + cd[(arg4 + 68)] + 36)]
            mem[128 len 32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]] = call.data[arg4 + cd[(arg4 + 68)] + 68 len 32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]]
            require cd[(arg4 + 100)] <= 4294967296
            require cd[(arg4 + 100)] + 68 <= arg4.length + 36
            require cd[(arg4 + cd[(arg4 + 100)] + 36)] <= 4294967296 and cd[(arg4 + 100)] + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 68 <= arg4.length + 36
            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 128] = cd[(arg4 + cd[(arg4 + 100)] + 36)]
            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 160 len 32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]] = call.data[arg4 + cd[(arg4 + 100)] + 68 len 32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]]
            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0
            sub_e7492977.length = cd[(arg4 + cd[(arg4 + 100)] + 36)]
            if not cd[(arg4 + cd[(arg4 + 100)] + 36)]:
                idx = 0
                while sub_e7492977.length > idx:
                    sub_e7492977[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                sub_03bdd72e.length = cd[(arg4 + cd[(arg4 + 68)] + 36)]
                if not cd[(arg4 + cd[(arg4 + 68)] + 36)]:
                    idx = 0
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _1709 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _1729 = mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_1709 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _2500 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _2500
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _2554 = mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _2571 = mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_2554 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _3311 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _3311
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3311, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _3480 = mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 <= 4294967296
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var88001 = floor32(mem[_3480 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3311, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5438 = mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 <= 4294967296
                                                require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3311) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_5438 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2571) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4236 = mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4321 = mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4236 + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5401 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5401
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5401, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5854 = mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 <= 4294967296
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_5854 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5401, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8114 = mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 <= 4294967296
                                                require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5401) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_8114 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2500
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2500, Array(len=sub_e7492977.length, data=mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4321) + (32 * _1729) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _2500
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _2500
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3325 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3366 = mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3325 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4210 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4210
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4474 = mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4565 = mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4474 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5403 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5403
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5403, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5858 = mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 <= 4294967296
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_5858 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5403, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8120 = mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 <= 4294967296
                                                require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5403) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_8120 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4565) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6844 = mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7011 = mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6844 + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8063 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8063
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8063, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8626 = mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 <= 4294967296
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_8626 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8063, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 <= 4294967296
                                                require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8063) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4210
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4210, Array(len=sub_e7492977.length, data=mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7011) + (32 * _3366) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4210
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4210
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _1719 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _1734 = mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_1719 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _2501 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _2501
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _2556 = mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var72001 = floor32(mem[_2556 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _2558 = mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _2573 = mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_2558 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var72001 = floor32(_2573)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _3314 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _3314
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3314, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _3484 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var89001 = floor32(mem[_3484 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _3314, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5452 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _3314) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_5452 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _3529 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_3529 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5454 = mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5454 + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        require sub_e7492977.length - 1 < mem[(32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2573) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4244 = mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4331 = mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4244 + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5407 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5407
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5407, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5864 = mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_5864 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5407, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8127 = mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5407) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_8127 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _2501
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5967 = mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5967 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _2501, Array(len=sub_e7492977.length, data=mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4331) + (32 * _1734) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _2501
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _2501
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3332 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3371 = mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3332 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4215 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4215
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4478 = mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4567 = mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4478 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5409 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5409
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5409, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5868 = mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_5868 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5409, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8133 = mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5409) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_8133 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5970 = mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5970 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4567) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6860 = mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7031 = mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6860 + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8069 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8069
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8069, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8634 = mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 <= 4294967296
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_8634 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8069, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 <= 4294967296
                                                require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8069) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4215
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4215, Array(len=sub_e7492977.length, data=mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7031) + (32 * _3371) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4215
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4215
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                else:
                    s = 0
                    idx = 128
                    while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 128 > idx:
                        sub_03bdd72e[s].field_0 = mem[idx + 12 len 20]
                        s = s + 1
                        idx = idx + 32
                        continue 
                    idx = Mask(251, 0, (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 31) >> 5
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2621 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2654 = mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2621 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3316 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3316
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3465 = mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3513 = mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3465 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4217 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4217
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4217, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4524 = mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 <= 4294967296
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_4524 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4217, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6864 = mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 <= 4294967296
                                                require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4217) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_6864 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3513) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5470 = mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5591 = mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5470 + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6799 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6799
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6799, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7330 = mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 <= 4294967296
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7330 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6799, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 <= 4294967296
                                                require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6799) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3316
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3316, Array(len=sub_e7492977.length, data=mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5591) + (32 * _2654) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3316
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3316
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4251 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4338 = mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4251 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5414 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5414
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5822 = mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5937 = mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5822 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6801 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6801
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6801, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7334 = mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 <= 4294967296
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7334 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6801, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 <= 4294967296
                                                require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6801) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5937) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8154 = mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8323 = mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8154 + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9193 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9193
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9193, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9193, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 <= 4294967296
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9193) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5414
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5414, Array(len=sub_e7492977.length, data=mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8323) + (32 * _4338) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5414
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5414
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2634 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2667 = mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3317 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3317
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3469 = mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3515 = mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3469 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4220 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4220
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4220, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4528 = mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_4528 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4220, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6878 = mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4220) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_6878 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4612 = mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_4612 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3515) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5478 = mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5601 = mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5478 + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6805 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6805
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6805, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7340 = mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 <= 4294967296
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7340 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6805, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 <= 4294967296
                                                require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6805) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3317
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3317, Array(len=sub_e7492977.length, data=mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5601) + (32 * _2667) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3317
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3317
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4258 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4343 = mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4258 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                var64001 = floor32(_4343)
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5419 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5419
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8164 = mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var84001 = floor32(mem[_8164 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    require sub_e7492977.length - 1 < mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5826 = mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5939 = mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5826 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6807 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6807
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6807, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7344 = mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 <= 4294967296
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7344 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6807, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 <= 4294967296
                                                require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6807) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5939) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8170 = mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8343 = mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8170 + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var84001 = floor32(_8343)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9199 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9199
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9199, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9199, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 <= 4294967296
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9199) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5419
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5419, Array(len=sub_e7492977.length, data=mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8343) + (32 * _4343) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5419
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5419
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
            else:
                s = 0
                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 160
                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 > idx:
                    sub_e7492977[s].field_0 = mem[idx + 12 len 20]
                    s = s + 1
                    idx = idx + 32
                    continue 
                idx = Mask(251, 0, (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 31) >> 5
                while sub_e7492977.length > idx:
                    sub_e7492977[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                sub_03bdd72e.length = cd[(arg4 + cd[(arg4 + 68)] + 36)]
                if not cd[(arg4 + cd[(arg4 + 68)] + 36)]:
                    idx = 0
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2624 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2656 = mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2624 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3318 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3318
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3473 = mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3517 = mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3473 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4223 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4223
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4223, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4532 = mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 <= 4294967296
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var92001 = floor32(mem[_4532 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4223, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6892 = mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 <= 4294967296
                                                require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4223) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_6892 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3517) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5486 = mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5611 = mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5486 + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6811 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6811
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6811, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7350 = mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 <= 4294967296
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7350 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6811, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9278 = mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 <= 4294967296
                                                require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6811) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_9278 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3318
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3318, Array(len=sub_e7492977.length, data=mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5611) + (32 * _2656) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3318
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3318
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4265 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4348 = mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4265 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5424 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5424
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5830 = mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5941 = mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5830 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6813 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6813
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6813, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7354 = mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 <= 4294967296
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_7354 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6813, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9284 = mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 <= 4294967296
                                                require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6813) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_9284 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5941) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8186 = mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8363 = mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8186 + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9205 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9205
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9205, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9710 = mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 <= 4294967296
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_9710 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9205, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 <= 4294967296
                                                require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9205) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5424
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5424, Array(len=sub_e7492977.length, data=mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8363) + (32 * _4348) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5424
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5424
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _2636 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _2668 = mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_2636 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _3319 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _3319
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3475 = mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var76001 = floor32(mem[_3475 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _3477 = mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _3519 = mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_3477 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var76001 = floor32(_3519)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _4226 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _4226
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4226, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4536 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var93001 = floor32(mem[_4536 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _4226, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6906 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _4226) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_6906 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _4626 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_4626 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _6908 = mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_6908 + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        require sub_e7492977.length - 1 < mem[(32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3519) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5494 = mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5621 = mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5494 + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6817 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6817
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6817, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7360 = mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7360 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6817, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9291 = mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6817) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_9291 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _3319
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7471 = mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_7471 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _3319, Array(len=sub_e7492977.length, data=mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5621) + (32 * _2668) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _3319
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _3319
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _4272 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _4353 = mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_4272 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _5429 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _5429
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _5834 = mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _5943 = mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_5834 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _6819 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _6819
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6819, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7364 = mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_7364 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _6819, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9297 = mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _6819) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_9297 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _7474 = mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_7474 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5943) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _8202 = mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _8383 = mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_8202 + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _9211 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _9211
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9211, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _9718 = mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 <= 4294967296
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_9718 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _9211, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 <= 4294967296
                                                require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _9211) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _5429
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _5429, Array(len=sub_e7492977.length, data=mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _8383) + (32 * _4353) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _5429
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _5429
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                else:
                    s = 0
                    idx = 128
                    while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 128 > idx:
                        sub_03bdd72e[s].field_0 = mem[idx + 12 len 20]
                        s = s + 1
                        idx = idx + 32
                        continue 
                    idx = Mask(251, 0, (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + 31) >> 5
                    while sub_03bdd72e.length > idx:
                        sub_03bdd72e[idx].field_0 = 0
                        idx = idx + 1
                        continue 
                    sub_bf85c715 = uint8(bool(cd[(arg4 + 36)]))
                    if sub_bf85c715:
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(msg.sender)
                        staticcall msg.sender.0xd21220a7 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not arg2:
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3615 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3671 = mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3615 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4228 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4228
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4514 = mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4593 = mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4514 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5431 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5431
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5431, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5880 = mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 <= 4294967296
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var96001 = floor32(mem[_5880 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5431, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8206 = mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 <= 4294967296
                                                require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5431) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_8206 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4593) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6924 = mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7079 = mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6924 + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8105 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8105
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8105, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8648 = mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 <= 4294967296
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_8648 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8105, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 <= 4294967296
                                                require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8105) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4228
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4228, Array(len=sub_e7492977.length, data=mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7079) + (32 * _3671) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4228
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4228
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _5501 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _5628 = mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_5501 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _6824 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _6824
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _7318 = mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7433 = mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_7318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8107 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8107
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8107, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8652 = mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 <= 4294967296
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_8652 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8107, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 <= 4294967296
                                                require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8107) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7433) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _9318 = mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _9475 = mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_9318 + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _10119 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _10119
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10119, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10119, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 <= 4294967296
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10119) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6824
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6824, Array(len=sub_e7492977.length, data=mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _9475) + (32 * _5628) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _6824
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _6824
                        else:
                            require not arg3
                            require 0 < path.length
                            address(path.field_0) = address(ext_call.return_data[0])
                            require 1 < path.length
                            mem[0] = 7
                            address(path.field_256) = address(ext_call.return_data[0])
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 164] = arg2
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 196] = 64
                            mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 228] = path.length
                            if not path.length:
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, 64, path.length
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _3634 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _3697 = mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_3634 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _4229 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _4229
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                    require return_data.size >= 32
                                    require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                    require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                    require mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    require sub_e7492977.length - 1 < mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _4518 = mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _4595 = mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_4518 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _5434 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _5434
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5434, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5884 = mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var97001 = floor32(mem[_5884 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _5434, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8220 = mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _5434) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_8220 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _5996 = mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var100001 = floor32(mem[_5996 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                                require mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _4595) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _6932 = mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7089 = mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_6932 + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8111 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8111
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8111, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8658 = mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 <= 4294967296
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_8658 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8111, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 <= 4294967296
                                                require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8111) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _4229
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _4229, Array(len=sub_e7492977.length, data=mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7089) + (32 * _3697) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _4229
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _4229
                            else:
                                mem[0] = 7
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260] = address(path.field_0)
                                idx = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260
                                s = 0
                                while (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (32 * path.length) + 260 > idx + 32:
                                    mem[idx + 32] = path[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                require ext_code.size(uniRouterAddress)
                                staticcall uniRouterAddress.getAmountsIn(uint256 rg1, address[] rg2) with:
                                        gas gas_remaining wei
                                       args arg2, Array(len=path.length, data=mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 260 len 32 * path.length])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160
                                require return_data.size >= 32
                                _5508 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                require mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                require mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160] <= 4294967296 and mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]) + 32 <= return_data.size
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160] = mem[mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160 len 4], Mask(224, 32, arg2) >> 32 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                _5633 = mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160]
                                mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len floor32(mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])] = mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 192 len floor32(mem[_5508 + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + 160])]
                                var68001 = floor32(_5633)
                                require 0 < mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 160]
                                _6829 = mem[(32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                if sub_03bdd72e.length <= 1:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args sushiRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = _6829
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_e7492977.length
                                    if not sub_e7492977.length:
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                    else:
                                        mem[0] = 10
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_e7492977.field_0)
                                        idx = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_e7492977.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_e7492977[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(sushiRouterAddress)
                                        call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _9328 = mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        var88001 = floor32(mem[_9328 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])
                                    require sub_e7492977.length - 1 < mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                    sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                else:
                                    require 0 < sub_03bdd72e.length
                                    mem[0] = 9
                                    require ext_code.size(address(sub_03bdd72e.field_0))
                                    call address(sub_03bdd72e.field_0).approve(address rg1, uint256 rg2) with:
                                         gas gas_remaining wei
                                        args uniRouterAddress, arg2
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 196] = arg2
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 228] = 0
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 292] = this.address
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 324] = 9999999999999999999
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 260] = 160
                                    mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 356] = sub_03bdd72e.length
                                    if not sub_03bdd72e.length:
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _7322 = mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _7435 = mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_7322 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _8113 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        mem[0] = 9
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _8113
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8113, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                _8662 = mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 <= 4294967296
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                                var101001 = floor32(mem[_8662 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224])
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _8113, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                                require return_data.size >= 32
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 <= 4294967296
                                                require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + 32 <= return_data.size
                                                require mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _8113) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _7435) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                    else:
                                        mem[0] = 9
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388] = address(sub_03bdd72e.field_0)
                                        idx = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388
                                        s = 0
                                        while (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + (32 * sub_03bdd72e.length) + 388 > idx + 32:
                                            mem[idx + 32] = sub_03bdd72e[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        require ext_code.size(uniRouterAddress)
                                        call uniRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                             gas gas_remaining wei
                                            args arg2, 0, 160, address(this.address), 9999999999999999999, sub_03bdd72e.length, mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 388 len 32 * sub_03bdd72e.length]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192
                                        require return_data.size >= 32
                                        _9334 = mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                        require mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                        require mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192] <= 4294967296 and mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]) + 32 <= return_data.size
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        _9495 = mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192]
                                        mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])] = mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 224 len floor32(mem[_9334 + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + ceil32(return_data.size) + 192])]
                                        var88001 = floor32(_9495)
                                        require sub_03bdd72e.length - 1 < mem[(32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 192]
                                        _10125 = mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_03bdd72e.length - 1 < sub_03bdd72e.length
                                        require ext_code.size(sub_03bdd72e[sub_03bdd72e.length].field_0)
                                        call sub_03bdd72e[sub_03bdd72e.length].field_0.approve(address rg1, uint256 rg2) with:
                                             gas gas_remaining wei
                                            args sushiRouterAddress, mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if mem[(32 * sub_03bdd72e.length - 1) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]:
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = _10125
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10125, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args _10125, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 <= 4294967296
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, _10125) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        else:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                                                 gas gas_remaining wei
                                                args sushiRouterAddress, arg2
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 228] = arg2
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 260] = _6829
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 324] = this.address
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 356] = 9999999999999999999
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 292] = 160
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 388] = sub_e7492977.length
                                            if not sub_e7492977.length:
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, 160, address(this.address), 9999999999999999999, sub_e7492977.length
                                            else:
                                                mem[0] = 10
                                                mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420] = address(sub_e7492977.field_0)
                                                idx = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420
                                                s = 0
                                                while (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + (32 * sub_e7492977.length) + 420 > idx + 32:
                                                    mem[idx + 32] = sub_e7492977[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                require ext_code.size(sushiRouterAddress)
                                                call sushiRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                                     gas gas_remaining wei
                                                    args arg2, _6829, Array(len=sub_e7492977.length, data=mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 420 len 32 * sub_e7492977.length]), address(this.address), 9999999999999999999
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224
                                            require return_data.size >= 32
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                                            require mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                                            require mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224] <= 4294967296 and mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32 <= return_data.size
                                            mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224] = mem[mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len 4], Mask(224, 32, arg2) >> 32 + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                                        require sub_e7492977.length - 1 < mem[(32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 224]
                                        sub_d524b0ff = mem[(32 * sub_e7492977.length - 1) + (32 * _9495) + (32 * _5633) + (32 * cd[(arg4 + cd[(arg4 + 68)] + 36)]) + (32 * cd[(arg4 + cd[(arg4 + 100)] + 36)]) + (4 * ceil32(return_data.size)) + 256]
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, _6829
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                call address(ext_call.return_data[0]).0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor12, sub_d524b0ff - _6829
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
}



}
