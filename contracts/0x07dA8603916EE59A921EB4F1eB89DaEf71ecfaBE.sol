contract main {


// =======================  Init code  ======================


const _fallback = code.data[30 len 1300]




// =====================  Runtime code  =====================


#
#  - cos(uint16 arg1)
#  - sin(uint16 arg1)
#
function _fallback() payable {
    revert
}

function sqrt(int256 arg1) payable {
    if arg1 >= 0:
        s = arg1 + 1 / 2
        t = arg1
        while s < t:
            require s
            s = (arg1 / s) + s / 2
            t = s
            continue 
    else:
        s = -arg1 + 1 / 2
        t = -arg1
        while s < t:
            require s
            s = (-arg1 / s) + s / 2
            t = s
            continue 
    return t
}

function sinDegrees(uint256 arg1) payable {
    mem[96] = 0
    mem[64] = 224
    mem[128] = 34
    mem[160] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
    mem[192] = 0x7fff000000000000000000000000000000000000000000000000000000000000
    if not Mask(1, 12, 16384 * arg1 % 360 / 360):
        _3 = mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 1) + 128]
        mem[224] = 0
        mem[64] = 352
        mem[256] = 34
        mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
        mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
        if Mask(1, 12, 16384 * arg1 % 360 / 360):
            if not Mask(1, 13, 16384 * arg1 % 360 / 360):
                mem[352] = mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 2) + 286 len 2] - ((mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 % 360 / 360)) / 256)
            else:
                mem[352] = -mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 2) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 % 360 / 360)) / 256)
        else:
            if not Mask(1, 13, 16384 * arg1 % 360 / 360):
                mem[352] = uint16(_3) + ((mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 % 360 / 360)) / 256)
            else:
                mem[352] = -uint16(_3) - ((mem[(2 * (Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 % 360 / 360)) / 256)
    else:
        _6 = mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 16) + 128]
        mem[224] = 0
        mem[64] = 352
        mem[256] = 34
        mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
        mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
        if Mask(1, 12, 16384 * arg1 % 360 / 360):
            if not Mask(1, 13, 16384 * arg1 % 360 / 360):
                mem[352] = mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 17) + 286 len 2] - ((mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 % 360 / 360)) / 256)
            else:
                mem[352] = -mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 17) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 % 360 / 360)) / 256)
        else:
            if not Mask(1, 13, 16384 * arg1 % 360 / 360):
                mem[352] = uint16(_6) + ((mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 % 360 / 360)) / 256)
            else:
                mem[352] = -uint16(_6) - ((mem[(2 * -(Mask(4, 8, 16384 * arg1 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 % 360 / 360)) / 256)
    return memory
      from 352
       len 32
}

function sinNanodegrees(uint256 arg1) payable {
    mem[96] = 0
    mem[64] = 224
    mem[128] = 34
    mem[160] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
    mem[192] = 0x7fff000000000000000000000000000000000000000000000000000000000000
    if not Mask(1, 12, 16384 * arg1 / 10^9 % 360 / 360):
        _3 = mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 1) + 128]
        mem[224] = 0
        mem[64] = 352
        mem[256] = 34
        mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
        mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
        if Mask(1, 12, 16384 * arg1 / 10^9 % 360 / 360):
            if not Mask(1, 13, 16384 * arg1 / 10^9 % 360 / 360):
                mem[352] = mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 2) + 286 len 2] - ((mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
            else:
                mem[352] = -mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 2) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
        else:
            if not Mask(1, 13, 16384 * arg1 / 10^9 % 360 / 360):
                mem[352] = uint16(_3) + ((mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
            else:
                mem[352] = -uint16(_3) - ((mem[(2 * (Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 2) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_3) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
    else:
        _6 = mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 16) + 128]
        mem[224] = 0
        mem[64] = 352
        mem[256] = 34
        mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
        mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
        if Mask(1, 12, 16384 * arg1 / 10^9 % 360 / 360):
            if not Mask(1, 13, 16384 * arg1 / 10^9 % 360 / 360):
                mem[352] = mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 17) + 286 len 2] - ((mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
            else:
                mem[352] = -mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 17) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
        else:
            if not Mask(1, 13, 16384 * arg1 / 10^9 % 360 / 360):
                mem[352] = uint16(_6) + ((mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
            else:
                mem[352] = -uint16(_6) - ((mem[(2 * -(Mask(4, 8, 16384 * arg1 / 10^9 % 360 / 360) >> 8) + 17) + 286 len 2] * uint8(16384 * arg1 / 10^9 % 360 / 360)) - (uint16(_6) * uint8(16384 * arg1 / 10^9 % 360 / 360)) / 256)
    return memory
      from 352
       len 32
}

function cosDegrees(uint256 arg1) payable {
    mem[96] = 0
    mem[64] = 224
    mem[128] = 34
    mem[160] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
    mem[192] = 0x7fff000000000000000000000000000000000000000000000000000000000000
    if uint16(16384 * arg1 % 360 / 360) <= 12288:
        if not Mask(1, 12, (16384 * arg1 % 360 / 360) + 4096):
            _4 = mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 1) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, (16384 * arg1 % 360 / 360) + 4096):
                if not Mask(1, 13, (16384 * arg1 % 360 / 360) + 4096):
                    mem[352] = mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] - ((mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
            else:
                if not Mask(1, 13, (16384 * arg1 % 360 / 360) + 4096):
                    mem[352] = uint16(_4) + ((mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -uint16(_4) - ((mem[(2 * (Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
        else:
            _10 = mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 16) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, (16384 * arg1 % 360 / 360) + 4096):
                if not Mask(1, 13, (16384 * arg1 % 360 / 360) + 4096):
                    mem[352] = mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] - ((mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
            else:
                if not Mask(1, 13, (16384 * arg1 % 360 / 360) + 4096):
                    mem[352] = uint16(_10) + ((mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -uint16(_10) - ((mem[(2 * -(Mask(4, 8, (16384 * arg1 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 % 360 / 360) + 4096)) / 256)
    else:
        if not Mask(1, 12, -(16384 * arg1 % 360 / 360) - 12288):
            _7 = mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 1) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, -(16384 * arg1 % 360 / 360) - 12288):
                if not Mask(1, 13, -(16384 * arg1 % 360 / 360) - 12288):
                    mem[352] = mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] - ((mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
            else:
                if not Mask(1, 13, -(16384 * arg1 % 360 / 360) - 12288):
                    mem[352] = uint16(_7) + ((mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -uint16(_7) - ((mem[(2 * (Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
        else:
            _12 = mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 16) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, -(16384 * arg1 % 360 / 360) - 12288):
                if not Mask(1, 13, -(16384 * arg1 % 360 / 360) - 12288):
                    mem[352] = mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] - ((mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
            else:
                if not Mask(1, 13, -(16384 * arg1 % 360 / 360) - 12288):
                    mem[352] = uint16(_12) + ((mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -uint16(_12) - ((mem[(2 * -(Mask(4, 8, -(16384 * arg1 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 % 360 / 360) - 12288)) / 256)
    return memory
      from 352
       len 32
}

function cosNanodegrees(uint256 arg1) payable {
    mem[96] = 0
    mem[64] = 224
    mem[128] = 34
    mem[160] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
    mem[192] = 0x7fff000000000000000000000000000000000000000000000000000000000000
    if uint16(16384 * arg1 / 10^9 % 360 / 360) <= 12288:
        if not Mask(1, 12, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
            _4 = mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 1) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
                if not Mask(1, 13, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
                    mem[352] = mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] - ((mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
            else:
                if not Mask(1, 13, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
                    mem[352] = uint16(_4) + ((mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -uint16(_4) - ((mem[(2 * (Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 2) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_4) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
        else:
            _10 = mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 16) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
                if not Mask(1, 13, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
                    mem[352] = mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] - ((mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
            else:
                if not Mask(1, 13, (16384 * arg1 / 10^9 % 360 / 360) + 4096):
                    mem[352] = uint16(_10) + ((mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
                else:
                    mem[352] = -uint16(_10) - ((mem[(2 * -(Mask(4, 8, (16384 * arg1 / 10^9 % 360 / 360) + 4096) >> 8) + 17) + 286 len 2] * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) - (uint16(_10) * uint8((16384 * arg1 / 10^9 % 360 / 360) + 4096)) / 256)
    else:
        if not Mask(1, 12, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
            _7 = mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 1) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
                if not Mask(1, 13, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
                    mem[352] = mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] - ((mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
            else:
                if not Mask(1, 13, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
                    mem[352] = uint16(_7) + ((mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -uint16(_7) - ((mem[(2 * (Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 2) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_7) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
        else:
            _12 = mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 16) + 128]
            mem[224] = 0
            mem[64] = 352
            mem[256] = 34
            mem[288] = 0xc8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61
            mem[320] = 0x7fff000000000000000000000000000000000000000000000000000000000000
            if Mask(1, 12, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
                if not Mask(1, 13, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
                    mem[352] = mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] - ((mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * (mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
            else:
                if not Mask(1, 13, -(16384 * arg1 / 10^9 % 360 / 360) - 12288):
                    mem[352] = uint16(_12) + ((mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
                else:
                    mem[352] = -uint16(_12) - ((mem[(2 * -(Mask(4, 8, -(16384 * arg1 / 10^9 % 360 / 360) - 12288) >> 8) + 17) + 286 len 2] * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) - (uint16(_12) * uint8(-(16384 * arg1 / 10^9 % 360 / 360) - 12288)) / 256)
    return memory
      from 352
       len 32
}



}
