contract main {




// =====================  Runtime code  =====================


array of struct stor0;
array of struct stor1;
mapping of address ownerOf;
mapping of uint256 balanceOf;
mapping of address approved;
mapping of uint8 stor5;
mapping of uint256 tokenOfOwnerByIndex;
mapping of uint256 stor7;
array of uint256 tokenByIndex;
mapping of uint256 stor9;
address owner;
array of struct stor11;
array of struct stor12;
uint256 cost;
uint256 maxSupply;
uint256 maxMintAmount;
uint8 stor16;
uint8 stor16; offset 8
uint256 stor16; offset 8
array of struct stor17;

function getApproved(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not ownerOf[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approved query for nonexistent token'
    return approved[arg1]
}

function cost() {
    return cost
}

function totalSupply() {
    return tokenByIndex.length
}

function maxMintAmount() {
    return maxMintAmount
}

function tokenOfOwnerByIndex(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
    if arg2 >= balanceOf[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721Enumerable: owner index out of bounds'
    return tokenOfOwnerByIndex[address(arg1)][arg2]
}

function tokenByIndex(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if arg1 >= tokenByIndex.length:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721Enumerable: global index out of bounds'
    return tokenByIndex[arg1]
}

function revealed() {
    return bool(uint8(stor16.field_8))
}

function paused() {
    return bool(uint8(stor16.field_0))
}

function ownerOf(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not ownerOf[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    return ownerOf[arg1]
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
    return balanceOf[address(arg1)]
}

function owner() {
    return owner
}

function maxSupply() {
    return maxSupply
}

function isApprovedForAll(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return bool(stor5[address(arg1)][address(arg2)])
}

function _fallback() payable {
    revert
}

function reveal() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor16.field_8) = 1
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function setCost(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    cost = arg1
}

function setmaxMintAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    maxMintAmount = arg1
}

function pause(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    uint8(stor16.field_0) = uint8(arg1)
}

function withdraw() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    call msg.sender with:
       value eth.balance(this.address) wei
         gas gas_remaining wei
    require ext_call.success
}

function setApprovalForAll(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if arg1 == msg.sender:
        revert with 0, 'ERC721: approve to caller'
    stor5[address(msg.sender)][address(arg1)] = uint8(arg2)
    emit ApprovalForAll(arg2, msg.sender, arg1);
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function supportsInterface(bytes4 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == Mask(32, 224, arg1)
    if Mask(32, 224, arg1) == 0x780e9d6300000000000000000000000000000000000000000000000000000000:
        return True
    if Mask(32, 224, arg1) == 0x80ac58cd00000000000000000000000000000000000000000000000000000000:
        return True
    if Mask(32, 224, arg1) == 0x5b5e139f00000000000000000000000000000000000000000000000000000000:
        return True
    return (Mask(32, 224, arg1) == 0x1ffc9a700000000000000000000000000000000000000000000000000000000)
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not ownerOf[arg2]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    if arg1 == ownerOf[arg2]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approval to current owner'
    if ownerOf[arg2] != msg.sender:
        if not stor5[stor2[arg2]][address(msg.sender)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'ERC721: approve caller is not owner nor approved for all'
    approved[arg2] = arg1
    if not ownerOf[arg2]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    emit Approval(ownerOf[arg2], arg1, arg2);
}

function walletOfOwner(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
    if balanceOf[address(arg1)] > test266151307():
        revert with 'NH{q', 65
    if balanceOf[address(arg1)]:
        mem[128 len 32 * balanceOf[address(arg1)]] = call.data[calldata.size len 32 * balanceOf[address(arg1)]]
    idx = 0
    while idx < balanceOf[address(arg1)]:
        if not arg1:
            revert with 0, 'ERC721: balance query for the zero address'
        if idx >= balanceOf[address(arg1)]:
            revert with 0, 'ERC721Enumerable: owner index out of bounds'
        mem[0] = idx
        mem[32] = sha3(address(arg1), 6)
        if idx >= balanceOf[address(arg1)]:
            revert with 'NH{q', 50
        mem[(32 * idx) + 128] = tokenOfOwnerByIndex[address(arg1)][idx]
        if idx == -1:
            revert with 'NH{q', 17
        idx = idx + 1
        continue 
    return Array(len=balanceOf[address(arg1)], data=mem[128 len 32 * balanceOf[address(arg1)]])
}

function setBaseURI(string arg1) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 'NH{q', 65
    if ceil32(ceil32(arg1.length)) + 97 > test266151307() or ceil32(ceil32(arg1.length)) + 97 < 96:
        revert with 'NH{q', 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if bool(stor11.length):
        if bool(stor11.length) == stor11.length.field_1 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor11[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor11.length = 0
            idx = 0
            while stor11.length.field_1 + 31 / 32 > idx:
                stor11[idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor11.length) == stor11.length.field_1 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor11[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor11.length = 0
            idx = 0
            while stor11.length.field_1 + 31 / 32 > idx:
                stor11[idx].field_0 = 0
                idx = idx + 1
                continue 
}

function setBaseExtension(string arg1) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 'NH{q', 65
    if ceil32(ceil32(arg1.length)) + 97 > test266151307() or ceil32(ceil32(arg1.length)) + 97 < 96:
        revert with 'NH{q', 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if bool(stor12.length):
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor12[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor12.length = 0
            idx = 0
            while stor12.length.field_1 + 31 / 32 > idx:
                stor12[idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor12[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor12.length = 0
            idx = 0
            while stor12.length.field_1 + 31 / 32 > idx:
                stor12[idx].field_0 = 0
                idx = idx + 1
                continue 
}

function setNotRevealedURI(string arg1) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 'NH{q', 65
    if ceil32(ceil32(arg1.length)) + 97 > test266151307() or ceil32(ceil32(arg1.length)) + 97 < 96:
        revert with 'NH{q', 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if bool(stor17.length):
        if bool(stor17.length) == stor17.length.field_1 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor17[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor17.length = 0
            idx = 0
            while stor17.length.field_1 + 31 / 32 > idx:
                stor17[idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor17.length) == stor17.length.field_1 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor17[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor17.length = 0
            idx = 0
            while stor17.length.field_1 + 31 / 32 > idx:
                stor17[idx].field_0 = 0
                idx = idx + 1
                continue 
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: operator query for nonexistent token'
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != msg.sender:
        if not ownerOf[arg3]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approved query for nonexistent token'
        if approved[arg3] != msg.sender:
            if not stor5[stor2[arg3]][address(msg.sender)]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: transfer caller is not owner nor approved'
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: transfer of token that is not own'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: transfer to the zero address'
    if not arg1:
        stor9[arg3] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = arg3
    else:
        if arg1 != arg2:
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            if stor7[arg3] != balanceOf[address(arg1)] - 1:
                tokenOfOwnerByIndex[address(arg1)][stor7[arg3]] = tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1]
                stor7[stor6[address(arg1)][stor3[address(arg1)] - 1]] = stor7[arg3]
            stor7[arg3] = 0
            tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1] = 0
    if arg2:
        if arg2 != arg1:
            if not arg2:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
            tokenOfOwnerByIndex[address(arg2)][stor3[address(arg2)]] = arg3
            stor7[arg3] = balanceOf[address(arg2)]
    else:
        if tokenByIndex.length < 1:
            revert with 'NH{q', 17
        if tokenByIndex.length - 1 >= tokenByIndex.length:
            revert with 'NH{q', 50
        if stor9[arg3] >= tokenByIndex.length:
            revert with 'NH{q', 50
        tokenByIndex[stor9[arg3]] = tokenByIndex[tokenByIndex.length]
        stor9[stor8[stor8.length]] = stor9[arg3]
        stor9[arg3] = 0
        if not tokenByIndex.length:
            revert with 'NH{q', 49
        tokenByIndex[tokenByIndex.length] = 0
        tokenByIndex.length--
    approved[arg3] = 0
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    emit Approval(ownerOf[arg3], 0, arg3);
    if balanceOf[address(arg1)] < 1:
        revert with 'NH{q', 17
    balanceOf[address(arg1)]--
    if balanceOf[address(arg2)] > -2:
        revert with 'NH{q', 17
    balanceOf[address(arg2)]++
    ownerOf[arg3] = arg2
    emit Transfer(arg1, arg2, arg3);
}

function name() {
    if bool(stor0.length):
        if bool(stor0.length) == stor0.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor0.length):
            if bool(stor0.length) == stor0.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor0.length.field_1:
                if 31 < stor0.length.field_1:
                    mem[128] = uint256(stor0.field_0)
                    idx = 128
                    s = 0
                    while stor0.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor0[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor0.length.field_1), data=mem[128 len ceil32(stor0.length.field_1)])
                mem[128] = 256 * stor0.length.field_8
        else:
            if bool(stor0.length) == stor0.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor0.length.field_1:
                if 31 < stor0.length.field_1:
                    mem[128] = uint256(stor0.field_0)
                    idx = 128
                    s = 0
                    while stor0.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor0[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor0.length.field_1), data=mem[128 len ceil32(stor0.length.field_1)])
                mem[128] = 256 * stor0.length.field_8
        mem[ceil32(stor0.length.field_1) + 192 len ceil32(stor0.length.field_1)] = mem[128 len ceil32(stor0.length.field_1)]
        if ceil32(stor0.length.field_1) > stor0.length.field_1:
            mem[ceil32(stor0.length.field_1) + stor0.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor0.length.field_1), data=mem[128 len ceil32(stor0.length.field_1)], mem[(2 * ceil32(stor0.length.field_1)) + 192 len 2 * ceil32(stor0.length.field_1)]), 
    if bool(stor0.length) == stor0.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor0.length):
        if bool(stor0.length) == stor0.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor0.length.field_1:
            if 31 < stor0.length.field_1:
                mem[128] = uint256(stor0.field_0)
                idx = 128
                s = 0
                while stor0.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor0[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1)])
            mem[128] = 256 * stor0.length.field_8
    else:
        if bool(stor0.length) == stor0.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor0.length.field_1:
            if 31 < stor0.length.field_1:
                mem[128] = uint256(stor0.field_0)
                idx = 128
                s = 0
                while stor0.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor0[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1)])
            mem[128] = 256 * stor0.length.field_8
    mem[ceil32(stor0.length.field_1) + 192 len ceil32(stor0.length.field_1)] = mem[128 len ceil32(stor0.length.field_1)]
    if ceil32(stor0.length.field_1) > stor0.length.field_1:
        mem[ceil32(stor0.length.field_1) + stor0.length.field_1 + 192] = 0
    return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1)], mem[(2 * ceil32(stor0.length.field_1)) + 192 len 2 * ceil32(stor0.length.field_1)]), 
}

function symbol() {
    if bool(stor1.length):
        if bool(stor1.length) == stor1.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor1.length):
            if bool(stor1.length) == stor1.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor1.length.field_1:
                if 31 < stor1.length.field_1:
                    mem[128] = uint256(stor1.field_0)
                    idx = 128
                    s = 0
                    while stor1.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor1[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor1.length.field_1), data=mem[128 len ceil32(stor1.length.field_1)])
                mem[128] = 256 * stor1.length.field_8
        else:
            if bool(stor1.length) == stor1.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor1.length.field_1:
                if 31 < stor1.length.field_1:
                    mem[128] = uint256(stor1.field_0)
                    idx = 128
                    s = 0
                    while stor1.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor1[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor1.length.field_1), data=mem[128 len ceil32(stor1.length.field_1)])
                mem[128] = 256 * stor1.length.field_8
        mem[ceil32(stor1.length.field_1) + 192 len ceil32(stor1.length.field_1)] = mem[128 len ceil32(stor1.length.field_1)]
        if ceil32(stor1.length.field_1) > stor1.length.field_1:
            mem[ceil32(stor1.length.field_1) + stor1.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor1.length.field_1), data=mem[128 len ceil32(stor1.length.field_1)], mem[(2 * ceil32(stor1.length.field_1)) + 192 len 2 * ceil32(stor1.length.field_1)]), 
    if bool(stor1.length) == stor1.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor1.length):
        if bool(stor1.length) == stor1.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor1.length.field_1:
            if 31 < stor1.length.field_1:
                mem[128] = uint256(stor1.field_0)
                idx = 128
                s = 0
                while stor1.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor1[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1)])
            mem[128] = 256 * stor1.length.field_8
    else:
        if bool(stor1.length) == stor1.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor1.length.field_1:
            if 31 < stor1.length.field_1:
                mem[128] = uint256(stor1.field_0)
                idx = 128
                s = 0
                while stor1.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor1[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1)])
            mem[128] = 256 * stor1.length.field_8
    mem[ceil32(stor1.length.field_1) + 192 len ceil32(stor1.length.field_1)] = mem[128 len ceil32(stor1.length.field_1)]
    if ceil32(stor1.length.field_1) > stor1.length.field_1:
        mem[ceil32(stor1.length.field_1) + stor1.length.field_1 + 192] = 0
    return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1)], mem[(2 * ceil32(stor1.length.field_1)) + 192 len 2 * ceil32(stor1.length.field_1)]), 
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: operator query for nonexistent token'
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != msg.sender:
        if not ownerOf[arg3]:
            revert with 0, 'ERC721: approved query for nonexistent token'
        if approved[arg3] != msg.sender:
            if not stor5[stor2[arg3]][address(msg.sender)]:
                revert with 0, 'ERC721: transfer caller is not owner nor approved'
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != arg1:
        revert with 0, 'ERC721: transfer of token that is not own'
    if not arg2:
        revert with 0, 'ERC721: transfer to the zero address'
    if not arg1:
        stor9[arg3] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = arg3
    else:
        if arg1 != arg2:
            if not arg1:
                revert with 0, 'ERC721: balance query for the zero address'
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            if stor7[arg3] != balanceOf[address(arg1)] - 1:
                tokenOfOwnerByIndex[address(arg1)][stor7[arg3]] = tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1]
                stor7[stor6[address(arg1)][stor3[address(arg1)] - 1]] = stor7[arg3]
            stor7[arg3] = 0
            tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1] = 0
    if arg2:
        if arg2 != arg1:
            if not arg2:
                revert with 0, 'ERC721: balance query for the zero address'
            tokenOfOwnerByIndex[address(arg2)][stor3[address(arg2)]] = arg3
            stor7[arg3] = balanceOf[address(arg2)]
    else:
        if tokenByIndex.length < 1:
            revert with 'NH{q', 17
        if tokenByIndex.length - 1 >= tokenByIndex.length:
            revert with 'NH{q', 50
        if stor9[arg3] >= tokenByIndex.length:
            revert with 'NH{q', 50
        tokenByIndex[stor9[arg3]] = tokenByIndex[tokenByIndex.length]
        stor9[stor8[stor8.length]] = stor9[arg3]
        stor9[arg3] = 0
        if not tokenByIndex.length:
            revert with 'NH{q', 49
        tokenByIndex[tokenByIndex.length] = 0
        tokenByIndex.length--
    approved[arg3] = 0
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    emit Approval(ownerOf[arg3], 0, arg3);
    if balanceOf[address(arg1)] < 1:
        revert with 'NH{q', 17
    balanceOf[address(arg1)]--
    if balanceOf[address(arg2)] > -2:
        revert with 'NH{q', 17
    balanceOf[address(arg2)]++
    ownerOf[arg3] = arg2
    emit Transfer(arg1, arg2, arg3);
    if ext_code.size(arg2) > 0:
        require ext_code.size(arg2)
        call arg2.onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) with:
             gas gas_remaining wei
            args 0, uint32(msg.sender), address(arg1), arg3, 128, 0
        if not ext_call.success:
            if not return_data.size:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            if not return_data.size:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
}

function baseExtension() {
    if bool(stor12.length):
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor12.length.field_1:
                if 31 < stor12.length.field_1:
                    mem[128] = uint256(stor12.field_0)
                    idx = 128
                    s = 0
                    while stor12.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor12[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor12.length.field_1), data=mem[128 len ceil32(stor12.length.field_1)])
                mem[128] = 256 * stor12.length.field_8
        else:
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor12.length.field_1:
                if 31 < stor12.length.field_1:
                    mem[128] = uint256(stor12.field_0)
                    idx = 128
                    s = 0
                    while stor12.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor12[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor12.length.field_1), data=mem[128 len ceil32(stor12.length.field_1)])
                mem[128] = 256 * stor12.length.field_8
        mem[ceil32(stor12.length.field_1) + 192 len ceil32(stor12.length.field_1)] = mem[128 len ceil32(stor12.length.field_1)]
        if ceil32(stor12.length.field_1) > stor12.length.field_1:
            mem[ceil32(stor12.length.field_1) + stor12.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor12.length.field_1), data=mem[128 len ceil32(stor12.length.field_1)], mem[(2 * ceil32(stor12.length.field_1)) + 192 len 2 * ceil32(stor12.length.field_1)]), 
    if bool(stor12.length) == stor12.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor12.length):
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor12.length.field_1:
            if 31 < stor12.length.field_1:
                mem[128] = uint256(stor12.field_0)
                idx = 128
                s = 0
                while stor12.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor12[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1)])
            mem[128] = 256 * stor12.length.field_8
    else:
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor12.length.field_1:
            if 31 < stor12.length.field_1:
                mem[128] = uint256(stor12.field_0)
                idx = 128
                s = 0
                while stor12.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor12[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1)])
            mem[128] = 256 * stor12.length.field_8
    mem[ceil32(stor12.length.field_1) + 192 len ceil32(stor12.length.field_1)] = mem[128 len ceil32(stor12.length.field_1)]
    if ceil32(stor12.length.field_1) > stor12.length.field_1:
        mem[ceil32(stor12.length.field_1) + stor12.length.field_1 + 192] = 0
    return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1)], mem[(2 * ceil32(stor12.length.field_1)) + 192 len 2 * ceil32(stor12.length.field_1)]), 
}

function notRevealedUri() {
    if bool(stor17.length):
        if bool(stor17.length) == stor17.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor17.length):
            if bool(stor17.length) == stor17.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor17.length.field_1:
                if 31 < stor17.length.field_1:
                    mem[128] = uint256(stor17.field_0)
                    idx = 128
                    s = 0
                    while stor17.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor17[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor17.length.field_1), data=mem[128 len ceil32(stor17.length.field_1)])
                mem[128] = 256 * stor17.length.field_8
        else:
            if bool(stor17.length) == stor17.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor17.length.field_1:
                if 31 < stor17.length.field_1:
                    mem[128] = uint256(stor17.field_0)
                    idx = 128
                    s = 0
                    while stor17.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor17[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor17.length.field_1), data=mem[128 len ceil32(stor17.length.field_1)])
                mem[128] = 256 * stor17.length.field_8
        mem[ceil32(stor17.length.field_1) + 192 len ceil32(stor17.length.field_1)] = mem[128 len ceil32(stor17.length.field_1)]
        if ceil32(stor17.length.field_1) > stor17.length.field_1:
            mem[ceil32(stor17.length.field_1) + stor17.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor17.length.field_1), data=mem[128 len ceil32(stor17.length.field_1)], mem[(2 * ceil32(stor17.length.field_1)) + 192 len 2 * ceil32(stor17.length.field_1)]), 
    if bool(stor17.length) == stor17.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor17.length):
        if bool(stor17.length) == stor17.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor17.length.field_1:
            if 31 < stor17.length.field_1:
                mem[128] = uint256(stor17.field_0)
                idx = 128
                s = 0
                while stor17.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor17[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor17.length % 128, data=mem[128 len ceil32(stor17.length.field_1)])
            mem[128] = 256 * stor17.length.field_8
    else:
        if bool(stor17.length) == stor17.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor17.length.field_1:
            if 31 < stor17.length.field_1:
                mem[128] = uint256(stor17.field_0)
                idx = 128
                s = 0
                while stor17.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor17[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor17.length % 128, data=mem[128 len ceil32(stor17.length.field_1)])
            mem[128] = 256 * stor17.length.field_8
    mem[ceil32(stor17.length.field_1) + 192 len ceil32(stor17.length.field_1)] = mem[128 len ceil32(stor17.length.field_1)]
    if ceil32(stor17.length.field_1) > stor17.length.field_1:
        mem[ceil32(stor17.length.field_1) + stor17.length.field_1 + 192] = 0
    return Array(len=stor17.length % 128, data=mem[128 len ceil32(stor17.length.field_1)], mem[(2 * ceil32(stor17.length.field_1)) + 192 len 2 * ceil32(stor17.length.field_1)]), 
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    if arg4.length > test266151307():
        revert with 'NH{q', 65
    if ceil32(ceil32(arg4.length)) + 97 > test266151307() or ceil32(ceil32(arg4.length)) + 97 < 96:
        revert with 'NH{q', 65
    require arg4 + arg4.length + 36 <= calldata.size
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: operator query for nonexistent token'
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != msg.sender:
        if not ownerOf[arg3]:
            revert with 0, 'ERC721: approved query for nonexistent token'
        if approved[arg3] != msg.sender:
            if not stor5[stor2[arg3]][address(msg.sender)]:
                revert with 0, 'ERC721: transfer caller is not owner nor approved'
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != arg1:
        revert with 0, 'ERC721: transfer of token that is not own'
    if not arg2:
        revert with 0, 'ERC721: transfer to the zero address'
    if not arg1:
        stor9[arg3] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = arg3
    else:
        if arg1 != arg2:
            if not arg1:
                revert with 0, 'ERC721: balance query for the zero address'
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            if stor7[arg3] != balanceOf[address(arg1)] - 1:
                tokenOfOwnerByIndex[address(arg1)][stor7[arg3]] = tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1]
                stor7[stor6[address(arg1)][stor3[address(arg1)] - 1]] = stor7[arg3]
            stor7[arg3] = 0
            tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1] = 0
    if arg2:
        if arg2 != arg1:
            if not arg2:
                revert with 0, 'ERC721: balance query for the zero address'
            tokenOfOwnerByIndex[address(arg2)][stor3[address(arg2)]] = arg3
            stor7[arg3] = balanceOf[address(arg2)]
    else:
        if tokenByIndex.length < 1:
            revert with 'NH{q', 17
        if tokenByIndex.length - 1 >= tokenByIndex.length:
            revert with 'NH{q', 50
        if stor9[arg3] >= tokenByIndex.length:
            revert with 'NH{q', 50
        tokenByIndex[stor9[arg3]] = tokenByIndex[tokenByIndex.length]
        stor9[stor8[stor8.length]] = stor9[arg3]
        stor9[arg3] = 0
        if not tokenByIndex.length:
            revert with 'NH{q', 49
        tokenByIndex[tokenByIndex.length] = 0
        tokenByIndex.length--
    approved[arg3] = 0
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    emit Approval(ownerOf[arg3], 0, arg3);
    if balanceOf[address(arg1)] < 1:
        revert with 'NH{q', 17
    balanceOf[address(arg1)]--
    if balanceOf[address(arg2)] > -2:
        revert with 'NH{q', 17
    balanceOf[address(arg2)]++
    ownerOf[arg3] = arg2
    emit Transfer(arg1, arg2, arg3);
    if ext_code.size(arg2) > 0:
        require ext_code.size(arg2)
        call arg2.onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) with:
             gas gas_remaining wei
            args msg.sender, address(arg1), arg3, Array(len=arg4.length, data=arg4[all])
        if not ext_call.success:
            if not return_data.size:
                if not arg4.length:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                revert with arg4[all]
            if not return_data.size:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
}

function mint(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require not uint8(stor16.field_0)
    require arg1 > 0
    require arg1 <= maxMintAmount
    if tokenByIndex.length > -arg1 - 1:
        revert with 'NH{q', 17
    require tokenByIndex.length + arg1 <= maxSupply
    if msg.sender == owner:
        idx = 1
        while idx <= arg1:
            if tokenByIndex.length > -idx - 1:
                revert with 'NH{q', 17
            _177 = mem[64]
            mem[64] = mem[64] + 32
            mem[_177] = 0
            if not msg.sender:
                revert with 0, 'ERC721: mint to the zero address'
            if ownerOf[stor8.length + idx]:
                revert with 0, 'ERC721: token already minted'
            stor9[stor8.length + idx] = tokenByIndex.length
            tokenByIndex.length++
            tokenByIndex[tokenByIndex.length] = tokenByIndex.length + idx
            if msg.sender:
                tokenOfOwnerByIndex[address(msg.sender)][stor3[address(msg.sender)]] = tokenByIndex.length + idx
                stor7[stor8.length + idx] = balanceOf[address(msg.sender)]
                if balanceOf[address(msg.sender)] > -2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)]++
                mem[0] = tokenByIndex.length + idx
                mem[32] = 2
                ownerOf[stor8.length + idx] = msg.sender
                emit Transfer(0, msg.sender, tokenByIndex.length + idx);
                if ext_code.size(msg.sender) > 0:
                    mem[mem[64]] = 0x150b7a0200000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 0
                    mem[mem[64] + 68] = tokenByIndex.length + idx
                    mem[mem[64] + 100] = 128
                    mem[mem[64] + 132] = 0
                    s = 0
                    while s < 0:
                        mem[mem[64] + s + 164] = mem[_177 + s + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(msg.sender)
                    call msg.sender.onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) with:
                         gas gas_remaining wei
                        args msg.sender, 0, tokenByIndex.length + idx, 128, 0
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        if not return_data.size:
                            if not mem[96]:
                                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                            revert with memory
                              from 128
                               len mem[96]
                        if not return_data.size:
                            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                        revert with ext_call.return_data[0 len return_data.size]
                    _365 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_365] == Mask(32, 224, mem[_365])
                    if Mask(32, 224, mem[_365]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            else:
                if tokenByIndex.length < 1:
                    revert with 'NH{q', 17
                if tokenByIndex.length - 1 >= tokenByIndex.length:
                    revert with 'NH{q', 50
                if stor9[stor8.length + idx] >= tokenByIndex.length:
                    revert with 'NH{q', 50
                tokenByIndex[stor9[tokenByIndex.length + idx]] = tokenByIndex[tokenByIndex.length]
                stor9[stor8[stor8.length]] = stor9[stor8.length + idx]
                stor9[stor8.length + idx] = 0
                if not tokenByIndex.length:
                    revert with 'NH{q', 49
                tokenByIndex[tokenByIndex.length] = 0
                tokenByIndex.length--
                if balanceOf[address(msg.sender)] > -2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)]++
                mem[0] = tokenByIndex.length + idx
                mem[32] = 2
                ownerOf[stor8.length + idx] = msg.sender
                emit Transfer(0, msg.sender, tokenByIndex.length + idx);
                if ext_code.size(msg.sender) > 0:
                    mem[mem[64]] = 0x150b7a0200000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 0
                    mem[mem[64] + 68] = tokenByIndex.length + idx
                    mem[mem[64] + 100] = 128
                    mem[mem[64] + 132] = 0
                    s = 0
                    while s < 0:
                        mem[mem[64] + s + 164] = mem[_177 + s + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(msg.sender)
                    call msg.sender.onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) with:
                         gas gas_remaining wei
                        args msg.sender, 0, tokenByIndex.length + idx, 128, 0
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        if not return_data.size:
                            if not mem[96]:
                                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                            revert with memory
                              from 128
                               len mem[96]
                        if not return_data.size:
                            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                        revert with ext_call.return_data[0 len return_data.size]
                    _366 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_366] == Mask(32, 224, mem[_366])
                    if Mask(32, 224, mem[_366]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            if idx == -1:
                revert with 'NH{q', 17
            idx = idx + 1
            continue 
    else:
        if cost and arg1 > -1 / cost:
            revert with 'NH{q', 17
        require msg.value >= cost * arg1
        idx = 1
        while idx <= arg1:
            if tokenByIndex.length > -idx - 1:
                revert with 'NH{q', 17
            _178 = mem[64]
            mem[64] = mem[64] + 32
            mem[_178] = 0
            if not msg.sender:
                revert with 0, 'ERC721: mint to the zero address'
            if ownerOf[stor8.length + idx]:
                revert with 0, 'ERC721: token already minted'
            stor9[stor8.length + idx] = tokenByIndex.length
            tokenByIndex.length++
            tokenByIndex[tokenByIndex.length] = tokenByIndex.length + idx
            if msg.sender:
                tokenOfOwnerByIndex[address(msg.sender)][stor3[address(msg.sender)]] = tokenByIndex.length + idx
                stor7[stor8.length + idx] = balanceOf[address(msg.sender)]
                if balanceOf[address(msg.sender)] > -2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)]++
                mem[0] = tokenByIndex.length + idx
                mem[32] = 2
                ownerOf[stor8.length + idx] = msg.sender
                emit Transfer(0, msg.sender, tokenByIndex.length + idx);
                if ext_code.size(msg.sender) > 0:
                    mem[mem[64]] = 0x150b7a0200000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 0
                    mem[mem[64] + 68] = tokenByIndex.length + idx
                    mem[mem[64] + 100] = 128
                    mem[mem[64] + 132] = 0
                    s = 0
                    while s < 0:
                        mem[mem[64] + s + 164] = mem[_178 + s + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(msg.sender)
                    call msg.sender.onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) with:
                         gas gas_remaining wei
                        args msg.sender, 0, tokenByIndex.length + idx, 128, 0
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        if not return_data.size:
                            if not mem[96]:
                                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                            revert with memory
                              from 128
                               len mem[96]
                        if not return_data.size:
                            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                        revert with ext_call.return_data[0 len return_data.size]
                    _367 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_367] == Mask(32, 224, mem[_367])
                    if Mask(32, 224, mem[_367]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            else:
                if tokenByIndex.length < 1:
                    revert with 'NH{q', 17
                if tokenByIndex.length - 1 >= tokenByIndex.length:
                    revert with 'NH{q', 50
                if stor9[stor8.length + idx] >= tokenByIndex.length:
                    revert with 'NH{q', 50
                tokenByIndex[stor9[tokenByIndex.length + idx]] = tokenByIndex[tokenByIndex.length]
                stor9[stor8[stor8.length]] = stor9[stor8.length + idx]
                stor9[stor8.length + idx] = 0
                if not tokenByIndex.length:
                    revert with 'NH{q', 49
                tokenByIndex[tokenByIndex.length] = 0
                tokenByIndex.length--
                if balanceOf[address(msg.sender)] > -2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)]++
                mem[0] = tokenByIndex.length + idx
                mem[32] = 2
                ownerOf[stor8.length + idx] = msg.sender
                emit Transfer(0, msg.sender, tokenByIndex.length + idx);
                if ext_code.size(msg.sender) > 0:
                    mem[mem[64]] = 0x150b7a0200000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 0
                    mem[mem[64] + 68] = tokenByIndex.length + idx
                    mem[mem[64] + 100] = 128
                    mem[mem[64] + 132] = 0
                    s = 0
                    while s < 0:
                        mem[mem[64] + s + 164] = mem[_178 + s + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(msg.sender)
                    call msg.sender.onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4) with:
                         gas gas_remaining wei
                        args msg.sender, 0, tokenByIndex.length + idx, 128, 0
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        if not return_data.size:
                            if not mem[96]:
                                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                            revert with memory
                              from 128
                               len mem[96]
                        if not return_data.size:
                            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                        revert with ext_call.return_data[0 len return_data.size]
                    _368 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_368] == Mask(32, 224, mem[_368])
                    if Mask(32, 224, mem[_368]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            if idx == -1:
                revert with 'NH{q', 17
            idx = idx + 1
            continue 
}

function tokenURI(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[0] = arg1
    mem[32] = 2
    if not ownerOf[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721Metadata: URI query for nonexistent token'
    if not uint8(stor16.field_8):
        if bool(stor17.length):
            if bool(stor17.length) == stor17.length.field_1 < 32:
                revert with 'NH{q', 34
            if bool(stor17.length):
                if bool(stor17.length) == stor17.length.field_1 < 32:
                    revert with 'NH{q', 34
                if stor17.length.field_1:
                    if 31 < stor17.length.field_1:
                        mem[128] = uint256(stor17.field_0)
                        idx = 128
                        s = 0
                        while stor17.length.field_1 + 96 > idx:
                            mem[idx + 32] = stor17[s].field_256
                            idx = idx + 32
                            s = s + 1
                            continue 
                        return Array(len=2 * Mask(256, -1, stor17.length.field_1), data=mem[128 len ceil32(stor17.length.field_1)])
                    mem[128] = 256 * stor17.length.field_8
            else:
                if bool(stor17.length) == stor17.length.field_1 < 32:
                    revert with 'NH{q', 34
                if stor17.length.field_1:
                    if 31 < stor17.length.field_1:
                        mem[128] = uint256(stor17.field_0)
                        idx = 128
                        s = 0
                        while stor17.length.field_1 + 96 > idx:
                            mem[idx + 32] = stor17[s].field_256
                            idx = idx + 32
                            s = s + 1
                            continue 
                        return Array(len=2 * Mask(256, -1, stor17.length.field_1), data=mem[128 len ceil32(stor17.length.field_1)])
                    mem[128] = 256 * stor17.length.field_8
            mem[ceil32(stor17.length.field_1) + 192 len ceil32(stor17.length.field_1)] = mem[128 len ceil32(stor17.length.field_1)]
            if ceil32(stor17.length.field_1) > stor17.length.field_1:
                mem[ceil32(stor17.length.field_1) + stor17.length.field_1 + 192] = 0
            return Array(len=2 * Mask(256, -1, stor17.length.field_1), data=mem[128 len ceil32(stor17.length.field_1)], mem[(2 * ceil32(stor17.length.field_1)) + 192 len 2 * ceil32(stor17.length.field_1)]), 
        if bool(stor17.length) == stor17.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor17.length):
            if bool(stor17.length) == stor17.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor17.length.field_1:
                if 31 < stor17.length.field_1:
                    mem[128] = uint256(stor17.field_0)
                    idx = 128
                    s = 0
                    while stor17.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor17[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=stor17.length % 128, data=mem[128 len ceil32(stor17.length.field_1)])
                mem[128] = 256 * stor17.length.field_8
        else:
            if bool(stor17.length) == stor17.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor17.length.field_1:
                if 31 < stor17.length.field_1:
                    mem[128] = uint256(stor17.field_0)
                    idx = 128
                    s = 0
                    while stor17.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor17[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=stor17.length % 128, data=mem[128 len ceil32(stor17.length.field_1)])
                mem[128] = 256 * stor17.length.field_8
        mem[ceil32(stor17.length.field_1) + 192 len ceil32(stor17.length.field_1)] = mem[128 len ceil32(stor17.length.field_1)]
        if ceil32(stor17.length.field_1) > stor17.length.field_1:
            mem[ceil32(stor17.length.field_1) + stor17.length.field_1 + 192] = 0
        return Array(len=stor17.length % 128, data=mem[128 len ceil32(stor17.length.field_1)], mem[(2 * ceil32(stor17.length.field_1)) + 192 len 2 * ceil32(stor17.length.field_1)]), 
    if bool(stor11.length):
        if bool(stor11.length) == stor11.length.field_1 < 32:
            revert with 'NH{q', 34
        mem[96] = stor11.length.field_1
        if not bool(stor11.length):
            if bool(stor11.length) == stor11.length.field_1 < 32:
                revert with 'NH{q', 34
            if not stor11.length.field_1:
                if stor11.length.field_1 <= 0:
                    return ''
                if not arg1:
                    mem[64] = ceil32(stor11.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1) + 128] = 1
                    mem[ceil32(stor11.length.field_1) + 160] = '0'
                    mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                    if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _7309 = mem[ceil32(stor11.length.field_1) + 192]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                if ceil32(_7309) > _7309:
                                    mem[_7309 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_7309) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            s = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                                idx = idx + 32
                                s = s + 1
                                continue 
                            _12546 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            _12970 = mem[_12546]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12546]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12970)] = mem[_12546 + 32 len ceil32(_12970)]
                            if ceil32(_12970) > _12970:
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12970 + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12970) + 32]
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7388 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7388) > _7388:
                                mem[_7388 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7388) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12547 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12971 = mem[_12547]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12547]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12971)] = mem[_12547 + 32 len ceil32(_12971)]
                        if ceil32(_12971) > _12971:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12971 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12971) + 32]
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7313 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7313) > _7313:
                                mem[_7313 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7313) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12550 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12974 = mem[_12550]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12550]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12974)] = mem[_12550 + 32 len ceil32(_12974)]
                        if ceil32(_12974) > _12974:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12974 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12974) + 32]
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7391 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7391) > _7391:
                            mem[_7391 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7391) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12551 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12975 = mem[_12551]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12551]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12975)] = mem[_12551 + 32 len ceil32(_12975)]
                    if ceil32(_12975) > _12975:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12975 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12975) + 32]
                s = 0
                idx = arg1
                while idx:
                    if s == -1:
                        revert with 'NH{q', 17
                    s = s + 1
                    idx = idx / 10
                    continue 
                if s > test266151307():
                    revert with 'NH{q', 65
                mem[ceil32(stor11.length.field_1) + 128] = s
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
                if not s:
                    t = s
                    idx = arg1
                    while idx:
                        if t < 1:
                            revert with 'NH{q', 17
                        if 48 > -(idx % 10) - 1:
                            revert with 'NH{q', 17
                        if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                            revert with 'NH{q', 50
                        mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                        t = t - 1
                        idx = idx / 10
                        continue 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                    if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                            if bool(stor12.length):
                                if bool(stor12.length) == stor12.length.field_1 < 32:
                                    revert with 'NH{q', 34
                                if not bool(stor12.length):
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                    _18800 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18800)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18800)]
                                    if ceil32(_18800) > _18800:
                                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18800 + 256] = 0
                                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18800) + 32], 
                                if bool(stor12.length) != 1:
                                    mem[64] = 0
                                    _18936 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                    if ceil32(_18936) > _18936:
                                        mem[_18936 + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_18936) + -mem[64] + 64
                                mem[0] = 12
                                idx = 0
                                t = 0
                                while idx < stor12.length.field_1:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                    idx = idx + 32
                                    t = t + 1
                                    continue 
                                _22176 = mem[64]
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _23008 = mem[_22176]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22176]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23008)] = mem[_22176 + 32 len ceil32(_23008)]
                                if ceil32(_23008) > _23008:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23008 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23008) + 32], 
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18937 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18937)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18937)]
                                if ceil32(_18937) > _18937:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18937 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18937) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _19097 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_19097) > _19097:
                                    mem[_19097 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_19097) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22177 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23009 = mem[_22177]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22177]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23009)] = mem[_22177 + 32 len ceil32(_23009)]
                            if ceil32(_23009) > _23009:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23009 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23009) + 32], 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18938 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18938)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18938)]
                                if ceil32(_18938) > _18938:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18938 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18938) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _19098 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_19098) > _19098:
                                    mem[_19098 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_19098) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22178 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23010 = mem[_22178]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22178]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23010)] = mem[_22178 + 32 len ceil32(_23010)]
                            if ceil32(_23010) > _23010:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23010 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23010) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _19099 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19099)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19099)]
                            if ceil32(_19099) > _19099:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19099 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19099) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19242 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19242) > _19242:
                                mem[_19242 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19242) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22179 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23011 = mem[_22179]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22179]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23011)] = mem[_22179 + 32 len ceil32(_23011)]
                        if ceil32(_23011) > _23011:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23011 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23011) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18804 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18804)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18804)]
                                if ceil32(_18804) > _18804:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18804 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18804) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18940 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_18940) > _18940:
                                    mem[_18940 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18940) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22180 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23012 = mem[_22180]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22180]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23012)] = mem[_22180 + 32 len ceil32(_23012)]
                            if ceil32(_23012) > _23012:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23012 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23012) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18941 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18941)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18941)]
                            if ceil32(_18941) > _18941:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18941 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18941) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19101 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19101) > _19101:
                                mem[_19101 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19101) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22181 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23013 = mem[_22181]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22181]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23013)] = mem[_22181 + 32 len ceil32(_23013)]
                        if ceil32(_23013) > _23013:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23013 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23013) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18942 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18942)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18942)]
                            if ceil32(_18942) > _18942:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18942 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18942) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19102 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19102) > _19102:
                                mem[_19102 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19102) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22182 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23014 = mem[_22182]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22182]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23014)] = mem[_22182 + 32 len ceil32(_23014)]
                        if ceil32(_23014) > _23014:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23014 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23014) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19103 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19103)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19103)]
                        if ceil32(_19103) > _19103:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19103 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19103) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19245 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19245) > _19245:
                            mem[_19245 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19245) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22183 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23015 = mem[_22183]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22183]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23015)] = mem[_22183 + 32 len ceil32(_23015)]
                    if ceil32(_23015) > _23015:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23015 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23015) + 32], 
                mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18808 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18808)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18808)]
                                if ceil32(_18808) > _18808:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18808 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18808) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18944 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_18944) > _18944:
                                    mem[_18944 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18944) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22184 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23016 = mem[_22184]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22184]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23016)] = mem[_22184 + 32 len ceil32(_23016)]
                            if ceil32(_23016) > _23016:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23016 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23016) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18945 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18945)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18945)]
                            if ceil32(_18945) > _18945:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18945 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18945) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19105 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19105) > _19105:
                                mem[_19105 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19105) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22185 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23017 = mem[_22185]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22185]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23017)] = mem[_22185 + 32 len ceil32(_23017)]
                        if ceil32(_23017) > _23017:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23017 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23017) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18946 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18946)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18946)]
                            if ceil32(_18946) > _18946:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18946 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18946) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19106 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19106) > _19106:
                                mem[_19106 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19106) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22186 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23018 = mem[_22186]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22186]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23018)] = mem[_22186 + 32 len ceil32(_23018)]
                        if ceil32(_23018) > _23018:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23018 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23018) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19107 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19107)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19107)]
                        if ceil32(_19107) > _19107:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19107 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19107) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19248 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19248) > _19248:
                            mem[_19248 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19248) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22187 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23019 = mem[_22187]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22187]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23019)] = mem[_22187 + 32 len ceil32(_23019)]
                    if ceil32(_23019) > _23019:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23019 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23019) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18812 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18812)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18812)]
                            if ceil32(_18812) > _18812:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18812 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18812) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18948 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18948) > _18948:
                                mem[_18948 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18948) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22188 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23020 = mem[_22188]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22188]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23020)] = mem[_22188 + 32 len ceil32(_23020)]
                        if ceil32(_23020) > _23020:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23020 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23020) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18949 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18949)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18949)]
                        if ceil32(_18949) > _18949:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18949 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18949) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19109 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19109) > _19109:
                            mem[_19109 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19109) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22189 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23021 = mem[_22189]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22189]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23021)] = mem[_22189 + 32 len ceil32(_23021)]
                    if ceil32(_23021) > _23021:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23021 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23021) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18950 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18950)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18950)]
                        if ceil32(_18950) > _18950:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18950 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18950) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19110 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19110) > _19110:
                            mem[_19110 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19110) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22190 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23022 = mem[_22190]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22190]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23022)] = mem[_22190 + 32 len ceil32(_23022)]
                    if ceil32(_23022) > _23022:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23022 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23022) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19111 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19111)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19111)]
                    if ceil32(_19111) > _19111:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19111 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19111) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19251 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19251) > _19251:
                        mem[_19251 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19251) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22191 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23023 = mem[_22191]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_22191]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23023)] = mem[_22191 + 32 len ceil32(_23023)]
                if ceil32(_23023) > _23023:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23023 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23023) + 32], 
            if 31 < stor11.length.field_1:
                mem[128] = uint256(stor11.field_0)
                idx = 128
                s = 0
                while stor11.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor11[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                if stor11.length.field_1 <= 0:
                    return ''
                if not arg1:
                    mem[ceil32(stor11.length.field_1) + 128] = 1
                    mem[ceil32(stor11.length.field_1) + 160] = '0'
                    mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                    if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                var89001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                                if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                            if bool(stor12.length) == 1:
                                idx = 0
                                s = 0
                                while idx < stor12.length.field_1:
                                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                            mem[64] = 0
                            _13470 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            var90001 = ceil32(_13470)
                            if ceil32(_13470) > _13470:
                                mem[_13470 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_13470) + -mem[64] + 64
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            var90001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                        else:
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _13548 = mem[ceil32(stor11.length.field_1) + 192]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                if ceil32(_13548) > _13548:
                                    mem[_13548 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_13548) + -mem[64] + 64
                            idx = 0
                            s = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                                idx = idx + 32
                                s = s + 1
                                continue 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    else:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                var90001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                            else:
                                if bool(stor12.length) != 1:
                                    mem[64] = 0
                                    _13474 = mem[ceil32(stor11.length.field_1) + 192]
                                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                    if ceil32(_13474) > _13474:
                                        mem[_13474 + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_13474) + -mem[64] + 64
                                idx = 0
                                s = 0
                                while idx < stor12.length.field_1:
                                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        else:
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _13551 = mem[ceil32(stor11.length.field_1) + 192]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                                if ceil32(_13551) > _13551:
                                    mem[_13551 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_13551) + -mem[64] + 64
                            idx = 0
                            s = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                                idx = idx + 32
                                s = s + 1
                                continue 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                s = 0
                idx = arg1
                while idx:
                    if s == -1:
                        revert with 'NH{q', 17
                    s = s + 1
                    idx = idx / 10
                    continue 
                if s > test266151307():
                    revert with 'NH{q', 65
                mem[ceil32(stor11.length.field_1) + 128] = s
                if not s:
                    t = s
                    idx = arg1
                    while idx:
                        if t < 1:
                            revert with 'NH{q', 17
                        if 48 > -(idx % 10) - 1:
                            revert with 'NH{q', 17
                        if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                            revert with 'NH{q', 50
                        mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                        t = t - 1
                        idx = idx / 10
                        continue 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                    if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                            if bool(stor12.length):
                                if bool(stor12.length) == stor12.length.field_1 < 32:
                                    revert with 'NH{q', 34
                                if not bool(stor12.length):
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                    _23568 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23568)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23568)]
                                    if ceil32(_23568) > _23568:
                                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23568 + 256] = 0
                                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23568) + 32], 
                                if bool(stor12.length) != 1:
                                    mem[64] = 0
                                    _23680 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                    if ceil32(_23680) > _23680:
                                        mem[_23680 + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_23680) + -mem[64] + 64
                                idx = 0
                                t = 0
                                while idx < stor12.length.field_1:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                    idx = idx + 32
                                    t = t + 1
                                    continue 
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _25616 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25616)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25616)]
                                if ceil32(_25616) > _25616:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25616 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25616) + 32], 
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _23681 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23681)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23681)]
                                if ceil32(_23681) > _23681:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23681 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23681) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23873 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_23873) > _23873:
                                    mem[_23873 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23873) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _25617 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25617)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25617)]
                            if ceil32(_25617) > _25617:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25617 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25617) + 32], 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _23682 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23682)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23682)]
                                if ceil32(_23682) > _23682:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23682 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23682) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23874 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_23874) > _23874:
                                    mem[_23874 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23874) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _25618 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25618)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25618)]
                            if ceil32(_25618) > _25618:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25618 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25618) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23875 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23875)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23875)]
                            if ceil32(_23875) > _23875:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23875 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23875) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _24014 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_24014) > _24014:
                                mem[_24014 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_24014) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25619 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25619)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25619)]
                        if ceil32(_25619) > _25619:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25619 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25619) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _23572 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23572)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23572)]
                                if ceil32(_23572) > _23572:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23572 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23572) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23684 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_23684) > _23684:
                                    mem[_23684 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23684) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _25620 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25620)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25620)]
                            if ceil32(_25620) > _25620:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25620 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25620) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23685 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23685)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23685)]
                            if ceil32(_23685) > _23685:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23685 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23685) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23877 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23877) > _23877:
                                mem[_23877 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23877) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25621 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25621)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25621)]
                        if ceil32(_25621) > _25621:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25621 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25621) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23686 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23686)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23686)]
                            if ceil32(_23686) > _23686:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23686 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23686) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23878 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23878) > _23878:
                                mem[_23878 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23878) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25622 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25622)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25622)]
                        if ceil32(_25622) > _25622:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25622 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25622) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23879 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23879)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23879)]
                        if ceil32(_23879) > _23879:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23879 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23879) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _24017 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_24017) > _24017:
                            mem[_24017 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_24017) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25623 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25623)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25623)]
                    if ceil32(_25623) > _25623:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25623 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25623) + 32], 
                mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _23576 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23576)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23576)]
                                if ceil32(_23576) > _23576:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23576 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23576) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23688 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_23688) > _23688:
                                    mem[_23688 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23688) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _25624 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25624)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25624)]
                            if ceil32(_25624) > _25624:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25624 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25624) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23689 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23689)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23689)]
                            if ceil32(_23689) > _23689:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23689 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23689) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23881 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23881) > _23881:
                                mem[_23881 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23881) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25625 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25625)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25625)]
                        if ceil32(_25625) > _25625:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25625 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25625) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23690 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23690)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23690)]
                            if ceil32(_23690) > _23690:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23690 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23690) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23882 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23882) > _23882:
                                mem[_23882 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23882) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25626 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25626)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25626)]
                        if ceil32(_25626) > _25626:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25626 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25626) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23883 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23883)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23883)]
                        if ceil32(_23883) > _23883:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23883 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23883) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _24020 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_24020) > _24020:
                            mem[_24020 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_24020) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25627 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25627)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25627)]
                    if ceil32(_25627) > _25627:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25627 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25627) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23580 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23580)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23580)]
                            if ceil32(_23580) > _23580:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23580 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23580) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23692 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23692) > _23692:
                                mem[_23692 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23692) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25628 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25628)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25628)]
                        if ceil32(_25628) > _25628:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25628 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25628) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23693 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23693)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23693)]
                        if ceil32(_23693) > _23693:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23693 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23693) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23885 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23885) > _23885:
                            mem[_23885 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23885) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25629 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25629)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25629)]
                    if ceil32(_25629) > _25629:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25629 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25629) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23694 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23694)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23694)]
                        if ceil32(_23694) > _23694:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23694 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23694) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23886 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23886) > _23886:
                            mem[_23886 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23886) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25630 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25630)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25630)]
                    if ceil32(_25630) > _25630:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25630 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25630) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23887 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23887)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23887)]
                    if ceil32(_23887) > _23887:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23887 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23887) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _24023 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_24023) > _24023:
                        mem[_24023 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_24023) + -mem[64] + 64
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25631 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25631)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_25631)]
                if ceil32(_25631) > _25631:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25631 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25631) + 32], 
            mem[128] = 256 * stor11.length.field_8
            if stor11.length.field_1 <= 0:
                return ''
            if not arg1:
                mem[64] = ceil32(stor11.length.field_1) + 192
                mem[ceil32(stor11.length.field_1) + 128] = 1
                mem[ceil32(stor11.length.field_1) + 160] = '0'
                mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7320 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7320) > _7320:
                                mem[_7320 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7320) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12554 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12978 = mem[_12554]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12554]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12978)] = mem[_12554 + 32 len ceil32(_12978)]
                        if ceil32(_12978) > _12978:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12978 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12978) + 32]
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7396 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7396) > _7396:
                            mem[_7396 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7396) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12555 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12979 = mem[_12555]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12555]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12979)] = mem[_12555 + 32 len ceil32(_12979)]
                    if ceil32(_12979) > _12979:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12979 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12979) + 32]
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7324 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7324) > _7324:
                            mem[_7324 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7324) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12558 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12982 = mem[_12558]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12558]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12982)] = mem[_12558 + 32 len ceil32(_12982)]
                    if ceil32(_12982) > _12982:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12982 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12982) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7399 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7399) > _7399:
                        mem[_7399 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7399) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12559 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _12983 = mem[_12559]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12559]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12983)] = mem[_12559 + 32 len ceil32(_12983)]
                if ceil32(_12983) > _12983:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12983 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12983) + 32]
            s = 0
            idx = arg1
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1) + 128] = s
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
            if not s:
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    _12602 = mem[ceil32(stor11.length.field_1) + 128]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18816 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18816)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18816)]
                                if ceil32(_18816) > _18816:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18816 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18816) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18960 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_18960) > _18960:
                                    mem[_18960 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18960) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22192 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192] = 32
                            _23024 = mem[_22192]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224] = mem[_22192]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 256 len ceil32(_23024)] = mem[_22192 + 32 len ceil32(_23024)]
                            if ceil32(_23024) > _23024:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + _23024 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224 len ceil32(_23024) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18961 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18961)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18961)]
                            if ceil32(_18961) > _18961:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18961 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18961) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19121 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19121) > _19121:
                                mem[_19121 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19121) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22193 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192] = 32
                        _23025 = mem[_22193]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224] = mem[_22193]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 256 len ceil32(_23025)] = mem[_22193 + 32 len ceil32(_23025)]
                        if ceil32(_23025) > _23025:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + _23025 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224 len ceil32(_23025) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18962 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18962)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18962)]
                            if ceil32(_18962) > _18962:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18962 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18962) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19122 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19122) > _19122:
                                mem[_19122 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19122) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22194 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192] = 32
                        _23026 = mem[_22194]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224] = mem[_22194]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 256 len ceil32(_23026)] = mem[_22194 + 32 len ceil32(_23026)]
                        if ceil32(_23026) > _23026:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + _23026 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224 len ceil32(_23026) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19123 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19123)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19123)]
                        if ceil32(_19123) > _19123:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19123 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19123) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19254 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19254) > _19254:
                            mem[_19254 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19254) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22195 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 192] = 32
                    _23027 = mem[_22195]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224] = mem[_22195]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 256 len ceil32(_23027)] = mem[_22195 + 32 len ceil32(_23027)]
                    if ceil32(_23027) > _23027:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + _23027 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12602 + stor12.length.field_1 + 224 len ceil32(_23027) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                _12694 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18820 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18820)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18820)]
                            if ceil32(_18820) > _18820:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18820 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18820) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18964 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18964) > _18964:
                                mem[_18964 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18964) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22196 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192] = 32
                        _23028 = mem[_22196]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224] = mem[_22196]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 256 len ceil32(_23028)] = mem[_22196 + 32 len ceil32(_23028)]
                        if ceil32(_23028) > _23028:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + _23028 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224 len ceil32(_23028) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18965 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18965)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18965)]
                        if ceil32(_18965) > _18965:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18965 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18965) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19125 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19125) > _19125:
                            mem[_19125 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19125) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22197 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192] = 32
                    _23029 = mem[_22197]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224] = mem[_22197]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 256 len ceil32(_23029)] = mem[_22197 + 32 len ceil32(_23029)]
                    if ceil32(_23029) > _23029:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + _23029 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224 len ceil32(_23029) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18966 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18966)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18966)]
                        if ceil32(_18966) > _18966:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18966 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18966) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19126 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19126) > _19126:
                            mem[_19126 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19126) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22198 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192] = 32
                    _23030 = mem[_22198]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224] = mem[_22198]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 256 len ceil32(_23030)] = mem[_22198 + 32 len ceil32(_23030)]
                    if ceil32(_23030) > _23030:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + _23030 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224 len ceil32(_23030) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19127 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19127)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19127)]
                    if ceil32(_19127) > _19127:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19127 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19127) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19257 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19257) > _19257:
                        mem[_19257 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19257) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22199 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 192] = 32
                _23031 = mem[_22199]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224] = mem[_22199]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 256 len ceil32(_23031)] = mem[_22199 + 32 len ceil32(_23031)]
                if ceil32(_23031) > _23031:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + _23031 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12694 + stor12.length.field_1 + 224 len ceil32(_23031) + 32], 
            mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12603 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18824 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18824)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18824)]
                            if ceil32(_18824) > _18824:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18824 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18824) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18968 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18968) > _18968:
                                mem[_18968 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18968) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22200 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192] = 32
                        _23032 = mem[_22200]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224] = mem[_22200]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 256 len ceil32(_23032)] = mem[_22200 + 32 len ceil32(_23032)]
                        if ceil32(_23032) > _23032:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + _23032 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224 len ceil32(_23032) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18969 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18969)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18969)]
                        if ceil32(_18969) > _18969:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18969 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18969) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19129 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19129) > _19129:
                            mem[_19129 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19129) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22201 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192] = 32
                    _23033 = mem[_22201]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224] = mem[_22201]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 256 len ceil32(_23033)] = mem[_22201 + 32 len ceil32(_23033)]
                    if ceil32(_23033) > _23033:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + _23033 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224 len ceil32(_23033) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18970 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18970)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18970)]
                        if ceil32(_18970) > _18970:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18970 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18970) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19130 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19130) > _19130:
                            mem[_19130 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19130) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22202 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192] = 32
                    _23034 = mem[_22202]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224] = mem[_22202]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 256 len ceil32(_23034)] = mem[_22202 + 32 len ceil32(_23034)]
                    if ceil32(_23034) > _23034:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + _23034 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224 len ceil32(_23034) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19131 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19131)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19131)]
                    if ceil32(_19131) > _19131:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19131 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19131) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19260 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19260) > _19260:
                        mem[_19260 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19260) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22203 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 192] = 32
                _23035 = mem[_22203]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224] = mem[_22203]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 256 len ceil32(_23035)] = mem[_22203 + 32 len ceil32(_23035)]
                if ceil32(_23035) > _23035:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + _23035 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12603 + stor12.length.field_1 + 224 len ceil32(_23035) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12695 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18828 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18828)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18828)]
                        if ceil32(_18828) > _18828:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18828 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18828) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18972 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_18972) > _18972:
                            mem[_18972 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18972) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22204 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192] = 32
                    _23036 = mem[_22204]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224] = mem[_22204]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 256 len ceil32(_23036)] = mem[_22204 + 32 len ceil32(_23036)]
                    if ceil32(_23036) > _23036:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + _23036 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224 len ceil32(_23036) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18973 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18973)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18973)]
                    if ceil32(_18973) > _18973:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18973 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18973) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19133 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19133) > _19133:
                        mem[_19133 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19133) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22205 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192] = 32
                _23037 = mem[_22205]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224] = mem[_22205]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 256 len ceil32(_23037)] = mem[_22205 + 32 len ceil32(_23037)]
                if ceil32(_23037) > _23037:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + _23037 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224 len ceil32(_23037) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18974 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18974)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18974)]
                    if ceil32(_18974) > _18974:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18974 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18974) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19134 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19134) > _19134:
                        mem[_19134 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19134) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22206 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192] = 32
                _23038 = mem[_22206]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224] = mem[_22206]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 256 len ceil32(_23038)] = mem[_22206 + 32 len ceil32(_23038)]
                if ceil32(_23038) > _23038:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + _23038 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224 len ceil32(_23038) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19135 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19135)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19135)]
                if ceil32(_19135) > _19135:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19135 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19135) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19263 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19263) > _19263:
                    mem[_19263 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19263) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22207 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 192] = 32
            _23039 = mem[_22207]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224] = mem[_22207]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 256 len ceil32(_23039)] = mem[_22207 + 32 len ceil32(_23039)]
            if ceil32(_23039) > _23039:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + _23039 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12695 + stor12.length.field_1 + 224 len ceil32(_23039) + 32], 
        if bool(stor11.length) == stor11.length.field_1 < 32:
            revert with 'NH{q', 34
        if not stor11.length.field_1:
            if stor11.length.field_1 <= 0:
                return ''
            if not arg1:
                mem[64] = ceil32(stor11.length.field_1) + 192
                mem[ceil32(stor11.length.field_1) + 128] = 1
                mem[ceil32(stor11.length.field_1) + 160] = '0'
                mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7288 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7288) > _7288:
                                mem[_7288 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7288) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12530 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12954 = mem[_12530]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12530]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12954)] = mem[_12530 + 32 len ceil32(_12954)]
                        if ceil32(_12954) > _12954:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12954 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12954) + 32]
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7372 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7372) > _7372:
                            mem[_7372 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7372) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12531 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12955 = mem[_12531]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12531]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12955)] = mem[_12531 + 32 len ceil32(_12955)]
                    if ceil32(_12955) > _12955:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12955 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12955) + 32]
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7292 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7292) > _7292:
                            mem[_7292 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7292) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12534 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12958 = mem[_12534]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12534]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12958)] = mem[_12534 + 32 len ceil32(_12958)]
                    if ceil32(_12958) > _12958:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12958 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12958) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7375 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7375) > _7375:
                        mem[_7375 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7375) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12535 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _12959 = mem[_12535]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12535]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12959)] = mem[_12535 + 32 len ceil32(_12959)]
                if ceil32(_12959) > _12959:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12959 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12959) + 32]
            s = 0
            idx = arg1
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1) + 128] = s
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
            if not s:
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    _12592 = mem[ceil32(stor11.length.field_1) + 128]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18768 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18768)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18768)]
                                if ceil32(_18768) > _18768:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18768 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18768) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18896 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_18896) > _18896:
                                    mem[_18896 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18896) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22144 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192] = 32
                            _22976 = mem[_22144]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224] = mem[_22144]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 256 len ceil32(_22976)] = mem[_22144 + 32 len ceil32(_22976)]
                            if ceil32(_22976) > _22976:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + _22976 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224 len ceil32(_22976) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18897 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18897)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18897)]
                            if ceil32(_18897) > _18897:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18897 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18897) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19057 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19057) > _19057:
                                mem[_19057 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19057) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22145 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192] = 32
                        _22977 = mem[_22145]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224] = mem[_22145]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 256 len ceil32(_22977)] = mem[_22145 + 32 len ceil32(_22977)]
                        if ceil32(_22977) > _22977:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + _22977 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224 len ceil32(_22977) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18898 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18898)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18898)]
                            if ceil32(_18898) > _18898:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18898 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18898) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19058 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19058) > _19058:
                                mem[_19058 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19058) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22146 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192] = 32
                        _22978 = mem[_22146]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224] = mem[_22146]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 256 len ceil32(_22978)] = mem[_22146 + 32 len ceil32(_22978)]
                        if ceil32(_22978) > _22978:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + _22978 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224 len ceil32(_22978) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19059 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19059)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19059)]
                        if ceil32(_19059) > _19059:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19059 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19059) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19218 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19218) > _19218:
                            mem[_19218 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19218) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22147 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 192] = 32
                    _22979 = mem[_22147]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224] = mem[_22147]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 256 len ceil32(_22979)] = mem[_22147 + 32 len ceil32(_22979)]
                    if ceil32(_22979) > _22979:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + _22979 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12592 + stor12.length.field_1 + 224 len ceil32(_22979) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                _12616 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18772 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18772)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18772)]
                            if ceil32(_18772) > _18772:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18772 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18772) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18900 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18900) > _18900:
                                mem[_18900 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18900) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22148 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192] = 32
                        _22980 = mem[_22148]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224] = mem[_22148]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 256 len ceil32(_22980)] = mem[_22148 + 32 len ceil32(_22980)]
                        if ceil32(_22980) > _22980:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + _22980 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224 len ceil32(_22980) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18901 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18901)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18901)]
                        if ceil32(_18901) > _18901:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18901 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18901) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19061 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19061) > _19061:
                            mem[_19061 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19061) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22149 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192] = 32
                    _22981 = mem[_22149]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224] = mem[_22149]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 256 len ceil32(_22981)] = mem[_22149 + 32 len ceil32(_22981)]
                    if ceil32(_22981) > _22981:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + _22981 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224 len ceil32(_22981) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18902 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18902)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18902)]
                        if ceil32(_18902) > _18902:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18902 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18902) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19062 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19062) > _19062:
                            mem[_19062 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19062) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22150 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192] = 32
                    _22982 = mem[_22150]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224] = mem[_22150]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 256 len ceil32(_22982)] = mem[_22150 + 32 len ceil32(_22982)]
                    if ceil32(_22982) > _22982:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + _22982 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224 len ceil32(_22982) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19063 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19063)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19063)]
                    if ceil32(_19063) > _19063:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19063 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19063) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19221 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19221) > _19221:
                        mem[_19221 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19221) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22151 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 192] = 32
                _22983 = mem[_22151]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224] = mem[_22151]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 256 len ceil32(_22983)] = mem[_22151 + 32 len ceil32(_22983)]
                if ceil32(_22983) > _22983:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + _22983 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12616 + stor12.length.field_1 + 224 len ceil32(_22983) + 32], 
            mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12593 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18776 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18776)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18776)]
                            if ceil32(_18776) > _18776:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18776 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18776) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18904 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18904) > _18904:
                                mem[_18904 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18904) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22152 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192] = 32
                        _22984 = mem[_22152]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224] = mem[_22152]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 256 len ceil32(_22984)] = mem[_22152 + 32 len ceil32(_22984)]
                        if ceil32(_22984) > _22984:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + _22984 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224 len ceil32(_22984) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18905 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18905)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18905)]
                        if ceil32(_18905) > _18905:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18905 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18905) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19065 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19065) > _19065:
                            mem[_19065 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19065) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22153 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192] = 32
                    _22985 = mem[_22153]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224] = mem[_22153]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 256 len ceil32(_22985)] = mem[_22153 + 32 len ceil32(_22985)]
                    if ceil32(_22985) > _22985:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + _22985 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224 len ceil32(_22985) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18906 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18906)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18906)]
                        if ceil32(_18906) > _18906:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18906 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18906) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19066 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19066) > _19066:
                            mem[_19066 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19066) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22154 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192] = 32
                    _22986 = mem[_22154]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224] = mem[_22154]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 256 len ceil32(_22986)] = mem[_22154 + 32 len ceil32(_22986)]
                    if ceil32(_22986) > _22986:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + _22986 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224 len ceil32(_22986) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19067 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19067)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19067)]
                    if ceil32(_19067) > _19067:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19067 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19067) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19224 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19224) > _19224:
                        mem[_19224 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19224) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22155 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 192] = 32
                _22987 = mem[_22155]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224] = mem[_22155]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 256 len ceil32(_22987)] = mem[_22155 + 32 len ceil32(_22987)]
                if ceil32(_22987) > _22987:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + _22987 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12593 + stor12.length.field_1 + 224 len ceil32(_22987) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12617 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18780 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18780)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18780)]
                        if ceil32(_18780) > _18780:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18780 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18780) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18908 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_18908) > _18908:
                            mem[_18908 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18908) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22156 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192] = 32
                    _22988 = mem[_22156]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224] = mem[_22156]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 256 len ceil32(_22988)] = mem[_22156 + 32 len ceil32(_22988)]
                    if ceil32(_22988) > _22988:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + _22988 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224 len ceil32(_22988) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18909 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18909)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18909)]
                    if ceil32(_18909) > _18909:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18909 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18909) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19069 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19069) > _19069:
                        mem[_19069 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19069) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22157 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192] = 32
                _22989 = mem[_22157]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224] = mem[_22157]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 256 len ceil32(_22989)] = mem[_22157 + 32 len ceil32(_22989)]
                if ceil32(_22989) > _22989:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + _22989 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224 len ceil32(_22989) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18910 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18910)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18910)]
                    if ceil32(_18910) > _18910:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18910 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18910) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19070 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19070) > _19070:
                        mem[_19070 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19070) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22158 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192] = 32
                _22990 = mem[_22158]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224] = mem[_22158]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 256 len ceil32(_22990)] = mem[_22158 + 32 len ceil32(_22990)]
                if ceil32(_22990) > _22990:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + _22990 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224 len ceil32(_22990) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19071 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19071)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19071)]
                if ceil32(_19071) > _19071:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19071 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19071) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19227 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19227) > _19227:
                    mem[_19227 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19227) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22159 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 192] = 32
            _22991 = mem[_22159]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224] = mem[_22159]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 256 len ceil32(_22991)] = mem[_22159 + 32 len ceil32(_22991)]
            if ceil32(_22991) > _22991:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + _22991 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12617 + stor12.length.field_1 + 224 len ceil32(_22991) + 32], 
        if 31 >= stor11.length.field_1:
            mem[128] = 256 * stor11.length.field_8
            if stor11.length.field_1 <= 0:
                return ''
            if not arg1:
                mem[64] = ceil32(stor11.length.field_1) + 192
                mem[ceil32(stor11.length.field_1) + 128] = 1
                mem[ceil32(stor11.length.field_1) + 160] = '0'
                mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7299 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7299) > _7299:
                                mem[_7299 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7299) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12538 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12962 = mem[_12538]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12538]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12962)] = mem[_12538 + 32 len ceil32(_12962)]
                        if ceil32(_12962) > _12962:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12962 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12962) + 32]
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7380 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7380) > _7380:
                            mem[_7380 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7380) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12539 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12963 = mem[_12539]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12539]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12963)] = mem[_12539 + 32 len ceil32(_12963)]
                    if ceil32(_12963) > _12963:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12963 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12963) + 32]
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7303 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7303) > _7303:
                            mem[_7303 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7303) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12542 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12966 = mem[_12542]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12542]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12966)] = mem[_12542 + 32 len ceil32(_12966)]
                    if ceil32(_12966) > _12966:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12966 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12966) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7383 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7383) > _7383:
                        mem[_7383 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7383) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12543 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _12967 = mem[_12543]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12543]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12967)] = mem[_12543 + 32 len ceil32(_12967)]
                if ceil32(_12967) > _12967:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12967 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12967) + 32]
            s = 0
            idx = arg1
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1) + 128] = s
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
            if not s:
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    _12596 = mem[ceil32(stor11.length.field_1) + 128]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18784 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18784)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18784)]
                                if ceil32(_18784) > _18784:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18784 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18784) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18920 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_18920) > _18920:
                                    mem[_18920 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18920) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22160 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192] = 32
                            _22992 = mem[_22160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224] = mem[_22160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 256 len ceil32(_22992)] = mem[_22160 + 32 len ceil32(_22992)]
                            if ceil32(_22992) > _22992:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + _22992 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224 len ceil32(_22992) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18921 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18921)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18921)]
                            if ceil32(_18921) > _18921:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18921 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18921) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19081 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19081) > _19081:
                                mem[_19081 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19081) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22161 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192] = 32
                        _22993 = mem[_22161]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224] = mem[_22161]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 256 len ceil32(_22993)] = mem[_22161 + 32 len ceil32(_22993)]
                        if ceil32(_22993) > _22993:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + _22993 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224 len ceil32(_22993) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18922 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18922)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18922)]
                            if ceil32(_18922) > _18922:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18922 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18922) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19082 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19082) > _19082:
                                mem[_19082 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19082) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22162 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192] = 32
                        _22994 = mem[_22162]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224] = mem[_22162]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 256 len ceil32(_22994)] = mem[_22162 + 32 len ceil32(_22994)]
                        if ceil32(_22994) > _22994:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + _22994 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224 len ceil32(_22994) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19083 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19083)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19083)]
                        if ceil32(_19083) > _19083:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19083 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19083) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19230 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19230) > _19230:
                            mem[_19230 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19230) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22163 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 192] = 32
                    _22995 = mem[_22163]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224] = mem[_22163]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 256 len ceil32(_22995)] = mem[_22163 + 32 len ceil32(_22995)]
                    if ceil32(_22995) > _22995:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + _22995 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12596 + stor12.length.field_1 + 224 len ceil32(_22995) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                _12642 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18788 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18788)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18788)]
                            if ceil32(_18788) > _18788:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18788 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18788) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18924 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18924) > _18924:
                                mem[_18924 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18924) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22164 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192] = 32
                        _22996 = mem[_22164]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224] = mem[_22164]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 256 len ceil32(_22996)] = mem[_22164 + 32 len ceil32(_22996)]
                        if ceil32(_22996) > _22996:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + _22996 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224 len ceil32(_22996) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18925 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18925)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18925)]
                        if ceil32(_18925) > _18925:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18925 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18925) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19085 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19085) > _19085:
                            mem[_19085 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19085) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22165 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192] = 32
                    _22997 = mem[_22165]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224] = mem[_22165]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 256 len ceil32(_22997)] = mem[_22165 + 32 len ceil32(_22997)]
                    if ceil32(_22997) > _22997:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + _22997 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224 len ceil32(_22997) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18926 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18926)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18926)]
                        if ceil32(_18926) > _18926:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18926 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18926) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19086 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19086) > _19086:
                            mem[_19086 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19086) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22166 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192] = 32
                    _22998 = mem[_22166]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224] = mem[_22166]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 256 len ceil32(_22998)] = mem[_22166 + 32 len ceil32(_22998)]
                    if ceil32(_22998) > _22998:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + _22998 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224 len ceil32(_22998) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19087 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19087)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19087)]
                    if ceil32(_19087) > _19087:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19087 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19087) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19233 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19233) > _19233:
                        mem[_19233 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19233) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22167 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 192] = 32
                _22999 = mem[_22167]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224] = mem[_22167]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 256 len ceil32(_22999)] = mem[_22167 + 32 len ceil32(_22999)]
                if ceil32(_22999) > _22999:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + _22999 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12642 + stor12.length.field_1 + 224 len ceil32(_22999) + 32], 
            mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12597 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18792 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18792)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18792)]
                            if ceil32(_18792) > _18792:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18792 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18792) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18928 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18928) > _18928:
                                mem[_18928 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18928) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22168 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192] = 32
                        _23000 = mem[_22168]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224] = mem[_22168]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 256 len ceil32(_23000)] = mem[_22168 + 32 len ceil32(_23000)]
                        if ceil32(_23000) > _23000:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + _23000 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224 len ceil32(_23000) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18929 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18929)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18929)]
                        if ceil32(_18929) > _18929:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18929 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18929) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19089 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19089) > _19089:
                            mem[_19089 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19089) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22169 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192] = 32
                    _23001 = mem[_22169]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224] = mem[_22169]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 256 len ceil32(_23001)] = mem[_22169 + 32 len ceil32(_23001)]
                    if ceil32(_23001) > _23001:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + _23001 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224 len ceil32(_23001) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18930 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18930)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18930)]
                        if ceil32(_18930) > _18930:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18930 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18930) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19090 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19090) > _19090:
                            mem[_19090 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19090) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22170 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192] = 32
                    _23002 = mem[_22170]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224] = mem[_22170]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 256 len ceil32(_23002)] = mem[_22170 + 32 len ceil32(_23002)]
                    if ceil32(_23002) > _23002:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + _23002 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224 len ceil32(_23002) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19091 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19091)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19091)]
                    if ceil32(_19091) > _19091:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19091 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19091) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19236 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19236) > _19236:
                        mem[_19236 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19236) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22171 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 192] = 32
                _23003 = mem[_22171]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224] = mem[_22171]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 256 len ceil32(_23003)] = mem[_22171 + 32 len ceil32(_23003)]
                if ceil32(_23003) > _23003:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + _23003 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12597 + stor12.length.field_1 + 224 len ceil32(_23003) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12643 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18796 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18796)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18796)]
                        if ceil32(_18796) > _18796:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18796 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18796) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18932 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_18932) > _18932:
                            mem[_18932 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18932) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22172 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192] = 32
                    _23004 = mem[_22172]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224] = mem[_22172]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 256 len ceil32(_23004)] = mem[_22172 + 32 len ceil32(_23004)]
                    if ceil32(_23004) > _23004:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + _23004 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224 len ceil32(_23004) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18933 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18933)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18933)]
                    if ceil32(_18933) > _18933:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18933 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18933) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19093 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19093) > _19093:
                        mem[_19093 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19093) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22173 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192] = 32
                _23005 = mem[_22173]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224] = mem[_22173]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 256 len ceil32(_23005)] = mem[_22173 + 32 len ceil32(_23005)]
                if ceil32(_23005) > _23005:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + _23005 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224 len ceil32(_23005) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18934 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18934)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18934)]
                    if ceil32(_18934) > _18934:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18934 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18934) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19094 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19094) > _19094:
                        mem[_19094 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19094) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22174 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192] = 32
                _23006 = mem[_22174]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224] = mem[_22174]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 256 len ceil32(_23006)] = mem[_22174 + 32 len ceil32(_23006)]
                if ceil32(_23006) > _23006:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + _23006 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224 len ceil32(_23006) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19095 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19095)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19095)]
                if ceil32(_19095) > _19095:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19095 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19095) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19239 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19239) > _19239:
                    mem[_19239 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19239) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22175 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 192] = 32
            _23007 = mem[_22175]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224] = mem[_22175]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 256 len ceil32(_23007)] = mem[_22175 + 32 len ceil32(_23007)]
            if ceil32(_23007) > _23007:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + _23007 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12643 + stor12.length.field_1 + 224 len ceil32(_23007) + 32], 
        mem[0] = 11
        mem[128] = uint256(stor11.field_0)
        idx = 128
        s = 0
        while stor11.length.field_1 + 96 > idx:
            mem[idx + 32] = stor11[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if stor11.length.field_1 <= 0:
            return ''
        if not arg1:
            mem[ceil32(stor11.length.field_1) + 128] = 1
            mem[ceil32(stor11.length.field_1) + 160] = '0'
            mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        var88001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    if bool(stor12.length) == 1:
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                    mem[64] = 0
                    _13444 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    var89001 = ceil32(_13444)
                    if ceil32(_13444) > _13444:
                        mem[_13444 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13444) + -mem[64] + 64
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    var89001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                else:
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _13540 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_13540) > _13540:
                            mem[_13540 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13540) + -mem[64] + 64
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
            else:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        var89001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                    else:
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _13448 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_13448) > _13448:
                                mem[_13448 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_13448) + -mem[64] + 64
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                else:
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _13543 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_13543) > _13543:
                            mem[_13543 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13543) + -mem[64] + 64
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) <= mem[ceil32(stor11.length.field_1) + 192]:
                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(mem[ceil32(stor11.length.field_1) + 192]) + 32], 
        s = 0
        idx = arg1
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1) + 128] = s
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
        if not s:
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23552 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23552)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23552)]
                            if ceil32(_23552) > _23552:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23552 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23552) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23632 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23632) > _23632:
                                mem[_23632 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23632) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _24960 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _25600 = mem[_24960]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24960]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25600)] = mem[_24960 + 32 len ceil32(_25600)]
                        if ceil32(_25600) > _25600:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25600 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25600) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23633 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23633)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23633)]
                        if ceil32(_23633) > _23633:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23633 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23633) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23825 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23825) > _23825:
                            mem[_23825 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23825) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24961 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25601 = mem[_24961]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24961]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25601)] = mem[_24961 + 32 len ceil32(_25601)]
                    if ceil32(_25601) > _25601:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25601 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25601) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23634 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23634)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23634)]
                        if ceil32(_23634) > _23634:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23634 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23634) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23826 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23826) > _23826:
                            mem[_23826 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23826) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24962 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25602 = mem[_24962]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24962]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25602)] = mem[_24962 + 32 len ceil32(_25602)]
                    if ceil32(_25602) > _25602:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25602 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25602) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23827 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23827)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23827)]
                    if ceil32(_23827) > _23827:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23827 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23827) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _24002 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_24002) > _24002:
                        mem[_24002 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_24002) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24963 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25603 = mem[_24963]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24963]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25603)] = mem[_24963 + 32 len ceil32(_25603)]
                if ceil32(_25603) > _25603:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25603 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25603) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23556 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23556)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23556)]
                        if ceil32(_23556) > _23556:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23556 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23556) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23636 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23636) > _23636:
                            mem[_23636 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23636) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24964 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25604 = mem[_24964]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24964]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25604)] = mem[_24964 + 32 len ceil32(_25604)]
                    if ceil32(_25604) > _25604:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25604 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25604) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23637 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23637)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23637)]
                    if ceil32(_23637) > _23637:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23637 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23637) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23829 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23829) > _23829:
                        mem[_23829 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23829) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24965 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25605 = mem[_24965]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24965]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25605)] = mem[_24965 + 32 len ceil32(_25605)]
                if ceil32(_25605) > _25605:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25605 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25605) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23638 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23638)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23638)]
                    if ceil32(_23638) > _23638:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23638 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23638) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23830 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23830) > _23830:
                        mem[_23830 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23830) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24966 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25606 = mem[_24966]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24966]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25606)] = mem[_24966 + 32 len ceil32(_25606)]
                if ceil32(_25606) > _25606:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25606 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25606) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23831 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23831)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23831)]
                if ceil32(_23831) > _23831:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23831 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23831) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _24005 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_24005) > _24005:
                    mem[_24005 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_24005) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24967 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _25607 = mem[_24967]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24967]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25607)] = mem[_24967 + 32 len ceil32(_25607)]
            if ceil32(_25607) > _25607:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25607 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25607) + 32], 
        mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = arg1
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
        if ceil32(stor11.length.field_1) <= stor11.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23560 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23560)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23560)]
                        if ceil32(_23560) > _23560:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23560 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23560) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23640 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23640) > _23640:
                            mem[_23640 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23640) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24968 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _25608 = mem[_24968]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24968]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25608)] = mem[_24968 + 32 len ceil32(_25608)]
                    if ceil32(_25608) > _25608:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25608 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25608) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23641 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23641)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23641)]
                    if ceil32(_23641) > _23641:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23641 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23641) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23833 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23833) > _23833:
                        mem[_23833 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23833) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24969 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25609 = mem[_24969]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24969]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25609)] = mem[_24969 + 32 len ceil32(_25609)]
                if ceil32(_25609) > _25609:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25609 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25609) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23642 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23642)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23642)]
                    if ceil32(_23642) > _23642:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23642 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23642) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23834 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23834) > _23834:
                        mem[_23834 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23834) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24970 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25610 = mem[_24970]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24970]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25610)] = mem[_24970 + 32 len ceil32(_25610)]
                if ceil32(_25610) > _25610:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25610 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25610) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23835 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23835)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23835)]
                if ceil32(_23835) > _23835:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23835 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23835) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _24008 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_24008) > _24008:
                    mem[_24008 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_24008) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24971 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _25611 = mem[_24971]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24971]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25611)] = mem[_24971 + 32 len ceil32(_25611)]
            if ceil32(_25611) > _25611:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25611 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25611) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23564 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23564)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23564)]
                    if ceil32(_23564) > _23564:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23564 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23564) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23644 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23644) > _23644:
                        mem[_23644 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23644) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24972 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _25612 = mem[_24972]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24972]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25612)] = mem[_24972 + 32 len ceil32(_25612)]
                if ceil32(_25612) > _25612:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25612 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25612) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23645 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23645)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23645)]
                if ceil32(_23645) > _23645:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23645 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23645) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23837 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23837) > _23837:
                    mem[_23837 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23837) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24973 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _25613 = mem[_24973]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24973]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25613)] = mem[_24973 + 32 len ceil32(_25613)]
            if ceil32(_25613) > _25613:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25613 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25613) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23646 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23646)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23646)]
                if ceil32(_23646) > _23646:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23646 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23646) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23838 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23838) > _23838:
                    mem[_23838 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23838) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24974 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _25614 = mem[_24974]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24974]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25614)] = mem[_24974 + 32 len ceil32(_25614)]
            if ceil32(_25614) > _25614:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25614 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25614) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _23839 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23839)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23839)]
            if ceil32(_23839) > _23839:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23839 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23839) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _24011 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_24011) > _24011:
                mem[_24011 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_24011) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24975 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
        _25615 = mem[_24975]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[_24975]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_25615)] = mem[_24975 + 32 len ceil32(_25615)]
        if ceil32(_25615) > _25615:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _25615 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_25615) + 32], 
    if bool(stor11.length) == stor11.length.field_1 < 32:
        revert with 'NH{q', 34
    mem[96] = stor11.length.field_1
    if bool(stor11.length):
        if bool(stor11.length) == stor11.length.field_1 < 32:
            revert with 'NH{q', 34
        if not stor11.length.field_1:
            if stor11.length.field_1 <= 0:
                return ''
            if not arg1:
                mem[64] = ceil32(stor11.length.field_1) + 192
                mem[ceil32(stor11.length.field_1) + 128] = 1
                mem[ceil32(stor11.length.field_1) + 160] = '0'
                mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7330 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7330) > _7330:
                                mem[_7330 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7330) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12562 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12986 = mem[_12562]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12562]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12986)] = mem[_12562 + 32 len ceil32(_12986)]
                        if ceil32(_12986) > _12986:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12986 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12986) + 32]
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7404 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7404) > _7404:
                            mem[_7404 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7404) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12563 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12987 = mem[_12563]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12563]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12987)] = mem[_12563 + 32 len ceil32(_12987)]
                    if ceil32(_12987) > _12987:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12987 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12987) + 32]
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7334 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7334) > _7334:
                            mem[_7334 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7334) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12566 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12990 = mem[_12566]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12566]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12990)] = mem[_12566 + 32 len ceil32(_12990)]
                    if ceil32(_12990) > _12990:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12990 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12990) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7407 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7407) > _7407:
                        mem[_7407 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7407) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12567 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _12991 = mem[_12567]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12567]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12991)] = mem[_12567 + 32 len ceil32(_12991)]
                if ceil32(_12991) > _12991:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12991 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12991) + 32]
            s = 0
            idx = arg1
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1) + 128] = s
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
            if not s:
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    _12604 = mem[ceil32(stor11.length.field_1) + 128]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18832 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18832)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18832)]
                                if ceil32(_18832) > _18832:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18832 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18832) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18976 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_18976) > _18976:
                                    mem[_18976 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18976) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22208 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192] = 32
                            _23040 = mem[_22208]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224] = mem[_22208]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 256 len ceil32(_23040)] = mem[_22208 + 32 len ceil32(_23040)]
                            if ceil32(_23040) > _23040:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + _23040 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224 len ceil32(_23040) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18977 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18977)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18977)]
                            if ceil32(_18977) > _18977:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18977 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18977) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19137 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19137) > _19137:
                                mem[_19137 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19137) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22209 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192] = 32
                        _23041 = mem[_22209]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224] = mem[_22209]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 256 len ceil32(_23041)] = mem[_22209 + 32 len ceil32(_23041)]
                        if ceil32(_23041) > _23041:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + _23041 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224 len ceil32(_23041) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18978 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18978)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18978)]
                            if ceil32(_18978) > _18978:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18978 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18978) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19138 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19138) > _19138:
                                mem[_19138 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19138) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22210 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192] = 32
                        _23042 = mem[_22210]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224] = mem[_22210]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 256 len ceil32(_23042)] = mem[_22210 + 32 len ceil32(_23042)]
                        if ceil32(_23042) > _23042:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + _23042 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224 len ceil32(_23042) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19139 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19139)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19139)]
                        if ceil32(_19139) > _19139:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19139 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19139) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19266 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19266) > _19266:
                            mem[_19266 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19266) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22211 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 192] = 32
                    _23043 = mem[_22211]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224] = mem[_22211]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 256 len ceil32(_23043)] = mem[_22211 + 32 len ceil32(_23043)]
                    if ceil32(_23043) > _23043:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + _23043 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12604 + stor12.length.field_1 + 224 len ceil32(_23043) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                _12720 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18836 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18836)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18836)]
                            if ceil32(_18836) > _18836:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18836 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18836) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18980 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18980) > _18980:
                                mem[_18980 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18980) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22212 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192] = 32
                        _23044 = mem[_22212]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224] = mem[_22212]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 256 len ceil32(_23044)] = mem[_22212 + 32 len ceil32(_23044)]
                        if ceil32(_23044) > _23044:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + _23044 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224 len ceil32(_23044) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18981 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18981)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18981)]
                        if ceil32(_18981) > _18981:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18981 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18981) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19141 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19141) > _19141:
                            mem[_19141 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19141) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22213 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192] = 32
                    _23045 = mem[_22213]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224] = mem[_22213]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 256 len ceil32(_23045)] = mem[_22213 + 32 len ceil32(_23045)]
                    if ceil32(_23045) > _23045:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + _23045 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224 len ceil32(_23045) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18982 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18982)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18982)]
                        if ceil32(_18982) > _18982:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18982 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18982) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19142 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19142) > _19142:
                            mem[_19142 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19142) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22214 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192] = 32
                    _23046 = mem[_22214]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224] = mem[_22214]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 256 len ceil32(_23046)] = mem[_22214 + 32 len ceil32(_23046)]
                    if ceil32(_23046) > _23046:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + _23046 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224 len ceil32(_23046) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19143 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19143)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19143)]
                    if ceil32(_19143) > _19143:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19143 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19143) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19269 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19269) > _19269:
                        mem[_19269 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19269) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22215 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 192] = 32
                _23047 = mem[_22215]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224] = mem[_22215]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 256 len ceil32(_23047)] = mem[_22215 + 32 len ceil32(_23047)]
                if ceil32(_23047) > _23047:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + _23047 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12720 + stor12.length.field_1 + 224 len ceil32(_23047) + 32], 
            mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12605 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18840 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18840)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18840)]
                            if ceil32(_18840) > _18840:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18840 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18840) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18984 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_18984) > _18984:
                                mem[_18984 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18984) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22216 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192] = 32
                        _23048 = mem[_22216]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224] = mem[_22216]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 256 len ceil32(_23048)] = mem[_22216 + 32 len ceil32(_23048)]
                        if ceil32(_23048) > _23048:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + _23048 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224 len ceil32(_23048) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18985 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18985)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18985)]
                        if ceil32(_18985) > _18985:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18985 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18985) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19145 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19145) > _19145:
                            mem[_19145 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19145) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22217 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192] = 32
                    _23049 = mem[_22217]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224] = mem[_22217]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 256 len ceil32(_23049)] = mem[_22217 + 32 len ceil32(_23049)]
                    if ceil32(_23049) > _23049:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + _23049 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224 len ceil32(_23049) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18986 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18986)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18986)]
                        if ceil32(_18986) > _18986:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18986 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18986) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19146 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19146) > _19146:
                            mem[_19146 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19146) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22218 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192] = 32
                    _23050 = mem[_22218]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224] = mem[_22218]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 256 len ceil32(_23050)] = mem[_22218 + 32 len ceil32(_23050)]
                    if ceil32(_23050) > _23050:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + _23050 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224 len ceil32(_23050) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19147 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19147)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19147)]
                    if ceil32(_19147) > _19147:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19147 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19147) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19272 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19272) > _19272:
                        mem[_19272 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19272) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22219 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 192] = 32
                _23051 = mem[_22219]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224] = mem[_22219]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 256 len ceil32(_23051)] = mem[_22219 + 32 len ceil32(_23051)]
                if ceil32(_23051) > _23051:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + _23051 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12605 + stor12.length.field_1 + 224 len ceil32(_23051) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12721 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18844 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18844)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18844)]
                        if ceil32(_18844) > _18844:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18844 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18844) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18988 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_18988) > _18988:
                            mem[_18988 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18988) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22220 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192] = 32
                    _23052 = mem[_22220]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224] = mem[_22220]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 256 len ceil32(_23052)] = mem[_22220 + 32 len ceil32(_23052)]
                    if ceil32(_23052) > _23052:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + _23052 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224 len ceil32(_23052) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18989 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18989)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18989)]
                    if ceil32(_18989) > _18989:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18989 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18989) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19149 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19149) > _19149:
                        mem[_19149 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19149) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22221 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192] = 32
                _23053 = mem[_22221]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224] = mem[_22221]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 256 len ceil32(_23053)] = mem[_22221 + 32 len ceil32(_23053)]
                if ceil32(_23053) > _23053:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + _23053 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224 len ceil32(_23053) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18990 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18990)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18990)]
                    if ceil32(_18990) > _18990:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18990 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18990) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19150 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19150) > _19150:
                        mem[_19150 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19150) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22222 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192] = 32
                _23054 = mem[_22222]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224] = mem[_22222]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 256 len ceil32(_23054)] = mem[_22222 + 32 len ceil32(_23054)]
                if ceil32(_23054) > _23054:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + _23054 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224 len ceil32(_23054) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19151 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19151)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19151)]
                if ceil32(_19151) > _19151:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19151 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19151) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19275 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19275) > _19275:
                    mem[_19275 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19275) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22223 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 192] = 32
            _23055 = mem[_22223]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224] = mem[_22223]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 256 len ceil32(_23055)] = mem[_22223 + 32 len ceil32(_23055)]
            if ceil32(_23055) > _23055:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + _23055 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12721 + stor12.length.field_1 + 224 len ceil32(_23055) + 32], 
        if 31 >= stor11.length.field_1:
            mem[128] = 256 * stor11.length.field_8
            if stor11.length.field_1 <= 0:
                return ''
            if not arg1:
                mem[64] = ceil32(stor11.length.field_1) + 192
                mem[ceil32(stor11.length.field_1) + 128] = 1
                mem[ceil32(stor11.length.field_1) + 160] = '0'
                mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7341 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_7341) > _7341:
                                mem[_7341 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7341) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12570 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        _12994 = mem[_12570]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12570]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12994)] = mem[_12570 + 32 len ceil32(_12994)]
                        if ceil32(_12994) > _12994:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12994 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12994) + 32]
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7412 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7412) > _7412:
                            mem[_7412 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7412) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12571 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12995 = mem[_12571]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12571]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12995)] = mem[_12571 + 32 len ceil32(_12995)]
                    if ceil32(_12995) > _12995:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12995 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12995) + 32]
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7345 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7345) > _7345:
                            mem[_7345 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7345) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12574 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _12998 = mem[_12574]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12574]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12998)] = mem[_12574 + 32 len ceil32(_12998)]
                    if ceil32(_12998) > _12998:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12998 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12998) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7415 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7415) > _7415:
                        mem[_7415 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7415) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12575 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _12999 = mem[_12575]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12575]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_12999)] = mem[_12575 + 32 len ceil32(_12999)]
                if ceil32(_12999) > _12999:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _12999 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_12999) + 32]
            s = 0
            idx = arg1
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1) + 128] = s
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
            if not s:
                t = s
                idx = arg1
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
                if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                    _12608 = mem[ceil32(stor11.length.field_1) + 128]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == stor12.length.field_1 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                                _18848 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18848)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18848)]
                                if ceil32(_18848) > _18848:
                                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18848 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18848) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _19000 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                                if ceil32(_19000) > _19000:
                                    mem[_19000 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_19000) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22224 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192] = 32
                            _23056 = mem[_22224]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224] = mem[_22224]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 256 len ceil32(_23056)] = mem[_22224 + 32 len ceil32(_23056)]
                            if ceil32(_23056) > _23056:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + _23056 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224 len ceil32(_23056) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _19001 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19001)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19001)]
                            if ceil32(_19001) > _19001:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19001 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19001) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19161 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19161) > _19161:
                                mem[_19161 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19161) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22225 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192] = 32
                        _23057 = mem[_22225]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224] = mem[_22225]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 256 len ceil32(_23057)] = mem[_22225 + 32 len ceil32(_23057)]
                        if ceil32(_23057) > _23057:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + _23057 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224 len ceil32(_23057) + 32], 
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _19002 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19002)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19002)]
                            if ceil32(_19002) > _19002:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19002 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19002) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19162 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19162) > _19162:
                                mem[_19162 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19162) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22226 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192] = 32
                        _23058 = mem[_22226]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224] = mem[_22226]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 256 len ceil32(_23058)] = mem[_22226 + 32 len ceil32(_23058)]
                        if ceil32(_23058) > _23058:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + _23058 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224 len ceil32(_23058) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19163 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19163)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19163)]
                        if ceil32(_19163) > _19163:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19163 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19163) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19278 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19278) > _19278:
                            mem[_19278 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19278) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22227 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 192] = 32
                    _23059 = mem[_22227]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224] = mem[_22227]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 256 len ceil32(_23059)] = mem[_22227 + 32 len ceil32(_23059)]
                    if ceil32(_23059) > _23059:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + _23059 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12608 + stor12.length.field_1 + 224 len ceil32(_23059) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
                _12746 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18852 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18852)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18852)]
                            if ceil32(_18852) > _18852:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18852 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18852) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19004 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19004) > _19004:
                                mem[_19004 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19004) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22228 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192] = 32
                        _23060 = mem[_22228]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224] = mem[_22228]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 256 len ceil32(_23060)] = mem[_22228 + 32 len ceil32(_23060)]
                        if ceil32(_23060) > _23060:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + _23060 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224 len ceil32(_23060) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19005 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19005)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19005)]
                        if ceil32(_19005) > _19005:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19005 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19005) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19165 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19165) > _19165:
                            mem[_19165 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19165) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22229 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192] = 32
                    _23061 = mem[_22229]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224] = mem[_22229]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 256 len ceil32(_23061)] = mem[_22229 + 32 len ceil32(_23061)]
                    if ceil32(_23061) > _23061:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + _23061 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224 len ceil32(_23061) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19006 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19006)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19006)]
                        if ceil32(_19006) > _19006:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19006 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19006) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19166 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19166) > _19166:
                            mem[_19166 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19166) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22230 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192] = 32
                    _23062 = mem[_22230]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224] = mem[_22230]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 256 len ceil32(_23062)] = mem[_22230 + 32 len ceil32(_23062)]
                    if ceil32(_23062) > _23062:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + _23062 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224 len ceil32(_23062) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19167 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19167)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19167)]
                    if ceil32(_19167) > _19167:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19167 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19167) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19281 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19281) > _19281:
                        mem[_19281 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19281) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22231 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 192] = 32
                _23063 = mem[_22231]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224] = mem[_22231]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 256 len ceil32(_23063)] = mem[_22231 + 32 len ceil32(_23063)]
                if ceil32(_23063) > _23063:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + _23063 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12746 + stor12.length.field_1 + 224 len ceil32(_23063) + 32], 
            mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12609 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18856 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18856)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18856)]
                            if ceil32(_18856) > _18856:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18856 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18856) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19008 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19008) > _19008:
                                mem[_19008 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19008) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22232 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192] = 32
                        _23064 = mem[_22232]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224] = mem[_22232]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 256 len ceil32(_23064)] = mem[_22232 + 32 len ceil32(_23064)]
                        if ceil32(_23064) > _23064:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + _23064 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224 len ceil32(_23064) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19009 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19009)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19009)]
                        if ceil32(_19009) > _19009:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19009 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19009) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19169 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19169) > _19169:
                            mem[_19169 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19169) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22233 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192] = 32
                    _23065 = mem[_22233]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224] = mem[_22233]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 256 len ceil32(_23065)] = mem[_22233 + 32 len ceil32(_23065)]
                    if ceil32(_23065) > _23065:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + _23065 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224 len ceil32(_23065) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19010 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19010)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19010)]
                        if ceil32(_19010) > _19010:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19010 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19010) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19170 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19170) > _19170:
                            mem[_19170 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19170) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22234 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192] = 32
                    _23066 = mem[_22234]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224] = mem[_22234]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 256 len ceil32(_23066)] = mem[_22234 + 32 len ceil32(_23066)]
                    if ceil32(_23066) > _23066:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + _23066 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224 len ceil32(_23066) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19171 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19171)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19171)]
                    if ceil32(_19171) > _19171:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19171 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19171) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19284 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19284) > _19284:
                        mem[_19284 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19284) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22235 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 192] = 32
                _23067 = mem[_22235]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224] = mem[_22235]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 256 len ceil32(_23067)] = mem[_22235 + 32 len ceil32(_23067)]
                if ceil32(_23067) > _23067:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + _23067 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12609 + stor12.length.field_1 + 224 len ceil32(_23067) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12747 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18860 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18860)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18860)]
                        if ceil32(_18860) > _18860:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18860 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18860) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19012 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19012) > _19012:
                            mem[_19012 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19012) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22236 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192] = 32
                    _23068 = mem[_22236]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224] = mem[_22236]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 256 len ceil32(_23068)] = mem[_22236 + 32 len ceil32(_23068)]
                    if ceil32(_23068) > _23068:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + _23068 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224 len ceil32(_23068) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19013 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19013)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19013)]
                    if ceil32(_19013) > _19013:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19013 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19013) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19173 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19173) > _19173:
                        mem[_19173 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19173) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22237 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192] = 32
                _23069 = mem[_22237]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224] = mem[_22237]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 256 len ceil32(_23069)] = mem[_22237 + 32 len ceil32(_23069)]
                if ceil32(_23069) > _23069:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + _23069 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224 len ceil32(_23069) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19014 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19014)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19014)]
                    if ceil32(_19014) > _19014:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19014 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19014) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19174 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19174) > _19174:
                        mem[_19174 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19174) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22238 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192] = 32
                _23070 = mem[_22238]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224] = mem[_22238]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 256 len ceil32(_23070)] = mem[_22238 + 32 len ceil32(_23070)]
                if ceil32(_23070) > _23070:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + _23070 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224 len ceil32(_23070) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19175 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19175)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19175)]
                if ceil32(_19175) > _19175:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19175 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19175) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19287 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19287) > _19287:
                    mem[_19287 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19287) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22239 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 192] = 32
            _23071 = mem[_22239]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224] = mem[_22239]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 256 len ceil32(_23071)] = mem[_22239 + 32 len ceil32(_23071)]
            if ceil32(_23071) > _23071:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + _23071 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12747 + stor12.length.field_1 + 224 len ceil32(_23071) + 32], 
        mem[0] = 11
        mem[128] = uint256(stor11.field_0)
        idx = 128
        s = 0
        while stor11.length.field_1 + 96 > idx:
            mem[idx + 32] = stor11[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if stor11.length.field_1 <= 0:
            return ''
        if not arg1:
            mem[ceil32(stor11.length.field_1) + 128] = 1
            mem[ceil32(stor11.length.field_1) + 160] = '0'
            mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        var89001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) == 1:
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    mem[64] = 0
                    _13496 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    var90001 = ceil32(_13496)
                    if ceil32(_13496) > _13496:
                        mem[_13496 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13496) + -mem[64] + 64
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    var90001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                else:
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _13556 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_13556) > _13556:
                            mem[_13556 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13556) + -mem[64] + 64
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
            else:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        var90001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                    else:
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _13500 = mem[ceil32(stor11.length.field_1) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                            if ceil32(_13500) > _13500:
                                mem[_13500 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_13500) + -mem[64] + 64
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                else:
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _13559 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_13559) > _13559:
                            mem[_13559 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13559) + -mem[64] + 64
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
            return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
        s = 0
        idx = arg1
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1) + 128] = s
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
        if not s:
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _17748 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _23584 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23584)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23584)]
                            if ceil32(_23584) > _23584:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23584 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23584) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23728 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_23728) > _23728:
                                mem[_23728 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23728) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _24992 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192] = 32
                        _25632 = mem[_24992]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224] = mem[_24992]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 256 len ceil32(_25632)] = mem[_24992 + 32 len ceil32(_25632)]
                        if ceil32(_25632) > _25632:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + _25632 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224 len ceil32(_25632) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23729 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23729)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23729)]
                        if ceil32(_23729) > _23729:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23729 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23729) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23921 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23921) > _23921:
                            mem[_23921 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23921) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24993 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192] = 32
                    _25633 = mem[_24993]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224] = mem[_24993]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 256 len ceil32(_25633)] = mem[_24993 + 32 len ceil32(_25633)]
                    if ceil32(_25633) > _25633:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + _25633 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224 len ceil32(_25633) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23730 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23730)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23730)]
                        if ceil32(_23730) > _23730:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23730 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23730) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23922 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23922) > _23922:
                            mem[_23922 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23922) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24994 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192] = 32
                    _25634 = mem[_24994]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224] = mem[_24994]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 256 len ceil32(_25634)] = mem[_24994 + 32 len ceil32(_25634)]
                    if ceil32(_25634) > _25634:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + _25634 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224 len ceil32(_25634) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23923 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23923)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23923)]
                    if ceil32(_23923) > _23923:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23923 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23923) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _24026 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_24026) > _24026:
                        mem[_24026 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_24026) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24995 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 192] = 32
                _25635 = mem[_24995]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224] = mem[_24995]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 256 len ceil32(_25635)] = mem[_24995 + 32 len ceil32(_25635)]
                if ceil32(_25635) > _25635:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + _25635 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17748 + stor12.length.field_1 + 224 len ceil32(_25635) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _17844 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23588 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23588)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23588)]
                        if ceil32(_23588) > _23588:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23588 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23588) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23732 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23732) > _23732:
                            mem[_23732 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23732) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24996 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192] = 32
                    _25636 = mem[_24996]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224] = mem[_24996]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 256 len ceil32(_25636)] = mem[_24996 + 32 len ceil32(_25636)]
                    if ceil32(_25636) > _25636:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + _25636 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224 len ceil32(_25636) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23733 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23733)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23733)]
                    if ceil32(_23733) > _23733:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23733 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23733) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23925 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23925) > _23925:
                        mem[_23925 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23925) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24997 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192] = 32
                _25637 = mem[_24997]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224] = mem[_24997]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 256 len ceil32(_25637)] = mem[_24997 + 32 len ceil32(_25637)]
                if ceil32(_25637) > _25637:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + _25637 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224 len ceil32(_25637) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23734 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23734)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23734)]
                    if ceil32(_23734) > _23734:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23734 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23734) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23926 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23926) > _23926:
                        mem[_23926 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23926) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24998 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192] = 32
                _25638 = mem[_24998]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224] = mem[_24998]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 256 len ceil32(_25638)] = mem[_24998 + 32 len ceil32(_25638)]
                if ceil32(_25638) > _25638:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + _25638 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224 len ceil32(_25638) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23927 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23927)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23927)]
                if ceil32(_23927) > _23927:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23927 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23927) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _24029 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_24029) > _24029:
                    mem[_24029 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_24029) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24999 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 192] = 32
            _25639 = mem[_24999]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224] = mem[_24999]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 256 len ceil32(_25639)] = mem[_24999 + 32 len ceil32(_25639)]
            if ceil32(_25639) > _25639:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + _25639 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17844 + stor12.length.field_1 + 224 len ceil32(_25639) + 32], 
        mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = arg1
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
        if ceil32(stor11.length.field_1) <= stor11.length.field_1:
            _17749 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23592 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23592)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23592)]
                        if ceil32(_23592) > _23592:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23592 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23592) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23736 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23736) > _23736:
                            mem[_23736 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23736) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _25000 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192] = 32
                    _25640 = mem[_25000]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224] = mem[_25000]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 256 len ceil32(_25640)] = mem[_25000 + 32 len ceil32(_25640)]
                    if ceil32(_25640) > _25640:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + _25640 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224 len ceil32(_25640) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23737 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23737)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23737)]
                    if ceil32(_23737) > _23737:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23737 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23737) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23929 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23929) > _23929:
                        mem[_23929 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23929) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25001 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192] = 32
                _25641 = mem[_25001]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224] = mem[_25001]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 256 len ceil32(_25641)] = mem[_25001 + 32 len ceil32(_25641)]
                if ceil32(_25641) > _25641:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + _25641 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224 len ceil32(_25641) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23738 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23738)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23738)]
                    if ceil32(_23738) > _23738:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23738 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23738) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23930 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23930) > _23930:
                        mem[_23930 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23930) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25002 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192] = 32
                _25642 = mem[_25002]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224] = mem[_25002]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 256 len ceil32(_25642)] = mem[_25002 + 32 len ceil32(_25642)]
                if ceil32(_25642) > _25642:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + _25642 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224 len ceil32(_25642) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23931 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23931)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23931)]
                if ceil32(_23931) > _23931:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23931 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23931) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _24032 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_24032) > _24032:
                    mem[_24032 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_24032) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25003 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 192] = 32
            _25643 = mem[_25003]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224] = mem[_25003]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 256 len ceil32(_25643)] = mem[_25003 + 32 len ceil32(_25643)]
            if ceil32(_25643) > _25643:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + _25643 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17749 + stor12.length.field_1 + 224 len ceil32(_25643) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
        _17845 = mem[ceil32(stor11.length.field_1) + 128]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23596 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23596)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23596)]
                    if ceil32(_23596) > _23596:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23596 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23596) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23740 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23740) > _23740:
                        mem[_23740 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23740) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25004 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192] = 32
                _25644 = mem[_25004]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224] = mem[_25004]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 256 len ceil32(_25644)] = mem[_25004 + 32 len ceil32(_25644)]
                if ceil32(_25644) > _25644:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + _25644 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224 len ceil32(_25644) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23741 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23741)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23741)]
                if ceil32(_23741) > _23741:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23741 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23741) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23933 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23933) > _23933:
                    mem[_23933 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23933) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25005 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192] = 32
            _25645 = mem[_25005]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224] = mem[_25005]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 256 len ceil32(_25645)] = mem[_25005 + 32 len ceil32(_25645)]
            if ceil32(_25645) > _25645:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + _25645 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224 len ceil32(_25645) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23742 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23742)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23742)]
                if ceil32(_23742) > _23742:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23742 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23742) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23934 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23934) > _23934:
                    mem[_23934 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23934) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25006 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192] = 32
            _25646 = mem[_25006]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224] = mem[_25006]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 256 len ceil32(_25646)] = mem[_25006 + 32 len ceil32(_25646)]
            if ceil32(_25646) > _25646:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + _25646 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224 len ceil32(_25646) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _23935 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23935)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23935)]
            if ceil32(_23935) > _23935:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23935 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23935) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _24035 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_24035) > _24035:
                mem[_24035 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_24035) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _25007 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 192] = 32
        _25647 = mem[_25007]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224] = mem[_25007]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 256 len ceil32(_25647)] = mem[_25007 + 32 len ceil32(_25647)]
        if ceil32(_25647) > _25647:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + _25647 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17845 + stor12.length.field_1 + 224 len ceil32(_25647) + 32], 
    if bool(stor11.length) == stor11.length.field_1 < 32:
        revert with 'NH{q', 34
    if not stor11.length.field_1:
        if stor11.length.field_1 <= 0:
            return ''
        if not arg1:
            mem[64] = ceil32(stor11.length.field_1) + 192
            mem[ceil32(stor11.length.field_1) + 128] = 1
            mem[ceil32(stor11.length.field_1) + 160] = '0'
            mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7351 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7351) > _7351:
                            mem[_7351 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7351) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12578 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _13002 = mem[_12578]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12578]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13002)] = mem[_12578 + 32 len ceil32(_13002)]
                    if ceil32(_13002) > _13002:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13002 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13002) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7420 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7420) > _7420:
                        mem[_7420 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7420) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12579 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _13003 = mem[_12579]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12579]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13003)] = mem[_12579 + 32 len ceil32(_13003)]
                if ceil32(_13003) > _13003:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13003 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13003) + 32]
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7355 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7355) > _7355:
                        mem[_7355 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7355) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12582 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _13006 = mem[_12582]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12582]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13006)] = mem[_12582 + 32 len ceil32(_13006)]
                if ceil32(_13006) > _13006:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13006 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13006) + 32]
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _7423 = mem[ceil32(stor11.length.field_1) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                if ceil32(_7423) > _7423:
                    mem[_7423 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_7423) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            s = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                idx = idx + 32
                s = s + 1
                continue 
            _12583 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
            _13007 = mem[_12583]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12583]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13007)] = mem[_12583 + 32 len ceil32(_13007)]
            if ceil32(_13007) > _13007:
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13007 + 289] = 0
            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13007) + 32]
        s = 0
        idx = arg1
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1) + 128] = s
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
        if not s:
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12610 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18864 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18864)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18864)]
                            if ceil32(_18864) > _18864:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18864 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18864) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19016 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19016) > _19016:
                                mem[_19016 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19016) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22240 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192] = 32
                        _23072 = mem[_22240]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224] = mem[_22240]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 256 len ceil32(_23072)] = mem[_22240 + 32 len ceil32(_23072)]
                        if ceil32(_23072) > _23072:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + _23072 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224 len ceil32(_23072) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19017 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19017)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19017)]
                        if ceil32(_19017) > _19017:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19017 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19017) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19177 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19177) > _19177:
                            mem[_19177 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19177) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22241 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192] = 32
                    _23073 = mem[_22241]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224] = mem[_22241]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 256 len ceil32(_23073)] = mem[_22241 + 32 len ceil32(_23073)]
                    if ceil32(_23073) > _23073:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + _23073 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224 len ceil32(_23073) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19018 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19018)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19018)]
                        if ceil32(_19018) > _19018:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19018 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19018) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19178 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19178) > _19178:
                            mem[_19178 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19178) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22242 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192] = 32
                    _23074 = mem[_22242]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224] = mem[_22242]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 256 len ceil32(_23074)] = mem[_22242 + 32 len ceil32(_23074)]
                    if ceil32(_23074) > _23074:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + _23074 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224 len ceil32(_23074) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19179 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19179)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19179)]
                    if ceil32(_19179) > _19179:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19179 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19179) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19290 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19290) > _19290:
                        mem[_19290 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19290) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22243 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 192] = 32
                _23075 = mem[_22243]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224] = mem[_22243]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 256 len ceil32(_23075)] = mem[_22243 + 32 len ceil32(_23075)]
                if ceil32(_23075) > _23075:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + _23075 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12610 + stor12.length.field_1 + 224 len ceil32(_23075) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12772 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18868 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18868)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18868)]
                        if ceil32(_18868) > _18868:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18868 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18868) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19020 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19020) > _19020:
                            mem[_19020 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19020) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22244 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192] = 32
                    _23076 = mem[_22244]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224] = mem[_22244]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 256 len ceil32(_23076)] = mem[_22244 + 32 len ceil32(_23076)]
                    if ceil32(_23076) > _23076:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + _23076 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224 len ceil32(_23076) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19021 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19021)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19021)]
                    if ceil32(_19021) > _19021:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19021 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19021) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19181 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19181) > _19181:
                        mem[_19181 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19181) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22245 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192] = 32
                _23077 = mem[_22245]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224] = mem[_22245]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 256 len ceil32(_23077)] = mem[_22245 + 32 len ceil32(_23077)]
                if ceil32(_23077) > _23077:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + _23077 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224 len ceil32(_23077) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19022 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19022)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19022)]
                    if ceil32(_19022) > _19022:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19022 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19022) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19182 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19182) > _19182:
                        mem[_19182 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19182) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22246 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192] = 32
                _23078 = mem[_22246]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224] = mem[_22246]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 256 len ceil32(_23078)] = mem[_22246 + 32 len ceil32(_23078)]
                if ceil32(_23078) > _23078:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + _23078 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224 len ceil32(_23078) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19183 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19183)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19183)]
                if ceil32(_19183) > _19183:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19183 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19183) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19293 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19293) > _19293:
                    mem[_19293 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19293) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22247 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 192] = 32
            _23079 = mem[_22247]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224] = mem[_22247]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 256 len ceil32(_23079)] = mem[_22247 + 32 len ceil32(_23079)]
            if ceil32(_23079) > _23079:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + _23079 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12772 + stor12.length.field_1 + 224 len ceil32(_23079) + 32], 
        mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = arg1
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
        if ceil32(stor11.length.field_1) <= stor11.length.field_1:
            _12611 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18872 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18872)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18872)]
                        if ceil32(_18872) > _18872:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18872 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18872) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19024 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19024) > _19024:
                            mem[_19024 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19024) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22248 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192] = 32
                    _23080 = mem[_22248]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224] = mem[_22248]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 256 len ceil32(_23080)] = mem[_22248 + 32 len ceil32(_23080)]
                    if ceil32(_23080) > _23080:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + _23080 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224 len ceil32(_23080) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19025 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19025)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19025)]
                    if ceil32(_19025) > _19025:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19025 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19025) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19185 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19185) > _19185:
                        mem[_19185 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19185) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22249 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192] = 32
                _23081 = mem[_22249]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224] = mem[_22249]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 256 len ceil32(_23081)] = mem[_22249 + 32 len ceil32(_23081)]
                if ceil32(_23081) > _23081:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + _23081 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224 len ceil32(_23081) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19026 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19026)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19026)]
                    if ceil32(_19026) > _19026:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19026 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19026) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19186 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19186) > _19186:
                        mem[_19186 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19186) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22250 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192] = 32
                _23082 = mem[_22250]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224] = mem[_22250]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 256 len ceil32(_23082)] = mem[_22250 + 32 len ceil32(_23082)]
                if ceil32(_23082) > _23082:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + _23082 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224 len ceil32(_23082) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19187 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19187)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19187)]
                if ceil32(_19187) > _19187:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19187 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19187) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19296 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19296) > _19296:
                    mem[_19296 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19296) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22251 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 192] = 32
            _23083 = mem[_22251]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224] = mem[_22251]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 256 len ceil32(_23083)] = mem[_22251 + 32 len ceil32(_23083)]
            if ceil32(_23083) > _23083:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + _23083 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12611 + stor12.length.field_1 + 224 len ceil32(_23083) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
        _12773 = mem[ceil32(stor11.length.field_1) + 128]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18876 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18876)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18876)]
                    if ceil32(_18876) > _18876:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18876 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18876) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19028 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19028) > _19028:
                        mem[_19028 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19028) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22252 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192] = 32
                _23084 = mem[_22252]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224] = mem[_22252]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 256 len ceil32(_23084)] = mem[_22252 + 32 len ceil32(_23084)]
                if ceil32(_23084) > _23084:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + _23084 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224 len ceil32(_23084) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19029 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19029)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19029)]
                if ceil32(_19029) > _19029:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19029 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19029) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19189 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19189) > _19189:
                    mem[_19189 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19189) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22253 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192] = 32
            _23085 = mem[_22253]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224] = mem[_22253]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 256 len ceil32(_23085)] = mem[_22253 + 32 len ceil32(_23085)]
            if ceil32(_23085) > _23085:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + _23085 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224 len ceil32(_23085) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19030 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19030)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19030)]
                if ceil32(_19030) > _19030:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19030 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19030) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19190 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19190) > _19190:
                    mem[_19190 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19190) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22254 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192] = 32
            _23086 = mem[_22254]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224] = mem[_22254]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 256 len ceil32(_23086)] = mem[_22254 + 32 len ceil32(_23086)]
            if ceil32(_23086) > _23086:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + _23086 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224 len ceil32(_23086) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _19191 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19191)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19191)]
            if ceil32(_19191) > _19191:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19191 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19191) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _19299 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_19299) > _19299:
                mem[_19299 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_19299) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _22255 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 192] = 32
        _23087 = mem[_22255]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224] = mem[_22255]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 256 len ceil32(_23087)] = mem[_22255 + 32 len ceil32(_23087)]
        if ceil32(_23087) > _23087:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + _23087 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12773 + stor12.length.field_1 + 224 len ceil32(_23087) + 32], 
    if 31 >= stor11.length.field_1:
        mem[128] = 256 * stor11.length.field_8
        if stor11.length.field_1 <= 0:
            return ''
        if not arg1:
            mem[64] = ceil32(stor11.length.field_1) + 192
            mem[ceil32(stor11.length.field_1) + 128] = 1
            mem[ceil32(stor11.length.field_1) + 160] = '0'
            mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7362 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_7362) > _7362:
                            mem[_7362 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7362) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12586 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    _13010 = mem[_12586]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12586]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13010)] = mem[_12586 + 32 len ceil32(_13010)]
                    if ceil32(_13010) > _13010:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13010 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13010) + 32]
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7428 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7428) > _7428:
                        mem[_7428 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7428) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12587 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _13011 = mem[_12587]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12587]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13011)] = mem[_12587 + 32 len ceil32(_13011)]
                if ceil32(_13011) > _13011:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13011 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13011) + 32]
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7366 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_7366) > _7366:
                        mem[_7366 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7366) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12590 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                _13014 = mem[_12590]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12590]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13014)] = mem[_12590 + 32 len ceil32(_13014)]
                if ceil32(_13014) > _13014:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13014 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13014) + 32]
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _7431 = mem[ceil32(stor11.length.field_1) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                if ceil32(_7431) > _7431:
                    mem[_7431 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_7431) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            s = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 224] = stor12[s].field_0
                idx = idx + 32
                s = s + 1
                continue 
            _12591 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
            _13015 = mem[_12591]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[_12591]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(_13015)] = mem[_12591 + 32 len ceil32(_13015)]
            if ceil32(_13015) > _13015:
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + _13015 + 289] = 0
            return 32, mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257 len ceil32(_13015) + 32]
        s = 0
        idx = arg1
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1) + 128] = s
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
        if not s:
            t = s
            idx = arg1
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
            if ceil32(stor11.length.field_1) <= stor11.length.field_1:
                _12614 = mem[ceil32(stor11.length.field_1) + 128]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == stor12.length.field_1 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                            _18880 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18880)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18880)]
                            if ceil32(_18880) > _18880:
                                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18880 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18880) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19040 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                            if ceil32(_19040) > _19040:
                                mem[_19040 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19040) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22256 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192] = 32
                        _23088 = mem[_22256]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224] = mem[_22256]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 256 len ceil32(_23088)] = mem[_22256 + 32 len ceil32(_23088)]
                        if ceil32(_23088) > _23088:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + _23088 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224 len ceil32(_23088) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19041 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19041)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19041)]
                        if ceil32(_19041) > _19041:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19041 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19041) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19201 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19201) > _19201:
                            mem[_19201 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19201) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22257 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192] = 32
                    _23089 = mem[_22257]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224] = mem[_22257]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 256 len ceil32(_23089)] = mem[_22257 + 32 len ceil32(_23089)]
                    if ceil32(_23089) > _23089:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + _23089 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224 len ceil32(_23089) + 32], 
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _19042 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19042)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19042)]
                        if ceil32(_19042) > _19042:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19042 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19042) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19202 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19202) > _19202:
                            mem[_19202 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19202) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22258 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192] = 32
                    _23090 = mem[_22258]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224] = mem[_22258]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 256 len ceil32(_23090)] = mem[_22258 + 32 len ceil32(_23090)]
                    if ceil32(_23090) > _23090:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + _23090 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224 len ceil32(_23090) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19203 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19203)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19203)]
                    if ceil32(_19203) > _19203:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19203 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19203) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19302 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19302) > _19302:
                        mem[_19302 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19302) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22259 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 192] = 32
                _23091 = mem[_22259]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224] = mem[_22259]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 256 len ceil32(_23091)] = mem[_22259 + 32 len ceil32(_23091)]
                if ceil32(_23091) > _23091:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + _23091 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12614 + stor12.length.field_1 + 224 len ceil32(_23091) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
            _12798 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18884 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18884)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18884)]
                        if ceil32(_18884) > _18884:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18884 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18884) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19044 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19044) > _19044:
                            mem[_19044 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19044) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22260 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192] = 32
                    _23092 = mem[_22260]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224] = mem[_22260]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 256 len ceil32(_23092)] = mem[_22260 + 32 len ceil32(_23092)]
                    if ceil32(_23092) > _23092:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + _23092 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224 len ceil32(_23092) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19045 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19045)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19045)]
                    if ceil32(_19045) > _19045:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19045 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19045) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19205 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19205) > _19205:
                        mem[_19205 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19205) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22261 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192] = 32
                _23093 = mem[_22261]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224] = mem[_22261]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 256 len ceil32(_23093)] = mem[_22261 + 32 len ceil32(_23093)]
                if ceil32(_23093) > _23093:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + _23093 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224 len ceil32(_23093) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19046 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19046)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19046)]
                    if ceil32(_19046) > _19046:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19046 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19046) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19206 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19206) > _19206:
                        mem[_19206 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19206) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22262 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192] = 32
                _23094 = mem[_22262]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224] = mem[_22262]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 256 len ceil32(_23094)] = mem[_22262 + 32 len ceil32(_23094)]
                if ceil32(_23094) > _23094:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + _23094 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224 len ceil32(_23094) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19207 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19207)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19207)]
                if ceil32(_19207) > _19207:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19207 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19207) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19305 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19305) > _19305:
                    mem[_19305 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19305) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22263 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 192] = 32
            _23095 = mem[_22263]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224] = mem[_22263]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 256 len ceil32(_23095)] = mem[_22263 + 32 len ceil32(_23095)]
            if ceil32(_23095) > _23095:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + _23095 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12798 + stor12.length.field_1 + 224 len ceil32(_23095) + 32], 
        mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = arg1
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
        if ceil32(stor11.length.field_1) <= stor11.length.field_1:
            _12615 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _18888 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18888)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18888)]
                        if ceil32(_18888) > _18888:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18888 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18888) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19048 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_19048) > _19048:
                            mem[_19048 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19048) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22264 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192] = 32
                    _23096 = mem[_22264]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224] = mem[_22264]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 256 len ceil32(_23096)] = mem[_22264 + 32 len ceil32(_23096)]
                    if ceil32(_23096) > _23096:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + _23096 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224 len ceil32(_23096) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19049 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19049)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19049)]
                    if ceil32(_19049) > _19049:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19049 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19049) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19209 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19209) > _19209:
                        mem[_19209 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19209) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22265 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192] = 32
                _23097 = mem[_22265]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224] = mem[_22265]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 256 len ceil32(_23097)] = mem[_22265 + 32 len ceil32(_23097)]
                if ceil32(_23097) > _23097:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + _23097 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224 len ceil32(_23097) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _19050 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19050)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19050)]
                    if ceil32(_19050) > _19050:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19050 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19050) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19210 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19210) > _19210:
                        mem[_19210 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19210) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22266 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192] = 32
                _23098 = mem[_22266]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224] = mem[_22266]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 256 len ceil32(_23098)] = mem[_22266 + 32 len ceil32(_23098)]
                if ceil32(_23098) > _23098:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + _23098 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224 len ceil32(_23098) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19211 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19211)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19211)]
                if ceil32(_19211) > _19211:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19211 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19211) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19308 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19308) > _19308:
                    mem[_19308 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19308) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22267 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 192] = 32
            _23099 = mem[_22267]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224] = mem[_22267]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 256 len ceil32(_23099)] = mem[_22267 + 32 len ceil32(_23099)]
            if ceil32(_23099) > _23099:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + _23099 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12615 + stor12.length.field_1 + 224 len ceil32(_23099) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
        _12799 = mem[ceil32(stor11.length.field_1) + 128]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _18892 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_18892)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_18892)]
                    if ceil32(_18892) > _18892:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _18892 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_18892) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19052 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_19052) > _19052:
                        mem[_19052 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19052) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22268 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192] = 32
                _23100 = mem[_22268]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224] = mem[_22268]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 256 len ceil32(_23100)] = mem[_22268 + 32 len ceil32(_23100)]
                if ceil32(_23100) > _23100:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + _23100 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224 len ceil32(_23100) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19053 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19053)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19053)]
                if ceil32(_19053) > _19053:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19053 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19053) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19213 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19213) > _19213:
                    mem[_19213 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19213) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22269 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192] = 32
            _23101 = mem[_22269]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224] = mem[_22269]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 256 len ceil32(_23101)] = mem[_22269 + 32 len ceil32(_23101)]
            if ceil32(_23101) > _23101:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + _23101 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224 len ceil32(_23101) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _19054 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19054)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19054)]
                if ceil32(_19054) > _19054:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19054 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19054) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19214 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_19214) > _19214:
                    mem[_19214 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19214) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22270 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192] = 32
            _23102 = mem[_22270]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224] = mem[_22270]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 256 len ceil32(_23102)] = mem[_22270 + 32 len ceil32(_23102)]
            if ceil32(_23102) > _23102:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + _23102 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224 len ceil32(_23102) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _19215 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_19215)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_19215)]
            if ceil32(_19215) > _19215:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _19215 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_19215) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _19311 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_19311) > _19311:
                mem[_19311 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_19311) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _22271 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 192] = 32
        _23103 = mem[_22271]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224] = mem[_22271]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 256 len ceil32(_23103)] = mem[_22271 + 32 len ceil32(_23103)]
        if ceil32(_23103) > _23103:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + _23103 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _12799 + stor12.length.field_1 + 224 len ceil32(_23103) + 32], 
    mem[0] = 11
    mem[128] = uint256(stor11.field_0)
    idx = 128
    s = 0
    while stor11.length.field_1 + 96 > idx:
        mem[idx + 32] = stor11[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    if stor11.length.field_1 <= 0:
        return ''
    if not arg1:
        mem[ceil32(stor11.length.field_1) + 128] = 1
        mem[ceil32(stor11.length.field_1) + 160] = '0'
        mem[ceil32(stor11.length.field_1) + 224 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 224] = '0'
        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = 0
        if ceil32(stor11.length.field_1) <= stor11.length.field_1:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    var90001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                if bool(stor12.length) == 1:
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                    return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
                mem[64] = 0
                _13522 = mem[ceil32(stor11.length.field_1) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                var91001 = ceil32(_13522)
                if ceil32(_13522) > _13522:
                    mem[_13522 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13522) + -mem[64] + 64
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                var91001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
            else:
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _13564 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_13564) > _13564:
                        mem[_13564 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13564) + -mem[64] + 64
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
        else:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    var91001 = ceil32(mem[ceil32(stor11.length.field_1) + 192])
                else:
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _13526 = mem[ceil32(stor11.length.field_1) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                        if ceil32(_13526) > _13526:
                            mem[_13526 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13526) + -mem[64] + 64
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
                return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + 225] = Mask(248, 8, stor12.length)
            else:
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _13567 = mem[ceil32(stor11.length.field_1) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
                    if ceil32(_13567) > _13567:
                        mem[_13567 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13567) + -mem[64] + 64
                idx = 0
                s = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + idx + 225] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 225] = 32
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 257] = mem[ceil32(stor11.length.field_1) + 192]
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])] = mem[ceil32(stor11.length.field_1) + 224 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 192]) > mem[ceil32(stor11.length.field_1) + 192]:
            mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + mem[ceil32(stor11.length.field_1) + 192] + 289] = 0
        return Array(len=mem[ceil32(stor11.length.field_1) + 192], data=mem[ceil32(stor11.length.field_1) + stor11.length.field_1 + stor12.length.field_1 + 289 len ceil32(mem[ceil32(stor11.length.field_1) + 192])]), 
    s = 0
    idx = arg1
    while idx:
        if s == -1:
            revert with 'NH{q', 17
        s = s + 1
        idx = idx / 10
        continue 
    if s > test266151307():
        revert with 'NH{q', 65
    mem[ceil32(stor11.length.field_1) + 128] = s
    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + 160
    if not s:
        t = s
        idx = arg1
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
        if ceil32(stor11.length.field_1) <= stor11.length.field_1:
            _17750 = mem[ceil32(stor11.length.field_1) + 128]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == stor12.length.field_1 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                        _23600 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23600)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23600)]
                        if ceil32(_23600) > _23600:
                            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23600 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23600) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23776 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                        if ceil32(_23776) > _23776:
                            mem[_23776 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23776) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _25008 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192] = 32
                    _25648 = mem[_25008]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224] = mem[_25008]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 256 len ceil32(_25648)] = mem[_25008 + 32 len ceil32(_25648)]
                    if ceil32(_25648) > _25648:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + _25648 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224 len ceil32(_25648) + 32], 
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23777 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23777)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23777)]
                    if ceil32(_23777) > _23777:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23777 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23777) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23969 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23969) > _23969:
                        mem[_23969 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23969) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25009 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192] = 32
                _25649 = mem[_25009]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224] = mem[_25009]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 256 len ceil32(_25649)] = mem[_25009 + 32 len ceil32(_25649)]
                if ceil32(_25649) > _25649:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + _25649 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224 len ceil32(_25649) + 32], 
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23778 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23778)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23778)]
                    if ceil32(_23778) > _23778:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23778 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23778) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23970 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23970) > _23970:
                        mem[_23970 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23970) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25010 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192] = 32
                _25650 = mem[_25010]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224] = mem[_25010]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 256 len ceil32(_25650)] = mem[_25010 + 32 len ceil32(_25650)]
                if ceil32(_25650) > _25650:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + _25650 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224 len ceil32(_25650) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23971 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23971)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23971)]
                if ceil32(_23971) > _23971:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23971 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23971) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _24038 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_24038) > _24038:
                    mem[_24038 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_24038) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25011 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 192] = 32
            _25651 = mem[_25011]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224] = mem[_25011]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 256 len ceil32(_25651)] = mem[_25011 + 32 len ceil32(_25651)]
            if ceil32(_25651) > _25651:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + _25651 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17750 + stor12.length.field_1 + 224 len ceil32(_25651) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
        _17886 = mem[ceil32(stor11.length.field_1) + 128]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23604 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23604)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23604)]
                    if ceil32(_23604) > _23604:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23604 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23604) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23780 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23780) > _23780:
                        mem[_23780 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23780) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25012 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192] = 32
                _25652 = mem[_25012]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224] = mem[_25012]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 256 len ceil32(_25652)] = mem[_25012 + 32 len ceil32(_25652)]
                if ceil32(_25652) > _25652:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + _25652 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224 len ceil32(_25652) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23781 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23781)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23781)]
                if ceil32(_23781) > _23781:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23781 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23781) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23973 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23973) > _23973:
                    mem[_23973 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23973) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25013 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192] = 32
            _25653 = mem[_25013]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224] = mem[_25013]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 256 len ceil32(_25653)] = mem[_25013 + 32 len ceil32(_25653)]
            if ceil32(_25653) > _25653:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + _25653 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224 len ceil32(_25653) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23782 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23782)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23782)]
                if ceil32(_23782) > _23782:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23782 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23782) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23974 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23974) > _23974:
                    mem[_23974 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23974) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25014 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192] = 32
            _25654 = mem[_25014]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224] = mem[_25014]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 256 len ceil32(_25654)] = mem[_25014 + 32 len ceil32(_25654)]
            if ceil32(_25654) > _25654:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + _25654 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224 len ceil32(_25654) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _23975 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23975)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23975)]
            if ceil32(_23975) > _23975:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23975 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23975) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _24041 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_24041) > _24041:
                mem[_24041 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_24041) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _25015 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 192] = 32
        _25655 = mem[_25015]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224] = mem[_25015]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 256 len ceil32(_25655)] = mem[_25015 + 32 len ceil32(_25655)]
        if ceil32(_25655) > _25655:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + _25655 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17886 + stor12.length.field_1 + 224 len ceil32(_25655) + 32], 
    mem[ceil32(stor11.length.field_1) + 160 len s] = call.data[calldata.size len s]
    t = s
    idx = arg1
    while idx:
        if t < 1:
            revert with 'NH{q', 17
        if 48 > -(idx % 10) - 1:
            revert with 'NH{q', 17
        if t - 1 >= mem[ceil32(stor11.length.field_1) + 128]:
            revert with 'NH{q', 50
        mem[t + ceil32(stor11.length.field_1) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
        t = t - 1
        idx = idx / 10
        continue 
    mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
    if ceil32(stor11.length.field_1) <= stor11.length.field_1:
        _17751 = mem[ceil32(stor11.length.field_1) + 128]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == stor12.length.field_1 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                    _23608 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23608)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23608)]
                    if ceil32(_23608) > _23608:
                        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23608 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23608) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23784 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                    if ceil32(_23784) > _23784:
                        mem[_23784 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23784) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _25016 = mem[64]
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192] = 32
                _25656 = mem[_25016]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224] = mem[_25016]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 256 len ceil32(_25656)] = mem[_25016 + 32 len ceil32(_25656)]
                if ceil32(_25656) > _25656:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + _25656 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224 len ceil32(_25656) + 32], 
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23785 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23785)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23785)]
                if ceil32(_23785) > _23785:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23785 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23785) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23977 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23977) > _23977:
                    mem[_23977 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23977) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25017 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192] = 32
            _25657 = mem[_25017]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224] = mem[_25017]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 256 len ceil32(_25657)] = mem[_25017 + 32 len ceil32(_25657)]
            if ceil32(_25657) > _25657:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + _25657 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224 len ceil32(_25657) + 32], 
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23786 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23786)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23786)]
                if ceil32(_23786) > _23786:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23786 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23786) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23978 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23978) > _23978:
                    mem[_23978 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23978) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25018 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192] = 32
            _25658 = mem[_25018]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224] = mem[_25018]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 256 len ceil32(_25658)] = mem[_25018 + 32 len ceil32(_25658)]
            if ceil32(_25658) > _25658:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + _25658 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224 len ceil32(_25658) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _23979 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23979)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23979)]
            if ceil32(_23979) > _23979:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23979 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23979) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _24044 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_24044) > _24044:
                mem[_24044 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_24044) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _25019 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 192] = 32
        _25659 = mem[_25019]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224] = mem[_25019]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 256 len ceil32(_25659)] = mem[_25019 + 32 len ceil32(_25659)]
        if ceil32(_25659) > _25659:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + _25659 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17751 + stor12.length.field_1 + 224 len ceil32(_25659) + 32], 
    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192] = 0
    _17887 = mem[ceil32(stor11.length.field_1) + 128]
    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + 192 len ceil32(mem[ceil32(stor11.length.field_1) + 128])] = mem[ceil32(stor11.length.field_1) + 160 len ceil32(mem[ceil32(stor11.length.field_1) + 128])]
    if ceil32(mem[ceil32(stor11.length.field_1) + 128]) <= mem[ceil32(stor11.length.field_1) + 128]:
        if bool(stor12.length):
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
                _23612 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23612)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23612)]
                if ceil32(_23612) > _23612:
                    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23612 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23612) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23788 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
                if ceil32(_23788) > _23788:
                    mem[_23788 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23788) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _25020 = mem[64]
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192] = 32
            _25660 = mem[_25020]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224] = mem[_25020]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 256 len ceil32(_25660)] = mem[_25020 + 32 len ceil32(_25660)]
            if ceil32(_25660) > _25660:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + _25660 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224 len ceil32(_25660) + 32], 
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _23789 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23789)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23789)]
            if ceil32(_23789) > _23789:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23789 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23789) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23981 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_23981) > _23981:
                mem[_23981 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23981) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _25021 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192] = 32
        _25661 = mem[_25021]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224] = mem[_25021]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 256 len ceil32(_25661)] = mem[_25021 + 32 len ceil32(_25661)]
        if ceil32(_25661) > _25661:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + _25661 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224 len ceil32(_25661) + 32], 
    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = 0
    if bool(stor12.length):
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
            _23790 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23790)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23790)]
            if ceil32(_23790) > _23790:
                mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23790 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23790) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23982 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
            if ceil32(_23982) > _23982:
                mem[_23982 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23982) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _25022 = mem[64]
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192] = 32
        _25662 = mem[_25022]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224] = mem[_25022]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 256 len ceil32(_25662)] = mem[_25022 + 32 len ceil32(_25662)]
        if ceil32(_25662) > _25662:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + _25662 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224 len ceil32(_25662) + 32], 
    if bool(stor12.length) == stor12.length.field_1 < 32:
        revert with 'NH{q', 34
    if not bool(stor12.length):
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + 192] = Mask(248, 8, stor12.length)
        mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 192] = 32
        _23983 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 256 len ceil32(_23983)] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(_23983)]
        if ceil32(_23983) > _23983:
            mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + _23983 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + stor12.length.field_1 + 224 len ceil32(_23983) + 32], 
    if bool(stor12.length) != 1:
        mem[64] = 0
        _24047 = mem[ceil32(stor11.length.field_1) + ceil32(s) + 160]
        mem[64 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1) + ceil32(s) + 160])]
        if ceil32(_24047) > _24047:
            mem[_24047 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_24047) + -mem[64] + 64
    mem[0] = 12
    idx = 0
    t = 0
    while idx < stor12.length.field_1:
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + mem[ceil32(stor11.length.field_1) + 128] + idx + 192] = stor12[t].field_0
        idx = idx + 32
        t = t + 1
        continue 
    _25023 = mem[64]
    mem[64] = ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192
    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 192] = 32
    _25663 = mem[_25023]
    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224] = mem[_25023]
    mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 256 len ceil32(_25663)] = mem[_25023 + 32 len ceil32(_25663)]
    if ceil32(_25663) > _25663:
        mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + _25663 + 256] = 0
    return 32, mem[ceil32(stor11.length.field_1) + ceil32(s) + stor11.length.field_1 + _17887 + stor12.length.field_1 + 224 len ceil32(_25663) + 32], 
}



}
